<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikidata</sitename>
    <dbname>wikidatawiki</dbname>
    <base>https://www.wikidata.org/wiki/Wikidata:Main_Page</base>
    <generator>MediaWiki 1.36.0-wmf.38</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikidata</namespace>
      <namespace key="5" case="first-letter">Wikidata talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="120" case="first-letter">Property</namespace>
      <namespace key="121" case="first-letter">Property talk</namespace>
      <namespace key="122" case="first-letter">Query</namespace>
      <namespace key="123" case="first-letter">Query talk</namespace>
      <namespace key="146" case="first-letter">Lexeme</namespace>
      <namespace key="147" case="first-letter">Lexeme talk</namespace>
      <namespace key="640" case="first-letter">EntitySchema</namespace>
      <namespace key="641" case="first-letter">EntitySchema talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="1198" case="first-letter">Translations</namespace>
      <namespace key="1199" case="first-letter">Translations talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
      <namespace key="2600" case="first-letter">Topic</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>MediaWiki:Lang</title>
    <ns>8</ns>
    <id>99179</id>
    <revision>
      <id>557831</id>
      <timestamp>2012-11-24T03:13:26Z</timestamp>
      <contributor>
        <username>Moe Epsilon</username>
        <id>7706</id>
      </contributor>
      <comment>start</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2" xml:space="preserve">en</text>
      <sha1>132vgcjgm2eh6byg07vvb8e3d26dum3</sha1>
    </revision>
  </page>
  <page>
    <title>Module:SPARQLMentions</title>
    <ns>828</ns>
    <id>28161729</id>
    <revision>
      <id>661638891</id>
      <parentid>378513738</parentid>
      <timestamp>2018-04-05T22:07:10Z</timestamp>
      <contributor>
        <username>Smalyshev (WMF)</username>
        <id>1482806</id>
      </contributor>
      <comment>add new normalized predicates</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="2498" xml:space="preserve">local p = {}

-- Return the label of a given data item, formatted for linking
local function getLabel(frame, id, prefix)
	if prefix == nil then prefix = '' end
	if id == "defaultView:BubbleChart" then id = "Q24515280" end
	if id == "defaultView:Graph" then id = "Q24515287" end
	if id == "defaultView:Map" then id = "Q24515275" end
    if id == "defaultView:ImageGrid" then id = "Q24515278" end
	if id == "wikibase:box"  then id = "Q26211169" end
	if id == "wikibase:cornerWest" then id = "Q26211177" end
	label = mw.wikibase.label( id )
	if label == nil then
		linktext = id
		extra = ''
	else 
		linktext = label .. " (" .. id .. ")"
		extra = '&amp;nbsp;' .. frame:expandTemplate({ title="Reasonator", args= { [1] = id}})  
			.. '&amp;nbsp;' .. frame:expandTemplate({ title="SQID", args= { [1] = id}})
	end
    link = mw.wikibase.getEntityUrl( id )
	return '[' .. link .. ' ' .. linktext .. ']' .. extra;
end


local function map(func, array)
  local new_array = {}
  for i,v in ipairs(array) do
    new_array[i] = func(v)
  end
  return new_array
end

local function getAll(text, regexp, seen, items) 
	if items == nil then items = {} end
	if seen == nil then seen = {} end
	for item in string.gmatch(text, regexp) do
		if seen[item] == nil then
			seen[item] = 1
			table.insert(items, item)
		end
	end
	return items
end


-- Produce list of items mentioned in the query
function p.getItems(frame)
	if not mw.wikibase then
		return "no mw.wikibase"
	end

	items = getAll(frame.args[1], 'wd:(Q%d+)')
	return table.concat(map(function(it) return getLabel(frame, it) end, items), ", ")
end

-- Produce list of properties mentioned in the query
function p.getProperties(frame)
	if not mw.wikibase then
		return "no mw.wikibase"
	end
	
	seen = {}
	items = {}
	prefixes = {'wdt', 'p', 'ps', 'pr', 'pq', 'psv', 'pv', 'prv', 'pqv', 'wdtn', 'psn', 'pqn', 'prn', 'wdno' }
	for _, pr in ipairs(prefixes) do
		items = getAll(frame.args[1], pr .. ':(P%d+)', seen, items)
	end
	return table.concat(map(function(it) return getLabel(frame, it, 'Property:') end, items), ", ")
end

function p.getFunctions(frame)
	if not mw.wikibase then
		return "no mw.wikibase"
	end
	
	seen = {}
	items = {}
	func = {'defaultView:BubbleChart', 'defaultView:Graph', 'defaultView:Map', 'defaultView:ImageGrid', 'wikibase:box', "wikibase:cornerWest" }
	for _, pr in ipairs(func) do
		items = getAll(frame.args[1], pr, seen, items)
	end
	return table.concat(map(function(it) return getLabel(frame, it) end, items), ", ")
end


return p</text>
      <sha1>guwzichvn5vt4k52zwtxwd4qak4foga</sha1>
    </revision>
	<revision>
      <id>239</id>
      <parentid>226</parentid>
      <timestamp>2020-07-07T18:18:06Z</timestamp>
      <contributor>
        <username>DFichtmueller</username>
        <id>1</id>
      </contributor>
      <comment>disabled Reasonator and SQID</comment>
      <origin>239</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="2489" sha1="fnl4rf6bhwfehazewrowl4aqsmo5ggu" xml:space="preserve">local p = {}

-- Return the label of a given data item, formatted for linking
local function getLabel(frame, id, prefix)
	if prefix == nil then prefix = '' end
	if id == "defaultView:BubbleChart" then id = "Q24515280" end
	if id == "defaultView:Graph" then id = "Q24515287" end
	if id == "defaultView:Map" then id = "Q24515275" end
    if id == "defaultView:ImageGrid" then id = "Q24515278" end
	if id == "wikibase:box"  then id = "Q26211169" end
	if id == "wikibase:cornerWest" then id = "Q26211177" end
	label = mw.wikibase.label( id )
	if label == nil then
		linktext = id
		extra = ''
	else 
		linktext = label .. " (" .. id .. ")"
		extra = '&amp;nbsp;' .. frame:expandTemplate({ title="Reasonator", args= { [1] = id}})  
			.. '&amp;nbsp;' .. frame:expandTemplate({ title="SQID", args= { [1] = id}})
	end
    link = mw.wikibase.getEntityUrl( id )
	return '[' .. link .. ' ' .. linktext .. ']';
end


local function map(func, array)
  local new_array = {}
  for i,v in ipairs(array) do
    new_array[i] = func(v)
  end
  return new_array
end

local function getAll(text, regexp, seen, items) 
	if items == nil then items = {} end
	if seen == nil then seen = {} end
	for item in string.gmatch(text, regexp) do
		if seen[item] == nil then
			seen[item] = 1
			table.insert(items, item)
		end
	end
	return items
end


-- Produce list of items mentioned in the query
function p.getItems(frame)
	if not mw.wikibase then
		return "no mw.wikibase"
	end

	items = getAll(frame.args[1], 'wd:(Q%d+)')
	return table.concat(map(function(it) return getLabel(frame, it) end, items), ", ")
end

-- Produce list of properties mentioned in the query
function p.getProperties(frame)
	if not mw.wikibase then
		return "no mw.wikibase"
	end
	
	seen = {}
	items = {}
	prefixes = {'wdt', 'p', 'ps', 'pr', 'pq', 'psv', 'pv', 'prv', 'pqv', 'wdtn', 'psn', 'pqn', 'prn', 'wdno' }
	for _, pr in ipairs(prefixes) do
		items = getAll(frame.args[1], pr .. ':(P%d+)', seen, items)
	end
	return table.concat(map(function(it) return getLabel(frame, it, 'Property:') end, items), ", ")
end

function p.getFunctions(frame)
	if not mw.wikibase then
		return "no mw.wikibase"
	end
	
	seen = {}
	items = {}
	func = {'defaultView:BubbleChart', 'defaultView:Graph', 'defaultView:Map', 'defaultView:ImageGrid', 'wikibase:box', "wikibase:cornerWest" }
	for _, pr in ipairs(func) do
		items = getAll(frame.args[1], pr, seen, items)
	end
	return table.concat(map(function(it) return getLabel(frame, it) end, items), ", ")
end


return p</text>
      <sha1>fnl4rf6bhwfehazewrowl4aqsmo5ggu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Q</title>
    <ns>10</ns>
    <id>14832698</id>
    <revision>
      <id>1225880144</id>
      <parentid>806970746</parentid>
      <timestamp>2020-07-06T17:05:23Z</timestamp>
      <contributor>
        <username>Matěj Suchánek</username>
        <id>53613</id>
      </contributor>
      <comment>Fulfilling [[Template:Edit request|edit request]] by [[User:Tacsipacsi|Tacsipacsi]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="121" xml:space="preserve">{{label|{{{1|}}}|capitalization={{{capitalization|}}} |show_id=1 |link=wikidata}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>84losvkx3j78cmsktr8c4bwpfh8ikmo</sha1>
    </revision>
	<revision>
      <id>241</id>
      <parentid>240</parentid>
      <timestamp>2020-07-07T18:20:17Z</timestamp>
      <contributor>
        <username>DFichtmueller</username>
        <id>1</id>
      </contributor>
      <comment>rewrote template based on wp:Template:Wikidata_entity_link to work with independent Wikibase installations</comment>
      <origin>241</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="367" sha1="lbgsc8qrw1m8abq9f1gwgvcqqhyndk7" xml:space="preserve">&lt;includeonly&gt;{{#ifeq: {{padleft:|1|{{#if:1|{{{1|}}}}}}} | Q  
 | [[{{MediaWiki:ItemNamespace}}{{{1|}}}|{{#invoke:Wikibase|label|{{{1|}}}}} &lt;small&gt;{{int:parentheses|{{{1|}}}}}&lt;/small&gt;]]
 | [[{{MediaWiki:ItemNamespace}}Q{{{1|}}}|{{#invoke:Wikibase|label|Q{{{1|}}}}} &lt;small&gt;{{int:parentheses|Q{{{1|}}}}}&lt;/small&gt;]]
}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>lbgsc8qrw1m8abq9f1gwgvcqqhyndk7</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Wikibase/doc</title>
    <ns>828</ns>
    <id>31208024</id>
    <revision>
      <id>1129608876</id>
      <parentid>654636516</parentid>
      <timestamp>2020-03-05T14:32:37Z</timestamp>
      <contributor>
        <username>Amadalvarez</username>
        <id>64871</id>
      </contributor>
      <comment>categ</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5289" xml:space="preserve">{{#ifeq:{{SUBPAGENAME}}|doc||{{Documentation/start box2}}}}{{Documentation subpage}}
&lt;!-- Categories go at the bottom of this page. --&gt;

== Usage ==
; label
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;#invoke: {{BASEPAGENAME}} | '''label''' }}&lt;/code&gt;
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;#invoke: {{BASEPAGENAME}} | '''label''' | ''entity id (Q# or P#)'' }}&lt;/code&gt;

; description
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;#invoke: {{BASEPAGENAME}} | '''description''' | ''entity id (Q# or P#)'' | ''language code'' }}&lt;/code&gt;

; datatype
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;#invoke: {{BASEPAGENAME}} | '''datatype''' | ''property id (P#)'' }}&lt;/code&gt;

== Examples ==

=== label ===

Current page
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | label }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | label }}

{{Q|8565357}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | label | Q8565357 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | label | Q8565357 }}

{{Q|132689}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | label | Q132689 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | label | Q132689 }}

{{P|31}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | label | P31 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | label | P31 }}

=== description ===

{{Q|8565357}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | description | Q8565357 | en }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | description | Q8565357 | en }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | description | Q8565357 | es }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | description | Q8565357 | es }}

{{Q|132689}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | description | Q132689 | en }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | description | Q132689 | en }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | description | Q132689 | es }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | description | Q132689 | es }}

{{P|31}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | description | P31 | en }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | description | P31 | en }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | description | P31 | es }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | description | P31 | es }}

=== datatype ===
{{see also | Help:Data type | Special:ListDatatypes }}

Commons media: {{P|18}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | P18 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | P18 }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | Property:P18 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | Property:P18 }}

Globe coordinate: {{P|625}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | P625 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | P625 }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | Property:P625 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | Property:P625 }}

Item: {{P|6}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | P6 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | P6 }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | Property:P6 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | Property:P6 }}

Property: {{P|1647}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | P1647 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | P1647 }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | Property:P1647 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | Property:P1647 }}

String: {{P|225}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | P225 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | P225 }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | Property:P225 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | Property:P225 }}

Monolingual text: {{P|1448}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | P1448 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | P1448 }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | Property:P1448 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | Property:P1448 }}

Quantity: {{P|1082}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | P1082 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | P1082 }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | Property:P1082 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | Property:P1082 }}

Time: {{P|569}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | P569 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | P569 }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | Property:P569 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | Property:P569 }}

URL: {{P|856}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | P856 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | P856 }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | Property:P856 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | Property:P856 }}

Mathematical expression: {{P|2534}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | P2534 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | P2534 }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | Property:P2534 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | Property:P2534 }}

External identifier: {{P|212}}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | P212 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | P212 }}
* &lt;code&gt;&lt;nowiki&gt;{{#invoke:Wikibase | datatype | Property:P212 }}&lt;/nowiki&gt;&lt;/code&gt; → {{#invoke:Wikibase | datatype | Property:P212 }}

&lt;includeonly&gt;{{#ifeq:{{SUBPAGENAME}}|sandbox||
&lt;!-- Categories go here: --&gt;
[[Category:Modules]]

[[Category:Global Templates]]}}&lt;/includeonly&gt;
{{#ifeq:{{SUBPAGENAME}}|doc||{{Documentation/end box2}}}}</text>
      <sha1>6730h2m1w97zsg02yp5r344ghgu0son</sha1>
    </revision>
  </page>
  <page>
    <title>Template:See also</title>
    <ns>10</ns>
    <id>9023514</id>
    <revision>
      <id>17335339</id>
      <parentid>17335337</parentid>
      <timestamp>2013-03-31T03:39:40Z</timestamp>
      <contributor>
        <username>Tamzin</username>
        <id>72907</id>
      </contributor>
      <minor/>
      <comment>77 revisions from [[:en:Template:See also]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2165" xml:space="preserve">{{rellink|extraclasses=boilerplate seealso|{{{altphrase|See also}}}: {{#if:{{{1&lt;includeonly&gt;|&lt;/includeonly&gt;}}} |&lt;!--then:--&gt;[[:{{{1}}}{{#if:{{{label 1|{{{l1|}}}}}}|{{!}}{{{label 1|{{{l1}}}}}}}}]] |&lt;!--else:--&gt;'''Error: [[Template:See also|Template must be given at least one article name]]'''
}}{{#if:{{{2|}}}|{{#if:{{{3|}}}|, |&amp;nbsp;and }} [[:{{{2}}}{{#if:{{{label 2|{{{l2|}}}}}}|{{!}}{{{label 2|{{{l2}}}}}}}}]]
}}{{#if:{{{3|}}}|{{#if:{{{4|}}}|, |,&amp;nbsp;and }} [[:{{{3}}}{{#if:{{{label 3|{{{l3|}}}}}}|{{!}}{{{label 3|{{{l3}}}}}}}}]]
}}{{#if:{{{4|}}}|{{#if:{{{5|}}}|, |,&amp;nbsp;and }} [[:{{{4}}}{{#if:{{{label 4|{{{l4|}}}}}}|{{!}}{{{label 4|{{{l4}}}}}}}}]]
}}{{#if:{{{5|}}}|{{#if:{{{6|}}}|, |,&amp;nbsp;and }} [[:{{{5}}}{{#if:{{{label 5|{{{l5|}}}}}}|{{!}}{{{label 5|{{{l5}}}}}}}}]]
}}{{#if:{{{6|}}}|{{#if:{{{7|}}}|, |,&amp;nbsp;and }} [[:{{{6}}}{{#if:{{{label 6|{{{l6|}}}}}}|{{!}}{{{label 6|{{{l6}}}}}}}}]]
}}{{#if:{{{7|}}}|{{#if:{{{8|}}}|, |,&amp;nbsp;and }} [[:{{{7}}}{{#if:{{{label 7|{{{l7|}}}}}}|{{!}}{{{label 7|{{{l7}}}}}}}}]]
}}{{#if:{{{8|}}}|{{#if:{{{9|}}}|, |,&amp;nbsp;and }} [[:{{{8}}}{{#if:{{{label 8|{{{l8|}}}}}}|{{!}}{{{label 8|{{{l8}}}}}}}}]]
}}{{#if:{{{9|}}}|{{#if:{{{10|}}}|, |,&amp;nbsp;and }} [[:{{{9}}}{{#if:{{{label 9|{{{l9|}}}}}}|{{!}}{{{label 9|{{{l9}}}}}}}}]]
}}{{#if:{{{10|}}}|{{#if:{{{11|}}}|, |,&amp;nbsp;and }} [[:{{{10}}}{{#if:{{{label 10|{{{l10|}}}}}}|{{!}}{{{label 10|{{{l10}}}}}}}}]]
}}{{#if:{{{11|}}}|{{#if:{{{12|}}}|, |,&amp;nbsp;and }} [[:{{{11}}}{{#if:{{{label 11|{{{l11|}}}}}}|{{!}}{{{label 11|{{{l11}}}}}}}}]]
}}{{#if:{{{12|}}}|{{#if:{{{13|}}}|, |,&amp;nbsp;and }} [[:{{{12}}}{{#if:{{{label 12|{{{l12|}}}}}}|{{!}}{{{label 12|{{{l12}}}}}}}}]]
}}{{#if:{{{13|}}}|{{#if:{{{14|}}}|, |,&amp;nbsp;and }} [[:{{{13}}}{{#if:{{{label 13|{{{l13|}}}}}}|{{!}}{{{label 13|{{{l13}}}}}}}}]]
}}{{#if:{{{14|}}}|{{#if:{{{15|}}}|, |,&amp;nbsp;and }} [[:{{{14}}}{{#if:{{{label 14|{{{l14|}}}}}}|{{!}}{{{label 14|{{{l14}}}}}}}}]]
}}{{#if:{{{15|}}}|,&amp;nbsp;and [[:{{{15}}}{{#if:{{{label 15|{{{l15|}}} }}}|{{!}}{{{label 15|{{{l15|}}} }}} }}]]
}}{{#if:{{{16|}}}| &amp;mdash; '''&lt;br/&gt;Error: [[Template:See also|Too many links specified (maximum is 15)]]'''
}}}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>eot43r3pz980m26b40oh5jiriw1nfm0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Rellink</title>
    <ns>10</ns>
    <id>9023589</id>
    <revision>
      <id>1365022793</id>
      <parentid>1364200906</parentid>
      <timestamp>2021-02-19T09:04:40Z</timestamp>
      <contributor>
        <username>Lymantria</username>
        <id>66011</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contributions/Munir husen|Munir husen]] ([[User talk:Munir husen|talk]]) to last revision by [[:User:Tamzin|Tamzin]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="140" xml:space="preserve">&lt;div class="rellink{{#if:{{{extraclasses|}}}|&lt;nowiki&gt; &lt;/nowiki&gt;{{{extraclasses}}}}}"&gt;{{{1}}}&lt;/div&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>2324mokuqb4rybkh0qre9oyyqesbdvb</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Wikidata/doc</title>
    <ns>828</ns>
    <id>19219381</id>
    <revision>
      <id>726494096</id>
      <parentid>618554853</parentid>
      <timestamp>2018-08-15T15:32:32Z</timestamp>
      <contributor>
        <username>Realworldobject</username>
        <id>1774893</id>
      </contributor>
      <comment>Fixed typo</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7201" xml:space="preserve">Module permitting basic data retrieval from items. It is mostly useful for other modules or for {{tl|Data}}

&lt;small&gt;&lt;i&gt;A copy is available on [https://test.wikidata.org/wiki/Module:Wikidata test Wikidata]&lt;/i&gt;&lt;/small&gt;
== Functions callable from Lua ==

'''p.getClaims returns claims in a particular item that match a particular query
* item (required): its Qid
* property (required) property that the claims should have
* qualifier = qualifiers that the statement should have
* withrank = rank of the statement ; 'preferred', 'normal', 'deprecated' or 'valid' (ie. normal and preferred). By default = preferred.
* sourceproperty = this property should be used in the source 
* withsource = the source that should be provided in the statement (if sourceproperty is not provided, the property used is {{p|248}})
* excludespecial = set to true if you do not want to get "novalue" and "somevalue". 
* numval = if you want to set a maximum number of values to be returned
* sorttype = set to "chronological" to get the statements in chronological order using the {{p|580}}, {{p|582}} and {{p|585}} qualifiers. Set to "inverted" for chronological order. From a Lua module, you can also define your own sorting criteria.
* showsource = set to "true" if you want the source of the statement to be displayed.

'''p.formatStatements(args)''': returns a string containing the statements given in the table args. Same keys as getClaims, plus formatting arguments: 
* lang (required) for the desired language
* displayformat = the format in which the args should be returned. For example, for a string-type property displayformat = "weblink" returns a formatted weblink. 
* conj = the conjunction separating the statements. For example, conj = '&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;' will make a new line between each statement.
* showqualifiers = the qualifiers that should be shown along with the mainsnak value

'''p.getLabel''' get the label of an entity
* entity = entity ID with its Q or P
* lang

== Functions callable from wikitext ==
* '''p.formatStatementsE''' same as p.formatStatements, except that "lang" is not required. It is most conveniently used from {{tl|Data}} that takes exactly the same arguments.
* '''p.getLabel''' get the label of an entity

=== Examples ===

{| class="wikitable"
|-
! Code !! Render !! Comment
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|getLabel|entity=Q42}}&lt;/nowiki&gt; || {{#invoke:Wikidata|getLabel|entity=Q42}} || {{Q|42}}
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|getLabel|entity=Q42|link=wikipedia}}&lt;/nowiki&gt; || {{#invoke:Wikidata|getLabel|entity=Q42|link=wikipedia}} || 
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|getLabel|entity=Q42|link=-}}&lt;/nowiki&gt; || {{#invoke:Wikidata|getLabel|entity=Q42|link=-}} || 
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|getLabel|entity=Q42|link=wikipedia|lang=ja}}&lt;/nowiki&gt; || {{#invoke:Wikidata|getLabel|entity=Q42|link=wikipedia|lang=ja}} || 
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|getLabel|entity=Q42|link=wikidata}}&lt;/nowiki&gt; || {{#invoke:Wikidata|getLabel|entity=Q42|link=wikidata}} || 
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|getLabel|entity=Q42|link=wikidata|lang=ja}}&lt;/nowiki&gt; || {{#invoke:Wikidata|getLabel|entity=Q42|link=wikidata|lang=ja}} || 
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q42|property=p31}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q42|property=p31}} || {{Q|42}} {{P|31}}
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q42|property=p31|lang=ja}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q42|property=p31|lang=ja}} || 
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q42|property=p569}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q42|property=p569}} || {{Q|42}} {{P|569}} 
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q42|property=p569|lang=ja}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q42|property=p569|lang=ja}} || 
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q42|property=p569|displayformat=raw}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q42|property=p569|displayformat=raw}} || 
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186}} || {{Q|12418}} {{P|186}}
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186|displayformat=raw}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186|displayformat=raw}} || 
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186|lang=ja}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186|lang=ja}} || 
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186|rank=valid}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186|rank=valid}} || rank = "valid" accepts both "preferred" and "normal" values
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186|numval=1}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186|numval=1}} || returns the number of values numval (priority to those with "rank= preferred", if there are not enough of them, also accepts "rank = normal")
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186|qualifier=p518}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186|qualifier=p518}} || {{Q|12418}} {{P|186}} {{P|518}} should only display values that have a p518 qualifier
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186|showqualifiers=p518}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q12418|property=p186|showqualifiers=p518}} ||  shows the value of the p518 qualifier (if any) in addition to the main value
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q83259|property=p669|showqualifiers=p670|delimiter=&amp;amp;#32;}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q83259|property=p669|showqualifiers=p670|delimiter=&amp;#32;}} || {{Q|83259}} {{P|669}} {{P|670}} shows the value of the P670 qualifier (if any) in addition to the main value separated by a space
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q12418|property=P276|sourceproperty=P854}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q12418|property=P276|sourceproperty=P854}} || {{Q|12418}} {{P|276}} {{P|854}}
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q11879536|property=P460|withsource=Q1645493}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q11879536|property=P460|withsource=Q1645493}} || {{Q|11879536}} {{P|460}} {{Q|1645493}}
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q11879536|property=P460|withsource=Q1645493|showsource=true}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q11879536|property=P460|withsource=Q1645493|showsource=true}} || 
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q153|property=P231|showsource=true}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q153|property=P231|showsource=true}} || {{Q|153}} {{P|231}}
|-
| &lt;nowiki&gt;{{#invoke:Wikidata|formatStatementsE|item=Q205309|property=P793|sorttype=inverted}}&lt;/nowiki&gt; || {{#invoke:Wikidata|formatStatementsE|item=Q205309|property=P793|sorttype=inverted}} || {{Q|205309}} {{P|793}}
|}

== See also ==
* [[Module:Wd]]</text>
      <sha1>szxnv572stj1uwqccq2ak14j3z9dkp7</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Linguistic</title>
    <ns>828</ns>
    <id>19182769</id>
    <revision>
      <id>800417346</id>
      <parentid>800266186</parentid>
      <timestamp>2018-11-27T20:24:43Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <comment>restore previous inparentheses function</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="6304" xml:space="preserve">--[[
  __  __           _       _        _     _                   _     _   _      
 |  \/  | ___   __| |_   _| | ___ _| |   (_)_ __   __ _ _   _(_)___| |_(_) ___ 
 | |\/| |/ _ \ / _` | | | | |/ _ (_) |   | | '_ \ / _` | | | | / __| __| |/ __|
 | |  | | (_) | (_| | |_| | |  __/_| |___| | | | | (_| | |_| | \__ \ |_| | (__ 
 |_|  |_|\___/ \__,_|\__,_|_|\___(_)_____|_|_| |_|\__, |\__,_|_|___/\__|_|\___|
                                                  |___/                        
Simple internationalization functions that can be called by other modules.
This Module was copied from Wikimedia Commons, so please request changes there.

Maintainers:
* Zolo - original version
* Jarekt

Dependencies:
* Module:I18n/or
* Module:Delink
* Module:Yesno
]]

-- ==================================================
-- === Internal functions ===========================
-- ==================================================

local function langSwitch(list,lang)
	local langList = mw.language.getFallbacksFor(lang)
	table.insert(langList,1,lang)
	for i,language in ipairs(langList) do
		if list[language] then
			return list[language]
		end
	end
	return nil
end

-- ==================================================
-- === External functions ===========================
-- ==================================================
local p = {}

function p.vowelfirst (str)
	if str then 
		local vowels = 'aeiouyąăẵằẳặȃắâẫấầẩậãäǟāáàȁǎảẚåǻḁạǡæǣǽĕȇêễếềểệḙẽḛëēḕéḗèȅěẻẹęȩḝǝĭȋîĩḭïḯīíìȉǐỉịįıŏȏôỗốồổộõṏṍöōṑóṓòȍǒỏọǫǭơỡớờởợøǿŭȗûṷũṻṹṵüǖǘǜǚṳūúùȕǔủůụųưữứừửựŷỹÿȳýỳỷẙỵ'
		str = mw.ustring.lower(mw.ustring.sub(str,1,1))
		return mw.ustring.find(vowels, str, 1, true ) 
	end
end

function p.inparentheses(str, lang)
	--todo: define language with exotic parentheses
	if (not str) or (str == "") then
		return str
	else
		return ' (' .. str .. ')'
		-- needs internationalization.
		-- Needs leading space in English because as some languages do not use it, it is part of the formatting
	end
end

function p.of(word, lang, raw, gender, number, determiner) -- rough translation of "of" in various languages
-- note that the cases when on "of" is employed varies a lot among languages, so it is more prudent to call this from lang specific function only
	if not raw or mw.text.trim(raw) == "" then 
		local args = {}
		local Delink = require('Module:Delink')._delink
		args[1] = word
		raw = mw.ustring.lower(Delink(args))
	end

	-- raw is the string without the Wikiformatting so that it correctly analyses the string that is [[:fr:Italie|Italie]] -&gt; 'italie'
	-- any way to automate this ?
	
	if lang == 'fr' then 
		local yesno = require('Module:Yesno')
		determiner = yesno(determiner,false)

		if determiner then
			if string.sub(number or '',1,1)=='p' then -- number == 'plural'
				return 'des&amp;#32;' .. word
			elseif p.vowelfirst(raw) then
				return 'de l’' .. word
			elseif string.sub(gender or '',1,1)=='f' then -- gender == 'feminine'
				return 'de la&amp;#32;' .. word
			else
				return 'du&amp;#32;' .. word
			end
		else
			if p.vowelfirst(raw) then
				return 'd’' .. word
			else
				return 'de&amp;#32;' .. word
			end
		end
	elseif lang == 'ca' then
		-- implement [[Template:Of/ca]] or  https://ca.wikipedia.org/wiki/Plantilla:Deod%27/base for case where "{{{context}}}" is "en" (default on Commons)
		if ( p.vowelfirst(raw) and not mw.ustring.find( 'ia|ià|ie|io|iu|ua|ue|ui|uí|uï|uo|ya|ye|yi|yo|yu|', mw.ustring.sub(raw,1,2) .. '|')) then
			return 'd\'' .. word
		else
			return 'de ' .. word
		end
	end	

end

function p.offromwiki(frame)
	args = frame.args
	return p.of(args.word, args.lang, args.raw, args.gender, args.number, args.determiner)
end

function p.noungroup(noun, adj, lang)
	if not noun or noun == '' then 
		return nil -- not '' so that it is not counted as a string by mw.listToText
	end
	if not adj or adj == ''
		then return noun
	end
	
	local wordsep = mw.message.new( "Word-separator" ):inLanguage(lang):plain()
	local LUT = { de=1, en=1, pl=1, zh=1, fr=2, es=2, it=2}
	local case = langSwitch(LUT, lang)
	if case==1 then     -- adjective before the noun
		return adj .. wordsep .. noun
	elseif case==2 then -- adjective after the noun
		return noun .. wordsep .. adj
	else                -- order unknown
		return noun ' (' .. adj .. ')'
	end
end

function p.conj(args, lang, conjtype)
	local comma    = mw.message.new( "comma-separator"):inLanguage(lang):plain()
	local wordsep  = mw.message.new( "Word-separator" ):inLanguage(lang):plain()
	local andtable = { ar=' و', he=' ו', ja='および', pl=' i '} -- languages with a problem with the MediaWiki:And
	if conjtype == 'comma' then
		return mw.text.listToText(args, comma, comma)
	elseif conjtype == 'or' then 
		local wordor = 	langSwitch(require('Module:I18n/or'), lang)
		return mw.text.listToText(args, comma, wordor  .. wordsep)
	elseif conjtype == 'explicit or' then -- adds "or" betwen all words when the context can be confusing
		local wordor = 	langSwitch(require('Module:I18n/or'), lang)
		return mw.text.listToText(args, wordor .. wordsep, wordor  .. wordsep)
	elseif conjtype and conjtype ~= 'and' and conjtype ~= '' then
		return mw.text.listToText(args, conjtype, conjtype)
	elseif andtable[lang] then 
		return mw.text.listToText(args, comma, andtable[lang])
	else
		local wordand = mw.message.new( "and" ):inLanguage(lang):plain()
		return mw.text.listToText(args, comma, wordand .. wordsep)
	end
end

function p.conjfromWiki(frame)
	args = frame.args
	if not args or not args[1] then
		args = frame:getParent().args
	end
	local lang = args.lang
	if not lang or mw.text.trim(lang) == '' then
		lang = frame:callParserFunction( "int", "lang" )
	end
	newargs = {}  -- transform args metatable into a table so it can be concetenated
	for i, j in pairs(args) do
			if type(i) == 'number' then
				j = mw.text.trim(j)
				if j ~= '' then
					table.insert(newargs, j)
				end
			else 
				if i ~= 'type' and i ~= 'lang' then 
					return 'error: bad parameter in template:Conj: ' .. i .. '[[Category:Pages with incorrect template usage/Conj|A]]'
				end
			end
	end
	return p.conj(newargs, lang, args.type)
end

return p</text>
      <sha1>62v8sdhzbbazirrzgw1rjqswgsf1eoc</sha1>
    </revision>
  </page>
  <page>
    <title>Module:ISOdate</title>
    <ns>828</ns>
    <id>20467453</id>
    <revision>
      <id>911554094</id>
      <parentid>791989907</parentid>
      <timestamp>2019-04-12T20:06:56Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <comment>Rename Module:Date to Module:DateI18n</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="8647" xml:space="preserve">--[[  
 
This module is intended for processing of date strings.

Please do not modify this code without applying the changes first at Module:ISOdate/sandbox and testing 
at Module:ISOdate/sandbox/testcases and Module talk:ISOdate/sandbox/testcases.

Authors and maintainers:
* User:Parent5446 - original version of the function mimicking template:ISOdate
* User:Jarekt - original version of the functions mimicking template:Date and template:ISOyear

]]

 
local p = {}

-- =======================================
-- === Dependencies ======================
-- =======================================
local D = require('Module:DateI18n')

--[[
ISOyear
 
This function returns year part of date string.
 
Usage:
{{#invoke:ISOdate|ISOyear|target_string}}
 
Parameters
    1: The date string 
 
Error Handling:
   If the string does not look like it contain the year than the function will not return anything.
   That is the preferred treatment for the template:Creator which is the main (only?) template calling it.
]]
function p.ISOyear( frame )
	 return p._ISOyear( frame.args[1] )
end

function p._ISOyear( input )
	if not input then
		return ''
	end
	input = mw.text.trim( input )
    
	-- if empty string then return it
	if input == "" then
		return input
	end
    
	-- if number then return it
	if tonumber( input ) then
		return mw.ustring.format( '%04i', input )
	end
    
	-- otherwise use regular expression match
	input = mw.ustring.match( input, '^+?(-?%d%d?%d?%d?)-' )
	if input and tonumber( input ) then
		return mw.ustring.format( '%04i', input )
	else
		return ''
	end
end

--[[
ISOdate
 
This function is the core part of the ISOdate template. 
 
Usage:
{{#invoke:ISOdate|ISOdate|target_string|lang=}}
 
Parameters:
     1: The date string 
  lang: The language to display it in
  form: Language format (genitive, etc.) for some languages
 class: CSS class for the &lt;time&gt; node

 Error Handling:
   If the string does not look like it contain the proper ISO date than the function will return the original string.
   
   That is the preferred treatment for the template:Information (and similar templates) which calling it.
]]
function p.ISOdate(frame)
	local datestr, succeded
	local args = frame.args
	if not (args.lang and mw.language.isSupportedLanguage(args.lang)) then 
		args.lang = frame:callParserFunction( "int", "lang" ) -- get user's chosen language 
	end
	datestr, succeded = p._ISOdate(
		mw.text.trim(args[1]),
		args.lang,                  -- language
		args.case  or '',           -- allows to specify grammatical case for the month for languages that use them
		args.class or 'dtstart',    -- allows to set the html class of the time node where the date is included. 
		args.trim_year or '100-999' -- by default pad one and 2 digit years to be 4 digit long, while keeping 3 digit years as is	
	)
	return datestr
end

function p._ISOdate(datestr, lang, case, class, trim_year)

	-- pattern: regexp - regular expresion to test; dlen - number of date elements; tail = which element is a "tail" if any
	-- regexp hints:
	--  1) Strings starting with "^" and ending with "$" indicate whole string match
	--  2) optional tail part copied as-is and following the main parsed part of the date have to be separated from the date by a whitespace, so "(\s.+)?"
	local patterns = {
		-- strings starting with YYYY-MM-DD HH:MM:SS. Year 4 digits (if we know seconds than it was within the last 100 years), the rest 1-2
		-- date and time can be separated by space or "T" and there could be a "Z" on the end indicating "Zulu" time zone
		{dlen=6, tail=7, regexp="^+?(%d%d%d%d)-(%d%d?)-(%d%d?)[ T](%d%d?):(%d%d?):(%d%d?)Z?(%s.*)"}, 
		{dlen=6, tail=0, regexp="^+?(%d%d%d%d)-(%d%d?)-(%d%d?)[ T](%d%d?):(%d%d?):(%d%d?)Z?$"}, 
		-- strings starting with YYYY-MM-DD HH:MM. Year 4 digits, the rest 1-2
		-- (if one knows hour and minute than it was probably after a year 1000)
		{dlen=5, tail=6, regexp="^+?(%d%d%d%d)-(%d%d?)-(%d%d?)[ T](%d%d?):(%d%d?)(%s.+)"},
		{dlen=5, tail=0, regexp="^+?(%d%d%d%d)-(%d%d?)-(%d%d?)[ T](%d%d?):(%d%d?)$"},
		-- strings starting with YYYY-MM-DD. Year 1-4 digits, the rest 1-2
		{dlen=3, tail=4, regexp="^+?(%d%d?%d?%d?)-(%d%d?)-(%d%d?)(%s.+)"},
		{dlen=3, tail=0, regexp="^+?(%d%d?%d?%d?)-(%d%d?)-(%d%d?)$"},
		-- strings starting with YYYY-MM. Year 3-4 digits, month 2 digits
		-- (want to avoit converting to dates strings like 10-5 = 5
		{dlen=2, tail=3, regexp="^+?(%d%d%d%d?)-(%d%d)(%s.+)"}, 
		-- if whole string is in YYYY-MM form: If Year 1-4 digits, month 1-2 digits
		{dlen=2, tail=0, regexp="^+?(%d%d?%d?%d?)-(%d%d?)$"}, 
		-- string starts with a number -&gt; it has to be 3 or 4 digit long to be a year
		{dlen=1, tail=2, regexp="^+?(%d%d%d%d?)(%s.+)"},	
		 -- if whole string is a number (1-4 digit long) than it will be interpreted as a year
		{dlen=1, tail=0, regexp="^+?(%d%d?%d?%d?)$"},
	}
	
	-- create datevec based on which variables are provided
	local datevec, tail, formatNum
	datevec, tail, formatNum = p.test_date_formats(datestr or '', patterns)
	if datevec[1]=='' or datevec[1]==nil then
		-- quickly return if datestr does not look like date (it could be a template)
		return datestr, false
	end

	-- call p._Date function to format date string
	local succeded, datestr2
	succeded, datestr2 = pcall( D._Date, datevec, lang, case, class, trim_year)
	if succeded and datestr2~='' then
		return mw.text.trim( datestr2 .. tail), true
	else -- in case of errors return the original string
		return datestr, false
	end	
end

function p.ISOdate_extended(frame)
	-- pattern: regexp - regular expresion to test; dlen - number of date elements; tail = which element is a "tail" if any
	-- regexp hints:
	--  1) Strings starting with "^" and ending with "$" indicate whole string match
	--  2) optional tail part copied as-is and following the main parsed part of the date have to be separated from the date by a whitespace, so "(\s.+)?"

	local datestr, succeded
	local args = frame.args
	if not (args.lang and mw.language.isSupportedLanguage(args.lang)) then 
		args.lang = frame:callParserFunction( "int", "lang" ) -- get user's chosen language 
	end
	datestr, succeded = p._ISOdate(
		mw.text.trim(args[1]),
		args.lang,                  -- language
		args.case  or '',           -- allows to specify grammatical case for the month for languages that use them
		args.class or 'dtstart',    -- allows to set the html class of the time node where the date is included. 
		args.trim_year or '100-999' -- by default pad one and 2 digit years to be 4 digit long, while keeping 3 digit years as is	
	)
	if succeded then
		return datestr
	end

	local patterns = {
		-- Exended set of recognized formats: like MM/DD/YYYY
		{dlen=3, tail=4, regexp="^(%d%d?)[-./](%d%d?)[-./](%d%d%d%d)(%s.+)"},
		{dlen=3, tail=0, regexp="^(%d%d?)[-./](%d%d?)[-./](%d%d%d%d)$"},
		{dlen=3, tail=0, regexp="^(%d%d?)%s(%w+)%s(%d%d%d%d)$"},
		{dlen=3, tail=0, regexp="^(%w+)%s(%d%d?),%s(%d%d%d%d)$"},
	}
	
	local datevec, tail, formatNum, category = ''
	datevec, tail, formatNum = p.test_date_formats(frame.args[1], patterns)
	if formatNum==1 or formatNum==2 then
		vec = datevec;
		if tonumber(datevec[1])&gt;12 then
			frame.args[1] = string.format('%04i-%02i-%02i', datevec[3], datevec[2], datevec[1] )
			category = '[[Category:Date in DD/MM/YYYY format]]'
			return mw.text.trim( p.ISOdate(frame) .. tail);
		elseif tonumber(datevec[2])&gt;12 then
			frame.args[1] = string.format('%04i-%02i-%02i', datevec[3], datevec[1], datevec[2] )
			category = '[[Category:Date in MM/DD/YYYY format]]'
			return mw.text.trim( p.ISOdate(frame) .. tail);
		end
	elseif (formatNum==3 or formatNum==4) and (datevec[3]=='' or datevec[3]~=nil) then
		local str = mw.getCurrentFrame():callParserFunction( "#time", { 'Y-m-d', datestr} )
		local vec = {str:match( "^(%d%d?%d?%d?)-(%d%d?)-(%d%d?)$" )}
		if vec and vec[1]~=nil then
			frame.args[1] = string.format('%04i-%02i-%02i', vec[1], vec[2], vec[3] )
			category = '[[Category:Date in word format]]'
			return p.ISOdate(frame);
		end
	end	
	return datestr
end

function p.test_date_formats(datestr, patterns)
	-- pattern: regexp - regular expresion to test; dlen - number of date elements; tail = which element is a "tail" if any

	local datevec = {'','','','','',''}
	local tail = ''
	local vec, pat
	local formatNum = 0
	for i, pat in ipairs( patterns ) do
		vec = {datestr:match( pat.regexp )}
		if vec and vec[1]~=nil then
			for j=1,pat.dlen do
				datevec[j] = vec[j]
			end
			if pat.tail&gt;0 and vec[pat.tail]~=nil then
				tail = mw.ustring.gsub(' ' .. vec[pat.tail], ' +', ' ')
			end
			formatNum = i
			break
		end
	end
	return datevec, tail, formatNum
end

return p</text>
      <sha1>j39gy6r558hho42zfbkxhhf0ct4nea8</sha1>
    </revision>
  </page>
  <page>
    <title>Module:I18n/wikidata</title>
    <ns>828</ns>
    <id>20467393</id>
    <revision>
      <id>1300762293</id>
      <parentid>1271011536</parentid>
      <timestamp>2020-11-01T07:21:26Z</timestamp>
      <contributor>
        <username>Verdy p</username>
        <id>37250</id>
      </contributor>
      <comment>+entity-param-not-provided</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="12376" xml:space="preserve">return {
	["trackingcat"] = "Page using data from Wikidata", -- DON'T TRANSLATE

-- SPECIAL VALUES
	["novalue"] = {
		ar = "غير قابل للتطبيق",
		bn = "প্রযোজ্য নয়",
		ca = "no aplicable",
		cs = "nelze použít",
		de = "nicht anwendbar",
		en = "not applicable",
		es = "no aplicable",
		fr = "pas applicable",
		hu = "nem alkalmazható",
		ja = "適用できません",
		ko = "적용할 수 없습니다",
		lt = "netaikoma",
		mk = "неприменливо",
		nb = "gjelder ikke",
		nl = "niet van toepassing",
		nn = "gjeld ikkje",
		pl = "nie dotyczy",
		pt = "não aplicável",
		['pt-br'] = "não aplicável",
		ru = "неприменимо",
		sl = "neprimeren",
		sr = "неприменљиво",
		sv = "inte tillämpbar",
		th = "ไม่สามารถใช้งานได้",
		uk = "не застосовується",
		vi = "không có sẵn",
		['zh-hans'] = "不可用",
		['zh-hant'] = "不可用",
	},
	["somevalue"] = {
		ar = "غير معروف",
		bn = "অজানা",
		ca = "desconegut",
		cs = "neznámé",
		de = "unbekannt",
		en = "unknown",
		es = "desconocido",
		fr = "inconnu",
		hu = "ismeretlen",
		ja = "不明",
		ko = "알 수 없음",
		lt = "nežinomas",
		mk = "непознато",
		nb = "ukjent",
		nl = "onbekend",
		nn = "ukjend",
		pl = "nieznane",
		pt = "desconhecido",
		['pt-br'] = "desconhecido",
		ru = "неизвестно",
		sl = "neznan",
		sr = "непознато",
		sv = "okänd",
		th = "ไม่ทราบ",
		uk = "невідомий",
		vi = "không rõ",
		['zh-hans'] = "未知",
		['zh-hant'] = "不明",
	},

-- MISSING DATA
	["no-label"] = {
		ar = "بدون تسمية",
		bn = "লেবেল নেই",
		ca = "sense etiqueta",
		cs = "bez štítku",
		de = "keine Bezeichnung",
		en = "no label",
		es = "sin etiqueta",
		fr = "pas de libellé",
		hu = "nincs címke",
		ja = "ラベルなし",
		ko = "레이블 없음",
		lt = "nėra etiketės",
		mk = "без натпис",
		nb = "ingen etikett",
		nl = "geen label",
		nn = "ingen merkelapp",
		pl = "brak etykiety",
		pt = "sem rótulo",
		['pt-br'] = "sem rótulo",
		ru = "метка отсутствует",
		sl = "manjka oznaka",
		sr = "без назива",
		sv = "ingen etikett",
		th = "ไม่มีชื่อระบุ",
		uk = "без назви",
		vi = "không có nhãn",
		['zh-hans'] = "无标签",
	},
	["no description"] = {
		ar = "بدون وصف",
		bn = "বিবরণ নেই",
		ca = "sense descripció",
		cs = "bez popisu",
		de = "keine Beschreibung",
		en = "no description",
		es = "sin descripción",
		fr = "pas de description",
		hu = "nincs leírás",
		ja = "説明なし",
		ko = "설명 없음",
		lt = "nėra aprašymo",
		mk = "без опис",
		nb = "ingen beskrivelse",
		nl = "geen omschrijving",
		nn = "inga skildring",
		pl = "brak opisu",
		pt = "sem descrição",
		['pt-br'] = "sem descrição",
		ru = "описание отсутствует",
		sr = "без описа",
		sl = "manjka opis",
		sv = "ingen beskrivning",
		th = "ไม่มีคำอธิบาย",
		vi = "không có miêu tả",
		uk = "без опису",
		['zh-hans'] = "无描述",
	},
	
-- ERRORS 
	["property-param-not-provided"] = { -- MERGE WITH qualifier-param-not-provided
		bn = "'property' প্যারামিটার অনুপস্থিত",
		ca = "falta el paràmetre 'property'",
		cs = "chybí parametr „property“",
		de = "'property'-Parameter fehlt",
		en = "'property' parameter missing",
		es = "falta el parámetro 'property'",
		fr = "paramètre 'property' manquant",
		hu = "hiányzik a „property” (tulajdonság) paraméter",
		mk = "недостасува параметарот за својство ('property')",
		nb = "parameteren «property» mangler",
		nl = "parameter 'property' ontbreekt",
		nn = "parameteren «property» manglar",
		pl = "brak parametru 'property'",
		['pt-br'] = "parâmetro 'property' em falta",
		ru = "не указан параметр «property»",
		sl = "manjka parameter 'property'",
		sr = "'property' недостаје својство",
		sv = "'property'-parameter saknas",
		th = "ค่าของพารามิเตอร์ 'property' หายไป",
		uk = "без параметра 'property'",
		['zh-hans'] = "属性（'property'）参数丢失",
	},
	["qualifier-param-not-provided"] = {
		bn = "'qualifier' প্যারামিটার অনুপস্থিত",
		ca = "falta el paràmetre 'qualifier'",
		cs = "chybí parametr „qualifier“",
		de = "'qualifier'-Parameter fehlt",
		en = "'qualifier' parameter missing",
		es = "falta el parámetro 'qualifier'",
		fr = "paramètre 'qualifier' manquant",
		hu = "hiányzik a „qualifier” (minősítő) paraméter",
		mk = "недостасува параметарот за определница ('qualifier')",
		nb = "parameteren «qualifier» mangler",
		nl = "parameter 'qualifier' ontbreekt",
		nn = "parameteren «qualifier» manglar",
		pl = "brak parametru 'qualifier'",
		pt = "parâmetro 'qualifier' em falta",
		['pt-br'] = "parâmetro 'qualifier' em falta",
		ru = "не указан параметр «qualifier»",
		sl = "manjka parameter 'qualifier'",
		sr = "'qualifier' недостаје квалификатор",
		sv = "'qualifier'-parameter saknas",
		uk = "без параметра 'qualifier'",
		['zh-hans'] = "限定符（'qualifier'）参数丢失",
	},
	["entity-param-not-provided"] = {
		bn = "'entity' প্যারামিটার অনুপস্থিত",
		ca = "falta el paràmetre 'entity'",
		cs = "chybí parametr „entity“",
		de = "'entity'-Parameter fehlt",
		en = "'entity' parameter missing",
		es = "falta el parámetro 'entity'",
		fr = "paramètre 'entity' manquant",
		hu = "hiányzik a „entity” (tulajdonság) paraméter",
		mk = "недостасува параметарот за својство ('entity')",
		nb = "parameteren «entity» mangler",
		nl = "parameter 'entity' ontbreekt",
		nn = "parameteren «entity» manglar",
		pl = "brak parametru 'entity'",
		pt = "parâmetro 'entity' em falta",
		['pt-br'] = "parâmetro 'entity' em falta",
		ru = "не указан параметр «entity»",
		sl = "manjka parameter 'entity'",
		sr = "'entity' недостаје својство",
		sv = "'entity'-parameter saknas",
		th = "ค่าของพารามิเตอร์ 'entity' หายไป",
		uk = "без параметра 'entity'",
		['zh-hans'] = "属性（'entity'）参数丢失",
	},
	["entity-not-found"] = {
		ar = "الكيان غير موجود",
		bn = "সত্তা পাওয়া যায়নি",
		ca = "entitat no trobada",
		cs = "entita nenalezena",
		de = "Einheit nicht gefunden",
		en = "entity not found",
		es = "entidad no encontrada",
		fr = "entité non trouvée",
		ja = "エンティティが見つかりません",
		mk = "единицата не е пронајдена",
		nb = "entitet ikke funnet",
		nl = "entiteit niet gevonden",
		nn = "entitet ikkje funnen",
		pl = "nie znaleziono elementu",
		pt = "entidade não encontrada",
		['pt-br'] = "entidade não encontrada",
		ru = "элемент не обнаружен",
		sl = "manjka objekt",
		sr = "недостаје ентитет",
		sv = "entitet hittades ej",
		th = "ไม่พบเอนทิตี้นี้",
		uk = "не знайдено елемента",
		['zh-hans'] = "找不到实体",
	},
	["unknown-claim-type"] = {
		ar = "نوع الادعاء غير معروف",
		bn = "দাবির ধরন অজানা",
		ca = "tipus d'afirmació desconeguda",
		cs = "neznámý typ tvrzení",
		de = "unbekannt Beanspruchung",
		en = "unknown claim type",
		es = "tipo de afirmación desconocida",
		fr = "type d'affirmation inconnu",
		mk = "непознат тип на тврдење",
		nb = "ukjent påstandstype",
		nl = "onbekend type claim",
		nn = "ukjend påstandstype",
		pl = "nieznany typ 'claim'",
		pt = "tipo de afirmação desconhecida",
		['pt-br'] = "tipo de afirmação desconhecida",
		ru = "неизвестный тип утверждения",
		sl = "neznan tip izraza",
		sr = "непозната врста тврдње",
		sv = "okänd påståendetyp",
		th = "ชนิดเคลมที่ไม่รู้จัก",
		uk = "невідомий тип твердження",
		['zh-hans'] = "未知的声称类型",
	},
	["unknown-snak-typeg"] = {
		ar = "نوع الكلام غير معروف",
		bn = "snak-এর ধরন অজানা",
		ca = "tipus de snak desconegut",
		cs = "neznámý typ snaku",
		en = "unknown snak type",
		es = "tipo de snak desconocido",
		fr = "type de snak inconnu",
		mk = "непознат тип на спојница",
		nb = "ukjent snak-type",
		nl = "onbekend snaktype",
		nn = "ukjend snak-type",
		pl = "nieznany typ 'snak'",
		pt = "tipo de conector (''snak'') desconhecido",
		['pt-br'] = "tipo de conector (''snak'') desconhecido",
		ru = "неизвестный тип снэка",
		sl = "neznan tip 'snak'-a",
		sr = "непозната врста спојнице",
		sv = "okänd snak-typ",
		th = "ชนิดของสเนคที่ไม่รู้จัก",
		uk = "невідомий тип снека",
		['zh-hans'] = "未知的snak类型",
	},
	["unknown-datavalue-type"] = {
		ar = "نوع قيم البيانات غير معروف.",
		bn = "উপাত্তমানের ধরন অজানা।",
		ca = "tipus de valor de dades desconegut.",
		cs = "neznámý typ datové hodnoty",
		de = "unbekannter Datenwert.",
		en = "unknown datavalue type.",
		es = "tipo de valor de datos desconocido.",
		fr = "type de donnée inconnu.",
		mk = "непознат тип на податочна вредност.",
		nb = "ukjent «datavalue»-type",
		nl = "onbekend type gegevenswaarde.",
		nn = "ukjend «datavalue»-type.",
		pl = "nieznany typ 'datavalue'.",
		pt = "tipo de dado desconhecido.",
		['pt-br'] = "tipo de dado desconhecido.",
		ru = "неизвестный тип значения («datavalue»)",
		sl = "neznan tip vrednostni podatka",
		sr = "непозната врста податка",
		sv = "okänd värdetyp",
		th = "ชนิดของค่าข้อมูลที่ไม่รู้จัก",
		uk = "невідомий тип значення ('datavalue').",
		['zh-hans'] = "未知的数据值类型。",
	},
	["unknown-entity-type"] = {
		ar = "نوع الإدخال غير معروف",
		bn = "সত্তার ধরন অজানা",
		ca = "tipus d'entitat desconegut",
		cs = "neznámý typ entity",
		de = "unbekannter Einheitentyp",
		en = "unknown entity type",
		es = "tipo de entidad desconocida",
		fr = "type d'entité inconnu",
		mk = "непознат тип на единица",
		nb = "ukjent entitetstype",
		nl = "onbekend type entiteit",
		nn = "ukjend entitetstype",
		pl = "nieznany typ elementu",
		pt = "tipo de entidade desconhecida",
		['pt-br'] = "tipo de entidade desconhecida",
		ru = "неизвестный тип элемента",
		sl = "neznan tip lastnosti",
		sr = "непозната врста ентитета",
		sv = "okänd entitetstyp",
		th = "ชนิดของเอนทิตี้ที่ไม่รู้จัก",
		uk = "невідомий тип елемента",
		['zh-hans'] = "未知的实体类型",
	},
	["invalid-id"] = {
		ar = "المعرف غير صحيح",
		bn = "অবৈধ আইডি",
		ca = "ID invàlida",
		cs = "neplatné ID",
		de = "ungültige ID",
		en = "invalid ID",
		es = "identificador inválido",
		fr = "identifiant inconnu",
		hu = "érvénytelen azonosító",
		ja = "無効なID",
		lt = "neteisingas identifikatorius",
		mk = "неважечка назнака",
		nb = "ukjent ID",
		nl = "onbekend identificatienummer",
		nn = "ukjend ID",
		pl = "nieprawidłowy identyfikator",
		pt = "identificador inválido",
		['pt-br'] = "identificador inválido",
		ru = "некорректный идентификатор",
		sr = "неисправни идентификатор",
		sl = "neveljaven ID",
		sv = "ogiltig identifierare",
		th = "รหัสระบุที่ไม่รู้จัก",
		uk = "неправильний ідентифікатор",
		['zh-hans'] = "无效ID",
	},
}</text>
      <sha1>97jhog3y0fxtnu2sr0sl68n9j8j7spr</sha1>
    </revision>
  </page>
  <page>
    <title>Module:I18n/date</title>
    <ns>828</ns>
    <id>19181078</id>
    <revision>
      <id>1026849685</id>
      <parentid>1010397040</parentid>
      <timestamp>2019-10-06T09:42:33Z</timestamp>
      <contributor>
        <username>Arnaugir</username>
        <id>17437</id>
      </contributor>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="12275" xml:space="preserve">--[[
  __  __           _       _        ___ _  ___           __  _       _       
 |  \/  | ___   __| |_   _| | ___ _|_ _/ |( _ ) _ __    / /_| | __ _| |_ ___ 
 | |\/| |/ _ \ / _` | | | | |/ _ (_)| || |/ _ \| '_ \  / / _` |/ _` | __/ _ \
 | |  | | (_) | (_| | |_| | |  __/_ | || | (_) | | | |/ / (_| | (_| | ||  __/
 |_|  |_|\___/ \__,_|\__,_|_|\___(_)___|_|\___/|_| |_/_/ \__,_|\__,_|\__\___|
                                                                             
This Module handles per language customization of dates

Authors and Maintainers:
* Jarekt 

]]


local p = {}

--[[ Different languages use different date formats, and many formats are shared among whole families of languages. 
"DateLang" picks a cluster of languages associated with a single date format, based on the language to be used. 
All unlisted languages default to English form. Languages like "de-formal" follows regular language fallback chain 
and would default to German, and only if that does not exist then to English.
]]

p.DateLang = {
	['be'] 		= 'ru-form', -- Belarusian
	['be-tarsk'] 	= 'ru-form', -- Belarusian (Tara۫ievica)
	['bn'] 		= 'en-form', -- Bengali
	['bpy'] 	= 'bpy-form', -- Bishnupuriya Manipuri
	['ca'] 		= 'ca-form', -- Catalan
	['ce'] 		= 'ce-form', -- Chechen
	['cs'] 		= 'cs-form', -- Czech
	['da'] 		= 'de-form', -- Danish
	['de'] 		= 'de-form', -- German
	['el'] 		= 'ru-form', -- Greek
	['en'] 		= 'en-form', -- English
	['eo'] 		= 'eo-form', -- Esperanto
	['es'] 		= 'es-form', -- Spanish
	['et'] 		= 'de-form', -- Estonian
	['eu'] 		= 'eu-form', -- Basque
	['fa'] 		= 'he-form', -- Persian
	['fi'] 		= 'fi-form', -- Finnish
	['fr'] 		= 'fr-form', -- French
	['ga'] 		= 'ga-form', -- Gallic
	['gl'] 		= 'es-form', -- Galician based on https://translatewiki.net/wiki/MediaWiki:Pagetriage-info-timestamp-date-format/gl
	['hi'] 		= 'en-form', -- Hindi
	['he'] 		= 'he-form', -- Hebrew 
	['hr'] 		= 'hr-form', -- Croatian 
	['hu'] 		= 'hu-form', -- Hungarian
	['hsb'] 	= 'cs-form', -- Upper Sorbian
	['ia'] 		= 'ia-form', -- Interlingua
	['is'] 		= 'de-form', -- Icelandic
	['ja'] 		= 'zh-form', -- Japanese
	['kn'] 		= 'kn-form', -- Kannada
	['ko'] 		= 'ko-form', -- Korean
	['lt'] 		= 'lt-form', -- Lithuanian
	['lv'] 		= 'lv-form', -- Latvian
	['mk'] 		= 'en-form', -- Macedonian
	['ml'] 		= 'ml-form', -- Malayalam
	['mr'] 		= 'mr-form', -- Marathi
	['new'] 	= 'new-form', -- Newari
	['nn'] 		= 'de-form', -- Norwegian Nynorsk
	['no'] 		= 'de-form', -- Norwegian (bokm欩
	['oc'] 		= 'oc-form', -- Occitan
	['pa'] 		= 'en-form', -- Punjabi
	['pl'] 		= 'ru-form', -- Polish
	['pt'] 		= 'es-form', -- Portuguese
	['qu'] 		= 'qu-form', -- Quechua based on https://translatewiki.net/wiki/MediaWiki:Pagetriage-info-timestamp-date-format/qu
	['qug'] 	= 'qug-form', -- Kichwa based on Template_talk:Date#Kichwa_.5Bqug.5D
	['ru'] 		= 'ru-form', -- Russian
	['sk'] 		= 'cs-form', -- Slovakian
	['sl'] 		= 'sl-form', -- Slovene
	['sr'] 		= 'hr-form', -- Serbian
	['th'] 		= 'th-form', -- Thai solar calendar
	['uk'] 		= 'ru-form', -- Ukrainian
	['vi'] 		= 'vi-form', -- Vietnamese
	['zh-hans'] 	= 'zh-form', -- Simplified Chinese
	['zh-hant'] 	= 'zh-form', -- Traditional Chinese
}

--[[ Date format parameter which will be passed to {{#time:}} parser function. 
  It depends on the language and which parts of the date need to be displayed. 
  Different forms are:
  * YMDHMS = stands for YYYY:MM:DD, HH:MM:SS format or equivalent
  * YMDHM  = stands for YYYY:MM:DD, HH:MM format or equivalent
  * YMD    = stands for YYYY:MM:DD format or equivalent
  * YM     = stands for YYYY:MM (year-month) format or equivalent
  * MD     = stands for MM:DD (month-day) format or equivalent
  * Y      = stands for YYYY (year only) format or equivalent
  * M      = stands for month name only
  
  The left hand side follows encoding used by {{#time}} parser function , 
  see https://www.mediawiki.org/wiki/Help:Extension:ParserFunctions#.23time for documentation.
	To summerize:
	 * Y - 4-digit year, like "2017"
	 * y - 2-digit year, like "17"
	 * M - An abbreviation of the month name, in the site language, like "Mar"
	 * F - The full month name in the site language, like "March"
	 * xg - Output the full month name in the genitive form for site languages that distinguish 
	        between genitive and nominative forms. This option is useful for many Slavic languages 
					like Polish, Russian, Belarusian, Czech, Slovak, Slovene, Ukrainian, etc.
	 * j - Day of the month, not zero-padded, like "1"
	 * d - Day of the month, zero-padded, like "01"
	 * a - "am" during the morning (00:00:00 → 11:59:59), "pm" otherwise (12:00:00 → 23:59:59).
	 * A - Uppercase version of a above.
	 * g - Hour in 12-hour format, not zero-padded. 
	 * h - Hour in 12-hour format, zero-padded.
	 * G - Hour in 24-hour format, not zero-padded. 
	 * H - Hour in 24-hour format, zero-padded. 
	 * i - Minutes past the hour, zero-padded.
	 * s - Seconds past the minute, zero-padded.
	 
  Original set was developed to match the output of the pre-Lua {{date}} template, preserved as {{date/old}}
]]
p.DateFormat = {
	-- day/month/year languages
	['en-form'] = {
		YMDHMS='j F Y, H:i:s',		
		YMDHM ='j F Y, H:i',		
		YMD   ='j F Y',		
		YM    ='F Y',		
		MD    ='j F',		
		Y     ='Y',
		M     ='F'		
	},
	['de-form'] = {
		YMDHMS='j. F Y, H:i:s',		
		YMDHM ='j. F Y, H:i',		
		YMD   ='j. F Y',		
		YM    ='F Y',		
		MD    ='j. F',		
		Y     ='Y',
		M     ='F'
	},
	['hr-form'] = {
		YMDHMS='j. F Y., H:i:s',		
		YMDHM ='j. F Y., H:i',		
		YMD   ='j. F Y.',		
		YM    ='F Y.',		
		MD    ='j. F',		
		Y     ='Y.',
		M     ='F'
	},
	['ml-form'] = {
		YMDHMS='j F Y, H:i:s',		
		YMDHM ='j F Y, H:i',		
		YMD   ='j F Y',		
		YM    ='F Y',		
		MD    ='F j',		
		Y     ='Y',
		M     ='F'
	},
	['th-form'] = {
		YMDHMS='j F "พ.ศ." xkY, H:i:s',	
		YMDHM ='j F "พ.ศ." xkY, H:i',	
		YMD   ='j F "พ.ศ." xkY',	
		YM    ='F "พ.ศ." xkY',
		MD    ='j F',		
		Y     ='"พ.ศ." xkY',
		M     ='F'
	},
	['fi-form'] = {
		YMDHMS='j. F"ta" Y, H:i:s',	
		YMDHM ='j. F"ta" Y, H:i',	
		YMD   ='j. F"ta" Y',	
		YM    ='F Y',		
		MD    ='j. F"ta"',		
		Y     ='Y',
		M     ='F'
	},
	['es-form'] = {
		YMDHMS='j "de" F "de" Y, H:i:s',	
		YMDHM ='j "de" F "de" Y, H:i',	
		YMD   ='j "de" F "de" Y',	
		YM    ='F "de" Y',		
		MD    ='j "de" F',		
		Y     ='Y',
		M     ='F'
	},
	['ca-form'] = {
		YMDHMS='j F "de" Y, H:i:s',	
		YMDHM ='j F "de" Y, H:i',	
		YMD   ='j F "de" Y',	
		YM    ='F "de" Y',		
		MD    ='j F',			
		Y     ='Y',
		M     ='F'
	},
	['oc-form'] = {
		YMDHMS='j F "de" Y, H:i:s',	
		YMDHM ='j F "de" Y, H:i',	
		YMD   ='j F "de" Y',	
		YM    ='F "de" Y',		
		MD    ='j F',			
		Y     ='Y',
		M     ='F'
	},
	['ia-form'] = {
		YMDHMS='j "de" F Y, H:i:s',	
		YMDHM ='j "de" F Y, H:i',	
		YMD   ='j "de" F Y',	
		YM    ='F Y',		
		MD    ='j "de" F',		
		Y     ='Y',
		M     ='F'
	},
	['eo-form'] = {
		YMDHMS='"la" j"-a de" F Y, H:i:s',
		YMDHM ='"la" j"-a de" F Y, H:i',
		YMD   ='"la" j"-a de" F Y',
		YM    ='F Y',		
		MD    ='"la" j"-a de" F',	
		Y     ='Y',
		M     ='F'
	},
	['vi-form'] = {
		YMDHMS='j F "năm" Y "lúc" H:i:s',	
		YMDHM ='j F "năm" Y "lúc" H:i',	
		YMD   ='j F "năm" Y',	
		YM    ='F "năm" Y',		
		MD    ='j F',		
		Y     ='Y',
		M     ='F'
	},
	['qu-form'] = {
		YMDHMS='j "ñiqin" F"pi" Y "watapi", H:i:s',	
		YMDHM ='j "ñiqin" F"pi" Y "watapi", H:i',	
		YMD   ='j "ñiqin" F"pi" Y "watapi"',	
		YM    ='F"pi" Y "watapi"',		
		MD    ='j "ñiqin" F"pi"',		
		Y     ='Y',
		M     ='F'
	},
	['qug-form'] = {
		YMDHMS='j "niki" F"pi" Y "watapi", H:i:s',	
		YMDHM ='j "niki" F"pi" Y "watapi", H:i',	
		YMD   ='j "niki" F"pi" Y "watapi"',	
		YM    ='F"pi" Y "watapi"',		
		MD    ='j "niki" F"pi"',		
		Y     ='Y',
		M     ='F'
	},
	['he-form'] = {
		YMDHMS='"&lt;span dir=rtl&gt;"j xg Y"&lt;/span&gt;", H:i:s',		
		YMDHM ='"&lt;span dir=rtl&gt;"j xg Y"&lt;/span&gt;", H:i',		
		YMD   ='"&lt;span dir=rtl&gt;"j xg Y"&lt;/span&gt;"',		
		YM    ='"&lt;span dir=rtl&gt;"F Y"&lt;/span&gt;"',		
		MD    ='"&lt;span dir=rtl&gt;"j xg"&lt;/span&gt;"',		
		Y     ='Y',
		M     ='"&lt;span dir=rtl&gt;"F"&lt;/span&gt;"'
	},
	
	-- French and Gallic languages require different form for first day of the month and 
	-- different for the other days
	['fr-form'] = {
		YMDHMS='j F Y, H:i:s',		
		YMDHM ='j F Y, H:i',		
		YMD   ='j F Y',		
		YM    ='F Y',		
		MD    ='j F',		
		Y     ='Y',
		M     ='F'
	},
	['ga-form'] = {
		YMDHMS='j F Y, H:i:s',		
		YMDHM ='j F Y, H:i',		
		YMD   ='j F Y',		
		YM    ='F Y',		
		MD    ='j F',		
		Y     ='Y',
		M     ='F'
	},
	['fr-form1'] = { -- 1st of the month form
		YMDHMS='j"&lt;sup&gt;er&lt;/sup&gt;" F Y, H:i:s', 
		YMDHM ='j"&lt;sup&gt;er&lt;/sup&gt;" F Y, H:i', 
		YMD   ='j"&lt;sup&gt;er&lt;/sup&gt;" F Y', 
		YM    ='F Y', 	
		MD    ='j"&lt;sup&gt;er&lt;/sup&gt;" F', 
		Y     ='Y',
		M     ='F'
	},
	['ga-form1'] = { -- 1st of the month form
		YMDHMS='j"&lt;sup&gt;ú&lt;/sup&gt;" F Y, H:i:s',  
		YMDHM ='j"&lt;sup&gt;ú&lt;/sup&gt;" F Y, H:i',  
		YMD   ='j"&lt;sup&gt;ú&lt;/sup&gt;" F Y',  
		YM    ='F Y', 	
		MD    ='j"&lt;sup&gt;ú&lt;/sup&gt;" F',  
		Y     ='Y',
		M     ='F'
	},
		
	-- day/month/year Slavic languages
	['ru-form'] = {
		YMDHMS='j xg Y, H:i:s',		
		YMDHM ='j xg Y, H:i',		
		YMD   ='j xg Y',		
		YM    ='F Y',		
		MD    ='j xg',		
		Y     ='Y',
		M     ='F'
	},
	['cs-form'] = {
		YMDHMS='j. xg Y, H:i:s',		
		YMDHM ='j. xg Y, H:i',		
		YMD   ='j. xg Y',		
		YM    ='F Y',		
		MD    ='j. xg',		
		Y     ='Y',
		M     ='F'
	},
	['sl-form'] = {
		YMDHMS='j. xg Y "ob" H:i:s',	
		YMDHM ='j. xg Y "ob" H:i',	
		YMD   ='j. xg Y',		
		YM    ='F Y',		
		MD    ='j. xg',		
		Y     ='Y',
		M     ='F'
	},
		
	-- year/month/day languages
	['zh-form'] = {
		YMDHMS='Y年Fj日, H:i:s',		
		YMDHM ='Y年Fj日, H:i',		
		YMD   ='Y年Fj日',		
		YM    ='Y年F',		
		MD    ='Fj日',		
		Y     ='Y年',
		M     ='F'
	},
	['ko-form'] = {
		YMDHMS='Y년 F j일, H:i:s',	
		YMDHM ='Y년 F j일, H:i',		
		YMD   ='Y년 F j일',		
		YM    ='Y년 F',		
		MD    ='F j일',		
		Y     ='Y년',
		M     ='F'
	},
	['hu-form'] = {
		YMDHMS='Y. F j., H:i:s',		
		YMDHM ='Y. F j., H:i',		
		YMD   ='Y. F j.',		
		YM    ='Y. F',		
		MD    ='F j.',		
		Y     ='Y',
		M     ='F'
	},
	['lt-form'] = {
		YMDHMS='Y "m". F j "d"., H:i:s',	
		YMDHM ='Y "m". F j "d"., H:i',	
		YMD   ='Y "m". F j "d".',	
		YM    ='Y "m". F',		
		MD    ='F j "d".',		
		Y     ='Y "m".',
		M     ='F'
	},
	['eu-form'] = {
		YMDHMS='Y"ko" F"ren" j"a", H:i:s',		
		YMDHM ='Y"ko" F"ren" j"a", H:i',		
		YMD   ='Y"ko" F"ren" j"a"',		
		YM    ='Y"ko" F',		
		MD    ='F"ren" j"a"',		
		Y     ='Y',
		M     ='F'
	},
	['eu-form01'] = { -- 1st and 21st of the month  uses different form
                YMDHMS='Y"ko" F"ren" j"ea", H:i:s',		
		YMDHM ='Y"ko" F"ren" j"ea", H:i',		
		YMD   ='Y"ko" F"ren" j"ea"',		
		YM    ='Y"ko" F',		
		MD    ='F"ren" j"ea"',		
		Y     ='Y',
		M     ='F'
	},
	['eu-form11'] = { -- 11th and 31st of the month  uses different form
                YMDHMS='Y"ko" F"ren" j, H:i:s',		
		YMDHM ='Y"ko" F"ren" j, H:i',		
		YMD   ='Y"ko" F"ren" j',		
		YM    ='Y"ko" F',		
		MD    ='F"ren" j',		
		Y     ='Y',
		M     ='F'
	},
	['ce-form'] = {
		YMDHMS='Y "шаран" j F, H:i:s',	
		YMDHM ='Y "шаран" j F, H:i',	
		YMD   ='Y "шаран" j F',	
		YM    ='Y "шаран" F',	
		MD    ='j F',		
		Y     ='Y "шо"',
		M     ='F'
	},
			
	-- year/day/month languages
	['lv-form'] = {
		YMDHMS='Y". gada" j. F, H:i:s',	
		YMDHM ='Y". gada" j. F, H:i',	
		YMD   ='Y". gada" j. F',	
		YM    ='Y". gada" F',	
		MD    ='j. F',		
		Y     ='Y". gada"',
		M     ='F'
	},

	-- month/day/year languages
	['kn-form'] = {
		YMDHMS='F j, Y, H:i:s',		
		YMDHM ='F j, Y, H:i',		
		YMD   ='F j, Y',		
		YM    ='F, Y',		
		MD    ='F j',		
		Y     ='Y',
		M     ='F'
	}, 
	['bpy-form']= {
		YMDHMS='F j, মারি Y, H:i:s',	
		YMDHM ='F j, মারি Y, H:i',		
		YMD   ='F j, মারি Y',	
		YM    ='F, মারি Y',		
		MD    ='F j',		
		Y     ='মারি Y',
		M     ='F'
	},
	['mr-form'] = {
		YMDHMS='F j, इ.स. Y, H:i:s',	
		YMDHM ='F j, इ.स. Y, H:i',	
		YMD   ='F j, इ.स. Y',	
		YM    ='F, इ.स. Y',		
		MD    ='F j',		
		Y     ='इ.स. Y',
		M     ='F'
	},
	['new-form']= {
		YMDHMS='F j, ई सं  Y, H:i:s',	
		YMDHM ='F j, ई सं  Y, H:i',	
		YMD   ='F j, ई सं  Y',	
		YM    ='F, ई सं  Y',		
		MD    ='F j',		
		Y     ='ई सं Y',
		M     ='F'
	},
}
 
return p</text>
      <sha1>a975ko0ys30hbmup638lzbrxm0dv6z3</sha1>
    </revision>
  </page>
  <page>
    <title>Module:I18n/complex date</title>
    <ns>828</ns>
    <id>20467457</id>
    <revision>
      <id>1324889850</id>
      <parentid>1301510871</parentid>
      <timestamp>2020-12-18T19:15:11Z</timestamp>
      <contributor>
        <username>Sabelöga</username>
        <id>2599541</id>
      </contributor>
      <comment>sv</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="80803" xml:space="preserve">--[[
  __  __           _       _        ___ _  ___           __                        _                 _       _       
 |  \/  | ___   __| |_   _| | ___ _|_ _/ |( _ ) _ __    / /__ ___  _ __ ___  _ __ | | _____  __   __| | __ _| |_ ___ 
 | |\/| |/ _ \ / _` | | | | |/ _ (_)| || |/ _ \| '_ \  / / __/ _ \| '_ ` _ \| '_ \| |/ _ \ \/ /  / _` |/ _` | __/ _ \
 | |  | | (_) | (_| | |_| | |  __/_ | || | (_) | | | |/ / (_| (_) | | | | | | |_) | |  __/&gt;  &lt;  | (_| | (_| | ||  __/
 |_|  |_|\___/ \__,_|\__,_|_|\___(_)___|_|\___/|_| |_/_/ \___\___/|_| |_| |_| .__/|_|\___/_/\_\  \__,_|\__,_|\__\___|
                                                                            |_|    
This code was copied from Commons please request changes there. 
																																						
Maintainers:
*Jarekt																																						
]]

local function Ordinal(...)
	return require('Module:Ordinal')._Ordinal(...)
end
local function Roman(...)
	return require('Module:Roman')._Numeral(...)
end

-- ==========================================================================
-- ===  Local Helper functions ==============================================
-- ==========================================================================
-- form of French "of" based on "precision", which is wikibase compatible date precision format: 
-- 6=millennium, 7=century, 8=decade, 9=year, 10=month, 11=day
--             1    2    3    4    5    mill  cent  deca  year  month  day
local frOf = {'du','du','du','du','du', 'du', 'du', 'de', 'de', 'de', 'du'}

local function decYear(state,lang,case)
--Declension of word "year" in several languages
if state.precision == 9 then
	yearCase = {
		fi={xxx='vuosien', gen='vuoden', ill='vuoteen', ptv='vuotta', ela='vuodesta', ine='vuonna'},
		sl={insP='letoma', ins='letom', gen='leta', loc='letu'},
		hsb={insP='lětami', ins='lětom', gen='lěta', loc='lěće'}
	}
	return yearCase[lang][case] .. ' '
else
	return ''
end
end

local function decCentury(lang,case)
--Declension of word "century" in several languages
	centuryCase = {
		pl={nom='wiek', gen='wieku', ins='wiekiem', loc='wieku', default = 'wiek'},
		hsb={nom='lětstotk', gen='lětstotka', ins='lětstotkom', loc='lětstotku', default = 'lětstotk'}
	}
	return centuryCase[lang][case] or centuryCase[lang]['default']
end

local function decMillennium(lang,case)
--Declension of word "century" in several languages
	millenniumCase = {
		pl={nom='tysiąclecie', gen='tysiąclecia', ins='tysiącleciem', loc='tysiącleciu', default = 'tysiąclecie'},
		hsb={nom='lěttysac', gen='lěttysaca', ins='lěttysacom', loc='lěttysacu', default = 'lěttysac'}
	}
	return millenniumCase[lang][case] or millenniumCase[lang]['default']
end

-- ==========================================================================
-- ===  Output data structure ===============================================
-- ==========================================================================
local p = {} 

--[[
 Multiple formats are possible:
  1) string with key words "$date1" and "$date2" which will be replaced later by the date strings
  2) function which can be used to create output string
    * Function INPUTS: 
	  - date1 and date2 string with date strings. "$date1" and "$date2" can also be used which will be replaced latter
	  - state is a table with full description of the phrase we are trying to construct. It includes state.precision1 (and 2) 
		which is wikibase compatible date precision format: 6=millennium, 7=century, 8=decade, 9=year, 10=month, 11=day
  3) table with following fields:
    * table[1] is either string or a function
    * table.case is a 2 element table with Grammatical cases used by given language to alter 
	    month name or other adjective related to date # 1 and 2
]]
p.Translations = {

	-- ==========================================
	-- === Two date phrases =====================
	-- ==========================================
	['from-until'] = {
		nDates = 2, 
		ar='من $date1 إلى $date2',
		['be-tarask']={'з $date1 да $date2', case={'gen','gen'}},
		bn='$date1 থেকে $date2 পর্যন্ত',
		ca='$date1 fins a $date2',
		ckb='لە $date1 تاوەکوو $date2',
		cs='$date1 až $date2',
		da='fra $date1 til $date2',
		de='$date1 bis $date2',
		el='από $date1 έως $date2',
		en='from $date1 until $date2',
		['en-gb']='from $date1 until $date2',
		['en-ca']='from $date1 until $date2',
		eo='de $date1 al $date2',
		es='de $date1 a $date2',
		et='$date1 kuni $date2',
		fa='از $date1 تا $date2',
		fi='$date1–$date2', -- välisenä aikana
		fr=function(date1, date2, state) -- could actually be better should be "d'octobre à mars 2013' not "de octore 2013 à mars 2013" 
			if state.precision &gt; 10 then -- precision &gt; month
				return 'du $date1 au $date2'
			else				-- "DE septebmbre" / "D'octobre"
				return require("Module:Linguistic").of(date1, 'fr') .. " à $date2"
			end
		end,
		gl='de $date1 a $date2', --Template:From until used 'desde $date1 ata $date2'
		he='מ- $date1 עד $date2',
		hr='od $date1 do $date2',
		hsb={'wot $date1 do $date2', case={'gen','gen'}},
		hu='$date1 – $date2',
		it='dal $date1 al $date2',
		ja='$date1から$date2まで',
		mk='од $date1 до $date2',
		ml='$date1 മുതൽ $date2 വരെ',
		nb='fra $date1 til $date2',
		nds='$date1 bet $date2',
		nn='fra $date1 til $date2',
		nl='$date1 tot $date2',
		no='fra $date1 til $date2',
		pl={'od $date1 do $date2', case={'gen','gen'}},
		ro='din $date1 până în $date2',
		pt='de $date1 a $date2',
		qu="$date1 p'unchawmanta $date2 p\'unchawkama",
		ru={'с $date1 по $date2', case={'gen','gen'}},
		sk={'od $date1 do $date2', case={'gen','gen'}},
		sl={'od $date1 do $date2', case={'gen','gen'}},
		sv='från $date1 till $date2',
		uk={'з $date1 до $date2', case={'gen','gen'}},
		ur='از $date1 تا $date2',
		vi='từ $date1 đến $date2',
		['zh-hans']='从$date1到$date2',
		['zh-hant']='從$date1到$date2',
		default='&lt;span style="color:red"&gt;$date1 - $date2&lt;/span&gt;',
	},

	['between']={
		nDates = 2,
		ar='بين $date1 و $date2',
		['be-tarask']={'між $date1 і $date2', case={'ins','ins'}},
		bn='$date1 এবং $date2-এর মাঝামাঝি',
		ca='entre $date1 i $date2',
		ckb='لەنێوان $date1 و $date2',
		cs={'mezi $date1 a $date2', case={'ins','ins'}},
		da='mellem $date1 og $date2',
		de='zwischen $date1 und $date2',
		el='μεταξύ $date1 και $date2',
		en='between $date1 and $date2',
		['en-gb']='between $date1 and $date2',
		['en-ca']='between $date1 and $date2',
		eo='inter $date1 kaj $date2',
		es='entre $date1 y $date2',
		et='$date1 ja $date2 vahel',
		fa='بین $date1 و $date2',
		fi={function(date1, date2, state) return decYear(state,'fi','xxx') .. '$date1 ja $date2 välisenä aikana'	end, case={'gen','gen'}},
		fr='entre $date1 et $date2',
		gl='entre $date1 e $date2',
		he='בין $date1 ו- $date2',
		hr='između $date1 i $date2',
		hsb={'mjez $date1 a $date2', case={'ins','ins'}},
		hu='$date1 és $date2 között',
		hi='$date1 और $date2 के बीच',
		it='tra il $date1 e il $date2',
		ja='$date1と$date2の間',
		mk='помеѓу $date1 и $date2',
		ml='$date1, $date2 എന്നിവയ്ക്കിടയ്ക്ക്',
		nb='mellom $date1 og $date2',
		nds='twischen $date1 un $date2',
		nn='mellom $date1 og $date2',
		nl='tussen $date1 en $date2',
		no='mellom $date1 og $date2',
		pl={'między $date1 a $date2', case={'ins','ins'}},
		ro='între $date1 și $date2',
		pt='entre $date1 e $date2',
		qu="$date1 p'unchawpa $date2 p'unchawpapas chawpin",
		ru={'между $date1 и $date2', case={'ins','ins'}},
		sk={'medzi $date1 a $date2', case={'ins','ins'}},
		sl={function(date1, date2, state) return 'med ' .. decYear(state,'sl','insP') .. '$date1 in $date2'	end, case={'ins','ins'}},
		sv='mellan $date1 och $date2',
		uk={'між $date1 та $date2', case={'ins','ins'}},
		ur='بین $date1 و $date2',
		vec='tra el $date1 e el $date2',
		vi='giữa $date1 và $date2',
		['zh-hans']='在$date1到$date2之间',
		['zh-hant']='在$date1到$date2之間',
		default='&lt;span style="color:red"&gt;$date1 - $date2&lt;/span&gt;',
	},

	['or'] = {
		nDates = 2,
		ar='$date1 أو $date2',
		['be-tarask']='$date1 ці $date2',
		bn='$date1 অথবা $date2',
		ca='$date1 o $date2',
		ckb='$date1 یان $date2',
		cs='$date1 nebo $date2',
		da='$date1 eller $date2',
		de='$date1 oder $date2',
		el='$date1 ή $date2',
		en='$date1 or $date2',
		['en-gb']='$date1 or $date2',
		['en-ca']='$date1 or $date2',
		eo='$date1 aŭ $date2',
		es='$date1 o $date2',
		et='$date1 või $date2',
		fa='$date1 یا $date2',
		fi='$date1 tai $date2',
		fr='$date1 ou $date2',
		gl='$date1 ou $date2',
		he='$date1 או $date2',
		hr='$date1 ili $date2',
		hsb='$date1 abo $date2',
		hu='$date1 vagy $date2',
		it='$date1 o $date2',
		ja='$date1または$date2',
		mk='$date1 или $date2',
		ml='$date1 അഥവാ $date2',
		nb='$date1 eller $date2',
		nn='$date1 eller $date2',
		nds='$date1 oder $date2',
		nl='$date1 of $date2',
		no='$date1 eller $date2',
		pl='$date1 lub $date2',
		pt='$date1 ou $date2',
		qu='$date1 icha $date2',
		ro='$date1 sau $date2',
		ru='$date1 или $date2',
		sk='$date1 alebo $date2',
		sl='$date1 ali $date2',
		sv='$date1 eller $date2',
		uk='$date1 або $date2',
		ur='$date1 یا $date2',
		th='$date1 หรือ $date2',
		vi='$date1 hoặc $date2',
		['zh-hans']='$date1或$date2',
		['zh-hant']='$date1或$date2',
		default=function(date1, date2, state) return require("Module:linguistic").conj({date1, date2}, state.lang, 'or') end,
	}, 

	['and'] = {
		nDates = 2,
		ar='$date1 و $date2',
		['be-tarask']='$date1 і $date2',
		bn='$date1 এবং $date2',
		ca='$date1 i $date2',
		ckb='$date1 و $date2',
		cs='$date1 a $date2',
		da='$date1 og $date2',
		de='$date1 und $date2',
		el='$date1 και $date2',
		en='$date1 and $date2',
		['en-gb']='$date1 and $date2',
		['en-ca']='$date1 and $date2',
		eo='$date1 kaj $date2',
		es='$date1 y $date2',
		et='$date1 ja $date2',
		fa='$date1 و $date2',
		fi='$date1 ja $date2',
		fr='$date1 et $date2',
		gl='$date1 e $date2',
		he='$date1 ו- $date2',
		hu='$date1 és $date2',
		hsb='$date1 a $date2',
		it='$date1 e $date2',
		ja='$date1および$date2',
		mk='$date1 и $date2',
		ml='$date1 ഒപ്പം $date2',
		nb='$date1 og $date2',
		nn='$date1 og $date2',
		nds='$date1 un $date2',
		nl='$date1 en $date2',
		no='$date1 og $date2',
		pl='$date1 i $date2',
		pt='$date1 e $date2',
		qu='$date1wan $date2pas',
		ro='$date1 și $date2',
		ru='$date1 и $date2',
		sk='$date1 a $date2',
		sl='$date1 in $date2',
		sv='$date1 och $date2',
		uk='$date1 та $date2',
		ur='$date1 و $date2',
		vi='$date1 và $date2',
		['zh-hans']='$date1和$date2',
		['zh-hant']='$date1和$date2',
		default=function(date1, date2, state) return require("Module:linguistic").conj({date1, date2}, state.lang, 'and') end,
	},

	-- ==========================================
	-- === Prepositions =========================
	-- ==========================================
	['by'] = {
		nDates = 1,
		ar='حوالي $date1',
		['be-tarask']={'да $date1', case={'gen',''}},
		bn='$date1 কর্তৃক',
		ca='vers $date1',
		ckb='نزیکی $date1',
		cs={'kolem $date1', case={'gen',''}},
		da='mod $date1',
		de='spätestens $date1',
		el='έως $date1',
		en='by $date1',
		['en-gb']='by $date1',
		['en-ca']='by $date1',
		eo='ne post $date1',
		es='para $date1',
		et='hiljemalt $date1',
		fa='توسط $date1',
		fi={function(date1, state) return decYear(state,'fi','ill') .. '$date1 mennessä' end, case={'ill',''}},
		fr='$date1 (au plus tard)',
		gl='cara a $date1',
		he='עד $date1',
		hr='do $date1',
		hsb={'do $date1', case={'gen',''}},
		it='entro il $date1',
		ja='$date1まで',
		mk='кон $date1',
		ml='$date1-ൽ',
		nb='innen $date1',
		nn='innan $date1',
		nds='$date1 oder vördem al',
		nl='tegen $date1',
		no='innen $date1',
		pl={'przed $date1', case={'ins',''}},
		pt='por $date1',
		qu="$date1 p'unchawkama",
		ro='de $date1',
		ru={'к $date1', case={'dat',''}},
		sk={'okolo $date1', case={'gen',''}},
		sl={function(date1, state) return 'najpozneje ' .. decYear(state,'sl','gen') .. ' $date1' end, case={'gen',''}},
		sv='senast $date1',
		uk={'до $date1', case={'dat',''}},
		ur='توسط $date1',
		vi='vào $date1', -- need to insert "đã" somewhere later in the sentence --&gt;
		['zh-hans']='$date1前后',
		['zh-hant']='$date1前后',
		default='&lt;span style="color:red"&gt;by $date1&lt;/span&gt;',
	},

	['before'] = {
		nDates = 1,
		ar='قبل $date1',
		['be-tarask']={'перад $date1', case={'ins',''}},
		bn='$date1-এর আগে',
		bg='Преди $date1',
		ca='abans de $date1',
		ckb='پێش $date1',
		cs={'před $date1', case={'ins',''}},
		da='før $date1',
		de='vor $date1',
		el='πριν από $date1',
		en='before $date1',
		['en-gb']='before $date1',
		['en-ca']='before $date1',
		eo='antaŭ $date1',
		es='antes de $date1',
		et='enne $date1',
		fa='پیش از $date1',
		fi={function(date1, state) return 'ennen ' .. decYear(state,'fi','ptv') .. '$date1' end, case={'ptv',''}},
		fr='avant $date1',
		gl='antes do $date1',
		he='לפני $date1',
		hr='prije $date1',
		hsb={'do $date1', case={'gen',''}},
		hu='$date1 előtt',
		it='prima del $date1',
		ja='$date1より前',
		mk='пред $date1',
		ml='$date1-നു മുമ്പ്',
		nb='før $date1',
		nn='før $date1',
		nds='vör $date1',
		nl='voor $date1',
		no='før $date1',
		pl={'przed $date1', case={'ins',''}},
		pt='antes de $date1',
		qu="$date1 p'unchaw ñawpan",
		ro='înainte de $date1',
		ru={'ранее $date1', case={'gen',''}},
		sk={'pred $date1', case={'ins',''}},
		sl={function(date1, state) return 'pred ' .. decYear(state,'sl','ins') .. ' $date1' end, case={'ins',''}},
		sv='före $date1',
		uk={'до $date1', case={'gen',''}},
		ur='قبل $date1',
		vi='trước $date1',
		['zh-hans']='在$date1之前',
		['zh-hant']='在$date1之前',
		default='&lt;span style="color:red"&gt;before $date1&lt;/span&gt;',
	},

	['from'] = {
		nDates = 1,
		ar='من $date1',
		['be-tarask']={'з $date1', case={'gen',''}},
		bn='$date1 থেকে',
		ckb='لە $date1',
		cs={'od $date1', case={'gen',''}},
		de='Seit $date1',
		el='από $date1',
		en='from $date1',
		['en-gb']='from $date1',
		['en-ca']='from $date1',
		eo='ekde $date1',
		es='desde $date1',
		et='alates $date1',
		fa='از $date1',
		fi={function(date1, state) return decYear(state,'fi','ela') .. '$date1 alkaen' end, case={'ela',''}},
		fr= function(date1, state) return 'à partir '.. frOf[state.precision] ..' $date1' end,
		gl='desde o $date1',
		he='מ- $date1',
		hr='od $date1',
		hsb={'wot $date1', case={'gen',''}},
		it='dal $date1',
		ja='$date1から',
		nds='vonaf $date1',
		mk='од $date1',
		nb='fra $date1',
		nn='frå $date1',
		ml='$date1 മുതൽ',
		nl='vanaf $date1',
		no='fra $date1',
		pl={'od $date1', case={'gen',''}},
		qu="$date1 p'unchawmanta",
		ro='din $date1',
		ru={'С $date1', case={'gen',''}},
		sk={'od $date1', case={'gen',''}},
		sl={function(date1, state) return 'od ' .. decYear(state,'sl','gen') .. ' $date1' end, case={'gen',''}},
		sv='från $date1',
		uk={'з $date1', case={'gen',''}},
		ur='از $date1',
		vi='từ $date1',
		['zh-hans']='自$date1',
		['zh-hant']='自$date1',
		default='&lt;span style="color:red"&gt;from $date1&lt;/span&gt;',
	},

	['until'] = {
		nDates = 1,
		['be-tarask']={'усутыч да $date1', case={'gen',''}},
		bn='$date1 পর্যন্ত',
		ckb='تاوەکوو $date1',
		cs={'do $date1', case={'gen', ''}},
		de='bis $date1',
		en='until $date1',
		['en-gb']='until $date1',
		['en-ca']='until $date1',
		eo='ĝis $date1',
		es='hasta $date1',
		fr=function(date1, state)
			if state.precision &gt; 10 then -- precision &gt; month
				return "jusqu'au $date1"
			else 
				return "jusqu'à $date1" 
			end
		end,
		hr='do $date1',
		hsb={'do $date1', case={'gen',''}},
		it='al $date1',
		ja='$date1まで',
		nb='til $date1',
		nl='tot $date1',
		nn='til $date1',
		ml='$date1 വരെ',
		pl={'do $date1', case={'gen',''}},
		ru={'вплоть до $date1', case={'gen',''}},
		sk={'do $date1', case={'gen', ''}},
		sv='till $date1',
		uk={'аж до $date1', case={'gen',''}},
		ur='تک $date1',
		['zh-hans']='直到$date1',
		['zh-hant']='直到$date1',
		default='&lt;span style="color:red"&gt;until $date1&lt;/span&gt;',
	},
	
	['after'] = {
		nDates = 1,
		ar='بعد $date1',
		['be-tarask']={'пасьля $date1', case={'gen',''}},
		bn='$date1-এর পরে',
		ca='després de $date1',
		ckb='دوای $date1',
		cs={'po $date1', case={'loc',''}},
		de='nach $date1',
		da='efter $date1',
		el='μετά από $date1',
		en='after $date1',
		['en-gb']='after $date1',
		['en-ca']='after $date1',
		eo='post $date1',
		es='después de $date1',
		et='pärast $date1',
		fa='پس از $date1',
		fi={function(date1, state) return decYear(state,'fi','gen') .. '$date1 jälkeen' end, case={'gen',''}},
		fr='après $date1',
		gl='despois do $date1',
		he='לאחר $date1',
		hr='nakon $date1',
		hu='$date1 után',
		hsb={'po $date1', case={'loc',''}},
		it='dopo il $date1',
		ja='$date1より後',
		mk='по $date1',
		ml='$date1-നു ശേഷം',
		nb='etter $date1',
		nn='etter $date1',
		nds='na $date1',
		nl='na $date1',
		no='etter $date1',
		pl={'po $date1', case={'loc',''}},
		pt='após $date1',
		qu="$date1 p'unchaw qhipan",
		ro='după $date1',
		ru={'после $date1', case={'gen',''}},
		sk={'po $date1', case={'loc',''}},
		sl={function(date1, state) return 'po ' .. decYear(state,'sl','loc') .. ' $date1' end, case={'loc',''}},
		sv='efter $date1',
		uk={'після $date1', case={'gen',''}},
		ur='بعد $date1',
		vi='sau $date1',
		['zh-hans']='在$date1之后',
		['zh-hant']='在$date1之後',
		default='&lt;span style="color:red"&gt;after $date1&lt;/span&gt;',
	},

	-- ==========================================
	-- === Adjectives ===========================
	-- ==========================================
	['early'] = {
		nDates = 1,
		ar='بداية $date1',
		['be-tarask']={'пачатак $date1', case={'gen',''}},
		bn='$date1-এর শুরুতে',
		ca='al principi de $date1',
		ckb='سەرەتای $date1',
		cs={'začátek $date1', case={'gen',''}},
		da='tidlig $date1',
		de='Anfang $date1',
		el='αρχές του $date1',
		en='early $date1',
		['en-gb']='early $date1',
		['en-ca']='early $date1',
		eo='komence de $date1',
		es='a principios de $date1',
		et='$date1 algus',
		fa='اوایل $date1',
		fi={function(date1, state) return decYear(state,'fi','gen') .. '$date1 alku' end, case={'gen',''}},
		fr='début $date1',
		gl='a principios de $date1',
		he='תחילת $date1',
		hr='početak $date1',
		hsb={'spočatk $date1', case={'gen',''}},
		hu='$date1 elején',
		it='inizio del $date1',
		ja='$date1初頭',
		mk='почеток на $date1',
		ml='$date1 ആദ്യപാദം',
		nb='tidlig $date1',
		nn='tidleg $date1',
		nds='Anfang $date1',
		nl='begin $date1',
		no='tidlig $date1',
		pl={'początek $date1', case={'gen',''}},
		pt='a princípios de $date1',
		qu="$date1 ñawpaq p'unchawkunapi",
		ro='începând cu $date1',
		ru={'начало $date1', case={'gen',''}},
		sk={'začiatok $date1', case={'gen',''}},
		sl=function(date1, state)-- could actually be better should be "d'octobre à mars 2013' not "de octore 2013 à mars 2013" 
			if state.precision == 9 then -- precision &gt; month
				return 'zgodnje leto $date1'
			else				-- "DE septebmbre" / "D'octobre"
				return 'zgodnji $date1'
			end
		end, 
		sv='början av $date1',
		uk={'початок $date1', case={'gen',''}},
		ur='ابتدا $date1',
		vi='đầu năm $date1',
		['zh-hans']='$date1早期',
		['zh-hant']='$date1早期',
		default='&lt;span style="color:red"&gt;early $date1&lt;/span&gt;',
	},

	['mid'] = {
		nDates = 1,
		ar='منتصف $date1',
		['be-tarask']={'сярэдзіна $date1', case={'gen',''}},
		bn='$date1-এর মাঝামাঝি',
		ca='a mitjan $date1',
		ckb='ناوەڕاستی $date1',
		cs={'polovina $date1', case={'gen',''}},
		da='midten af $date1',
		de='Mitte $date1',
		el='μέσα του $date1',
		en='mid $date1',
		['en-gb']='mid $date1',
		['en-ca']='mid $date1',
		eo='meze de $date1',
		es='a mediados de $date1',
		et='$date1 keskel',
		fa='اواسط $date1',
		fi={function(date1, state) return decYear(state,'fi','gen') .. '$date1 puoliväli' end, case={'gen',''}},
		fr='mi $date1',
		gl='a mediados de $date1',
		he='אמצע $date1',
		hr='sredina $date1',
		hsb={'srjedź $date1', case={'gen',''}},
		hu='$date1 közepén',
		it='metà del $date1',
		ja='$date1半ば',
		mk='средина на $date1',
		ml='$date1 മദ്ധ്യം',
		nb='midten av $date1',
		nn='midten av $date1',
		nds='Midd $date1',
		nl='midden $date1',
		no='midten av $date1',
		pl={'środek $date1', case={'gen',''}},
		pt='meados de $date1',
		qu="$date1 chawpin p'unchawkunapi",
		ro='mijlocul lui $date1',
		ru={'середина $date1', case={'gen',''}},
		sk={'polovica $date1', case={'gen',''}},
		sl={function(date1, state) return 'sredina ' .. decYear(state,'sl','gen') .. ' $date1' end, case={'gen',''}},
		sv='mitten av $date1',
		uk={'середина $date1', case={'gen',''}},
		ur='وسط $date1',
		vi='giữa năm $date1',
		['zh-hans']='$date1中期',
		['zh-hant']='$date1中期',
		default='&lt;span style="color:red"&gt;mid $date1&lt;/span&gt;',
	},

	['late'] = {
		nDates = 1,
		ar='نهاية $date1',
		bn='$date1-এর শেষে',
		['be-tarask']={'канец $date1', case={'gen',''}},
		ca='al final de $date1',
		ckb='کۆتاییی $date1',
		cs='konec $date1',
		da='sen $date1',
		de='Ende $date1',
		el='τέλη του $date1',
		en='late $date1',
		['en-gb']='late $date1',
		['en-ca']='late $date1',
		eo='fine de $date1',
		es='a fines de $date1',
		et='$date1 lõpp',
		fa='اواخر $date1',
		fi={function(date1, state) return decYear(state,'fi','gen') .. '$date1 loppu' end, case={'gen',''}},
		fr='fin $date1',
		gl='a finais de $date1',
		he='סוף $date1',
		hr='kraj $date1',
		hsb={'kónc $date1', case={'gen',''}},
		hu='$date1 végén',
		it='fine del $date1',
		ja='$date1末',
		mk='крајот на $date1',
		ml='$date1 അന്ത്യപാദം',
		nb='sent $date1',
		no='seint $date1',
		nds='Enn $date1',
		nl='eind $date1',
		no='sent $date1',
		pl={'koniec $date1', case={'gen',''}},
		pt='ao final de $date1',
		qu="$date1 qhipaq p'unchawkunapi",
		ro='sfârșitul lui $date1',
		ru={'конец $date1', case={'gen',''}},
		sk={'koniec $date1', case={'gen',''}},
		sl={function(date1, state) return 'pozno ' .. decYear(state,'sl','gen') .. ' $date1' end, case={'gen',''}},
		sv='slutet av $date1',
		uk={'кінець $date1', case={'gen',''}},
		ur='اخیر $date1',
		vi='cuối năm $date1',
		['zh-hans']='$date1晚期',
		['zh-hant']='$date1晚期',
		default='&lt;span style="color:red"&gt;late $date1&lt;/span&gt;',
	},
	
	['circa'] = {
		nDates = 1,
		ar='حوالي $date1',
		['be-tarask']={'каля $date1', case={'gen',''}},
		bn='প্রায় $date1',
		ckb='بەنزیکی $date1',
		ca='ca. $date1',
		cs='cca $date1',
		da='ca. $date1',
		de='etwa $date1',
		el='περ. $date1',
		en='circa $date1',
		['en-gb']='circa $date1',
		['en-ca']='circa $date1',
		eo='ĉirkaŭ $date1',
		es='hacia $date1', -- suggestion use "hacia"/"hacia el" or leave the latin circa or ca. 
		et='ca. $date1',
		fa='حوالی $date1', -- template:Circa used 'حدود $date1'
		fi={function(date1, state) return 'suunnilleen ' .. decYear(state,'fi','ine') .. '$date1' end, case={'ine',''}}, -- template:Circa used 'noin $date1'
		fr=function(date1, state) 			
			if state.precision &gt;= 11 then -- precision &gt;= day
				return 'vers le $date1'
			else
				return 'vers $date1'
			end
		end,
		gl='entre $date1', -- template:Circa used 'cara a $date1'
		he='בסביבות $date1',
		hr='oko $date1',
		hsb={'wokoło $date1', case={'gen',''}},
		hu='$date1 körül',
		it='$date1 circa',
		ja='$date1頃',
		ko='$date1경',
		mk='~ $date1', -- template:Circa used 'o. $date1'
		ml= 'ഉദ്ദേശം $date1',
		nb='ca. $date1',
		nn='ca. $date1',
		nds='üm un bi $date1',
		nl='ca. $date1',
		no='ca. $date1',
		pl={'około $date1', case={'gen',''}},
		pt='cerca de $date1',
		qu='$date1chá',
		ro='circa $date1',
		ru={'около $date1', case={'gen',''}},
		sk='cca $date1',
		sl={function(date1, state) return 'ok. ' .. decYear(state,'sl','gen') .. ' $date1' end, case={'gen',''}},
		sv='c:a $date1', -- template:Circa used 'ca $date1'
		uk={'близько $date1', case={'gen', ''}},
		ur='قریباً $date1',
		vi='vào khoảng $date1',
		['zh-hans']='约$date1',
		['zh-hant']='約$date1',
		default='&lt;span style="color:red"&gt;circa $date1&lt;/span&gt;',
	},
	
	['uncertain'] = {
		nDates = 1,
		['zh-hans']='$date1（？）',
		['zh-hant']='$date1（？）',
		default='$date1 (?)',
	},
	
	probably = { -- see Q56644435
		nDates = 1,
		ast = 'probablemente $date1',
		bn = 'সম্ভবত $date1',
		ca = 'probablement $date1',
		ckb = 'لەوانەیە $date1',
		cs = 'pravděpodobně $date1',
		de = 'wahrscheinlich $date1',
		el = 'πιθανόν $date1',
		en = 'probably $date1',
		['en-gb']='probably $date1',
		['en-ca']='probably $date1',
		eo = 'probable $date1',
		es = 'probable $date1',
		fa = 'احتمالاً $date1',
		fr = 'probablement $date1',
		he = 'כפי הנראה $date1',
		hu = 'feltehetőleg $date1',
		it = 'probabile $date1',
		ja = '恐らく$date1',
		mk = 'веројатно $date1',
		ml = 'ഒരുപക്ഷേ $date1',
		nl = 'waarschijnlijk $date1',
		pl = 'prawdopodobnie $date1',
		pt = 'provavelmente $date1',
		ru = 'вероятно $date1',
		sv = 'antagligen $date1',
		uk = 'ймовірно $date1',
		['zh-hans'] = '可能在$date1',
		['zh-hant'] = '可能於$date1',
		default='&lt;span style="color:red"&gt;probably $date1&lt;/span&gt;',
	},
	
	possibly = { -- see Q30230067
		nDates = 1,
		ast = 'posiblemente $date1',
		bn = 'যথাসম্ভব $date1',
		ckb = 'لەوانەیە $date1',
		cs = 'možná $date1',
		de = 'möglicherweise $date1',
		en = 'possibly $date1',
		['en-gb']='possibly $date1',
		['en-ca']='possibly $date1',
		eo = 'eble $date1',
		el = 'πιθανόν $date1',
		fa = 'احتمالاً $date1',
		fr = 'peut-être $date1',
		ja = 'もしかすると$date1',
		hu = 'talán $date1',
		mk = 'можеби $date1',
		ml = 'മിക്കവാറും $date1',
		nl = 'mogelijk $date1',
		pl = 'być może $date1',
		pt = 'possivelmente $date1',
		ro = 'poate $date1',
		ru = 'возможно $date1',
		sv = 'möjligen $date1',
		uk = 'можливо $date1',
		['zh-hans'] = '也许在$date1',
		['zh-hant'] = '或許於$date1',
		default='&lt;span style="color:red"&gt;possibly $date1&lt;/span&gt;',
	},
	
	presumably = { -- see Q18122778
		nDates = 1,
		ast = 'presumiblemente $date1',
		ckb = 'دەشێت $date1',
		de = 'vermutlich $date1',
		en = 'presumably $date1',
		['en-gb']='presumably $date1',
		['en-ca']='presumably $date1',
		fr = 'présumé $date1',
		it = 'presumibilmente $date1',
		ja = 'ほぼ確実に$date1',
		ml = 'ഊഹപ്രകാരം $date1',
		ru = 'предположительно $date1',
		sv = 'antagligen $date1',
		pl = 'przypuszczalnie $date1',
		uk = 'здогадно $date1',
		['zh-hans'] = '推测在$date1',
		['zh-hant'] = '推測於$date1',
		default='&lt;span style="color:red"&gt;presumably $date1&lt;/span&gt;',
	},

	['year unknown']= {
		nDates = 0,
		ca='Any desconegut',
		['be-tarask']='Год невядомы',
		bn='অজানা বছর',
		ckb='ساڵی نەزاندراو',
		cs='neznámý rok',
		de='Jahr unbekannt',
		el='άγνωστο έτος',
		en='year unknown',
		['en-gb']='year unknown',
		['en-ca']='year unknown',
		eo='jaro nesciata',
		es='Año desconocido',
		fa='سال نامعلوم',
		fi='tuntematon vuosi',
		fr='Année inconnue',
		he='שנה לא ידועה',
		hsb='lěto njeznate',
		hr='nepoznata godina',
		it='anno sconosciuto',
		ja='年代不明',
		la='Sine anno',
		ml='വർഷം ലഭ്യമല്ല',
		mk='непозната година',
		nb='ukjent år',
		nn='ukjent år',
		nl='zonder jaar',
		no='ukjent år',
		pl='rok nieznany',
		qu='Mana riqsisqa wata',
		ru='Год неизвестен',
		sk='neznámy rok',
		sl='neznano leto',
		sv='Okänt år',
		uk='рік невідомий',
		ur='سال نامعلوم',
		vi='không rõ năm',
		['zh-hans']='年份未知',
		['zh-hant']='年份未知',
		default='&lt;span style="color:red"&gt;year unknown&lt;/span&gt;',
	},

	-- ==========================================
	-- === Parts of a whole =====================
	-- ==========================================
	['firsthalf'] = {
		nDates = 1,
		ar='النصف الأول من $date1',
		['be-tarask']={'першая палова $date1', case={'gen',''}},
		bn='$date1-এর প্রথমার্ধ',
		ca='primera meitat de $date1',
		ckb='نیوەی یەکەمی $date1',
		cs={'1. polovina $date1', case={'gen',''}},
		da='1. halvdel af $date1',
		de='1. Hälfte $date1',
		el='πρώτο μισό του $date1',
		en='first half of $date1',
		['en-gb']='first half of $date1',
		['en-ca']='first half of $date1',
		eo='unua duono de $date1',
		es='primera mitad de $date1',
		et='$date1 esimene pool',
		fa='نیمهٔ نخست $date1',
		fi={function(date1, state) return decYear(state,'fi','gen') .. '$date1 alkupuolisko' end, case={'gen',''}},
		fr='1&lt;sup&gt;re&lt;/sup&gt; moitié de $date1',
		gl='primeira metade de $date1',
		he='במחצית הראשונה של $date1',
		hsb={'prěnja połojca $date1', case={'gen',''}},
		hu='$date1 első felében',
		hr='prva polovina $date1',
		it='prima metà del $date1',
		ja='$date1上半期',
		mk='прва половина на $date1',
		ml='$date1 ആദ്യപകുതി',
		nb='første halvdel av $date1',
		nn='fyrste halvdelen av $date1',
		nds='1. Helft $date1',
		nl='eerste helft $date1',
		no='første halvdel av $date1',
		pl={'pierwsza połowa $date1', case={'gen',''}},
		pt='primeira metade de $date1',
		qu='$date1 ñawpaq kuskanpi',
		ro='prima jumătate a lui $date1',
		ru={'первая половина $date1', case={'gen',''}},
		sk={'1. polovica $date1', case={'gen',''}},
		sl={function(date1, state) return 'prva polovica ' .. decYear(state,'sl','gen') .. ' $date1' end, case={'gen',''}},
		sv='första halvan av $date1',
		uk={'перша половина $date1', case={'gen',''}},
		ur='نصف اول $date1',
		vi='nửa đầu năm $date1',
		['zh-hans']='$date1上半期',
		['zh-hant']='$date1上半期',
		default='&lt;span style="color:red"&gt;first half of $date1&lt;/span&gt;',
	},

	['secondhalf'] = {
		nDates = 1,
		ar='النصف الثاني من $date1',
		['be-tarask']={'другая палова $date1', case={'gen',''}},
		bn='$date1-এর দ্বিতীয়ার্ধ',
		ca='segona meitat de $date1',
		ckb='نیوەی دووەمی $date1',
		cs={'2. polovina $date1', case={'gen',''}},
		da='2. halvdel af $date1',
		de='2. Hälfte $date1',
		el='δεύτερο μισό του $date1',
		en='second half of $date1',
		['en-gb']='second half of $date1',
		['en-ca']='second half of $date1',
		eo='dua duono de $date1',
		es='segunda mitad de $date1',
		et='$date1 teine pool',
		fa='نیمهٔ دوم $date1',
		fi={function(date1, state) return decYear(state,'fi','gen') .. '$date1 loppupuolisko' end, case={'gen',''}},
		fr='2&lt;sup&gt;e&lt;/sup&gt; moitié de $date1',
		gl='segunda metade de $date1',
		he='במחצית השנייה של $date1',
		hsb={'druha połojca $date1', case={'gen',''}},
		hr='druga polovina $date1',
		hu='$date1 második felében',
		it='seconda metà del $date1',
		ja='$date1下半期',
		mk='втора половина на $date1',
		ml='$date1 രണ്ടാം പകുതി',
		nb='andre halvdel av $date1',
		nn='andre halvdelen av $date1',
		nds='2. Helft vun $date1',
		nl='tweede helft $date1',
		no='andre halvdel av $date1',
		pl={'druga połowa $date1', case={'gen',''}},
		pt='segunda metade de $date1',
		qu='$date1 qhipaq kuskanpi',
		ro='a doua jumătate a lui $date1',
		ru={'вторая половина $date1', case={'gen',''}},
		sk={'2. polovica $date1', case={'gen',''}},
		sl={'druga polovica {{IfNum | $date0 | leta}} $date1', case={'gen',''}},
		sv='andra halvan av $date1',
		uk={'друга половина $date1', case={'gen',''}},
		ur='نصف آخر $date1',
		vi='nửa cuối năm $date1',
		['zh-hans']='$date1下半期',
		['zh-hant']='$date1下半期',
		default='&lt;span style="color:red"&gt;second half of $date1&lt;/span&gt;',
	},

	['1quarter']= {
		nDates = 1,
		bn='$date1-এর প্রথম ত্রৈমাসিক',
		['be-tarask']={'першая чвэрць $date1', case={'gen',''}},
		ckb='چارەکی یەکەمی $date1',
		cs={'1. čtvrtina $date1', case={'gen',''}},
		de='erstes Viertel $date1',
		en='first quarter of $date1',
		['en-gb']='first quarter of $date1',
		['en-ca']='first quarter of $date1',
		eo='unua kvarono de $date1',
		es='primer cuarto del $date1',
		fa='ربع نخست $date1',
		fi={function(date1, state) return decYear(state,'fi','gen') .. '$date1 ensimmäinen neljännes' end, case={'gen',''}},
		fr= function(date1, state) return 'premier quart '.. frOf[state.precision] ..' $date1' end, 
		he='רבעון ראשון של $date1',
		hsb={'prěnja štwórćina $date1', case={'gen',''}},
		hr='prva četvrtina $date1',
		it='primo quarto del $date1',
		ja='$date1第1四半期',
		ml='$date1 ഒന്നാം ത്രൈമാസം',
		nb='første kvartal av $date1',
		nl='eerste kwart $date1',
		nn='fyrste kvartalet av $date1',
		no='første kvartal av $date1',
		pl={'pierwsza ćwiartka $date1', case={'gen',''}},
		qu='$date1 ñawpaq ñiqin tawa phatmanpi',
		ru={'первая четверть $date1', case={'gen',''}},
		sk={'1. štvrtina $date1', case={'gen',''}},
		sl={'prva četrtina {{IfNum | $date0 | leta}} $date1', case={'gen',''}},
		sl={function(date1, state) return 'prva četrtina ' .. decYear(state,'sl','gen') .. ' $date1' end, case={'gen',''}},
		sv='första kvartalet av $date1',
		uk={'1-ша чверть $date1', case={'gen',''}},
		ur='پہلی سہ ماہی $date1',
		vi='quý 1 năm $date1',
		['zh-hans']='$date1第一季度',
		['zh-hant']='$date1第一季度',
		default='&lt;span style="color:red"&gt;first quarter of $date1&lt;/span&gt;',
	},

	['2quarter']= {
		nDates = 1,
		['be-tarask']={'другая чвэрць $date1', case={'gen',''}},
		bn='$date1-এর দ্বিতীয় ত্রৈমাসিক',
		ckb='چارەکی دووەمی $date1',
		cs={'2. čtvrtina $date1', case={'gen',''}},
		de='zweites Viertel $date1',
		en='second quarter of $date1',
		['en-gb']='second quarter of $date1',
		['en-ca']='second quarter of $date1',
		eo='dua kvarono de $date1',
		es='segundo cuarto del $date1',
		fa='ربع دوم $date1',
		fi={function(date1, state) return decYear(state,'fi','gen') .. '$date1 toinen neljännes' end, case={'gen',''}},
		fr= function(date1, state) return 'deuxième quart '.. frOf[state.precision] ..' $date1' end, 
		he='רבעון שני של $date1',
		hsb={'druha štwórćina $date1', case={'gen',''}},
		hr='druga četvrtina $date1',
		it='secondo quarto del $date1',
		ja='$date1第2四半期',
		ml='$date1 രണ്ടാം ത്രൈമാസം',
		nb='andre kvartal av $date1',
		nl='tweede kwart $date1',
		nn='andre kvartalet av $date1',
		no='andre kvartal av $date1',
		pl={'druga ćwiartka $date1', case={'gen',''}},
		qu='$date1 iskay ñiqin tawa phatmanpi',
		ru={'вторая четверть $date1', case={'gen',''}},
		sk={'2. štvrtina $date1', case={'gen',''}},
		sl={function(date1, state) return 'druga četrtina ' .. decYear(state,'sl','gen') .. ' $date1' end, case={'gen',''}},
		sv='andra kvartalet av $date1',
		uk={'2-га чверть $date1', case={'gen',''}},
		ur='دوسری سہ ماہی $date1',
		vi='quý 2 năm $date1',
		['zh-hans']='$date1第二季度',
		['zh-hant']='$date1第二季度',
		default='&lt;span style="color:red"&gt;second quarter of $date1&lt;/span&gt;',
	},

	['3quarter']= {
		nDates = 1,
		['be-tarask']={'трэцяя чвэрць $date1', case={'gen',''}},
		bn='$date1-এর তৃতীয় ত্রৈমাসিক',
		ckb='چارەکی سێیەمی $date1',
		cs={'3. čtvrtina $date1', case={'gen',''}},
		de='drittes Viertel $date1',
		en='third quarter of $date1',
		['en-gb']='third quarter of $date1',
		['en-ca']='third quarter of $date1',
		eo='tria kvarono de $date1',
		es='tercer cuarto del $date1',
		fa='ربع سوم $date1',
		fi={function(date1, state) return decYear(state,'fi','gen') .. '$date1 kolmas neljännes' end, case={'gen',''}},
		fr= function(date1, state) return 'troisième quart '.. frOf[state.precision] ..' $date1' end, 
		he='רבעון שלישי של $date1',
		hsb={'třeća štwórćina $date1', case={'gen',''}},
		hr='treća četvrtina $date1',
		it='terzo quarto del $date1',
		ja='$date1第3四半期',
		ml='$date1 മൂന്നാം ത്രൈമാസം',
		nb='tredje kvartal av $date1',
		nl='derde kwart $date1',
		nn='tredje kvartalet av $date1',
		no='tredje kvartal av $date1',
		pl={'trzecia ćwiartka $date1', case={'gen',''}},
		qu='$date1 kimsa ñiqin tawa phatmanpi',
		sk={'3. štvrtina $date1', case={'gen',''}},
		sl={function(date1, state) return 'tretja četrtina ' .. decYear(state,'sl','gen') .. ' $date1' end, case={'gen',''}},
		ru={'третья четверть $date1', case={'gen',''}},
		sv='tredje kvartalet av $date1',
		uk={'3-тя чверть $date1', case={'gen',''}},
		ur='تیسری سہ ماہی $date1',
		vi='quý 3 năm $date1',
		['zh-hans']='$date1第三季度',
		['zh-hant']='$date1第三季度',
		default='&lt;span style="color:red"&gt;third quarter of $date1&lt;/span&gt;',
	},

	['4quarter']= {
		nDates = 1,
		['be-tarask']={'чацьвёртая чвэрць $date1', case={'gen',''}},
		bn='$date1-এর চতুর্থ ত্রৈমাসিক',
		ckb='چارەکی چوارەمی $date1',
		cs={'4. čtvrtina $date1', case={'gen',''}},
		de='letztes Viertel $date1',
		en='fourth quarter of $date1',
		['en-gb']='fourth quarter of $date1',
		['en-ca']='fourth quarter of $date1',
		eo='kvara kvarono de $date1',
		es='último cuarto del $date1',
		fa='ربع چهارم $date1',
		fi={function(date1, state) return decYear(state,'fi','gen') .. '$date1 viimeinen neljännes' end, case={'gen',''}},
		fr= function(date1, state) return 'quatrième quart '.. frOf[state.precision] ..' $date1' end, 
		he='רבעון רביעי של $date1',
		hsb={'poslednja štwórćina $date1', case={'gen',''}},
		hr='četvrta četvrtina $date1',
		it='quarto quarto del $date1',
		ja='$date1第4四半期',
		ml='$date1 നാലാം ത്രൈമാസം',
		nb='fjerde kvartal av $date1',
		nl='vierde kwart $date1',
		nn='tredje kvartalet av $date1',
		no='fjerde kvartal av $date1',
		pl={'czwarta ćwiartka $date1', case={'gen',''}},
		qu='$date1 qhipaq ñiqin tawa phatmanpi',
		ru={'последняя четверть $date1', case={'gen',''}},
		sk={'4. štvrtina $date1', case={'gen',''}},
		sl={function(date1, state) return 'zadnja četrtina ' .. decYear(state,'sl','gen') .. ' $date1' end, case={'gen',''}},
		sv='fjärde kvartalet av $date1',
		uk={'4-та чверть $date1', case={'gen',''}},
		ur='چوتھی سہ ماہی $date1',
		vi='quý 4 năm $date1',
		['zh-hans']='$date1第四季度',
		['zh-hant']='$date1第四季度',
		default='&lt;span style="color:red"&gt;forth quarter of $date1&lt;/span&gt;',
	},

	-- ==========================================
	-- === Seasons ==============================
	-- ==========================================
 	['spring'] = {
		nDates = 1,
		ar='ربيع $date1',
		['be-tarask']='вясна $date1',
		bn='বসন্তকাল $date1',
		ca='primavera de $date1',
		ckb='بەھاری $date1',
		cs={'jaro $date1', case={'gen', ''}},
		da='Forår $date1',
		de='Frühling $date1',
		en='Spring $date1',
		['en-gb']='Spring $date1',
		['en-ca']='Spring $date1',
		eo='printempo $date1',
		es='primavera de $date1',
		et='$date1 kevad',
		fa='بهار $date1',
		fi='Kevät $date1',
		fr='printemps $date1',
		gl='primavera $date1',
		he='אביב $date1',
		hr='proljeće $date1',
		hsb='nalěćo $date1',
		hu='$date1 tavasza',
		it='primavera $date1',
		ja='{{#if:$date1|$date1年}}春',
		mk='пролет $date1',
		ml='$date1 വസന്തം',
		nb='våren $date1',
		nds='Vörjohr $date1',
		nn='våren $date1',
		nl='voorjaar $date1',
		no='våren $date1',
		pl='wiosna $date1',
		pt='primavera de $date1',
		ro='primăvara lui $date1',
		ru='весна $date1',
		sk={'jar $date1', case={'gen', ''}},
		sl='pomlad $date1',
		sv='våren $date1',
		uk='весна $date1',
		ur='بہار $date1',
		vi='mùa đông năm $date1',
		['zh-hans']='{{#if:$date1|$date1年}}春季',
		['zh-hant']='{{#if:$date1|$date1年}}春季',
		default='&lt;span style="color:red"&gt;Spring $date1&lt;/span&gt;',
	},

	['summer'] = {
		nDates = 1,
		ar='صيف $date1',
		['be-tarask']='лета $date1',
		bn='গ্রীষ্মকাল $date1',
		ca='estiu de $date1',
		ckb='ھاوینی $date1',
		cs={'léto $date1', case={'gen', ''}},
		da='Sommer $date1',
		de='Sommer $date1',
		en='Summer $date1',
		['en-gb']='Summer $date1',
		['en-ca']='Summer $date1',
		eo='somero $date1',
		es='verano de $date1',
		et='$date1 suvi',
		fa='تابستان $date1',
		fi='Kesä $date1',
		fr='été $date1',
		gl='verán $date1',
		he='קיץ $date1',
		hr='ljeto $date1',
		hsb='lěćo $date1',
		hu='$date1 nyara',
		it='estate $date1',
		ja='{{#if:$date1|$date1年}}夏',
		mk='лето $date1',
		ml='$date1 വേനൽ',
		nb='sommeren $date1',
		nds='Sommer $date1',
		nn='sumaren $date1',
		nl='zomer $date1',
		no='sommeren $date1',
		pl='lato $date1',
		pt='verão de $date1',
		ro='vara lui $date1',
		ru='лето $date1',
		sk={'leto $date1', case={'gen', ''}},
		sl='poletje $date1',
		sv='sommaren $date1',
		uk='літо $date1',
		ur='گرما $date1',
		vi='mùa hè năm $date1',
		['zh-hans']='{{#if:$date1|$date1年}}夏季',
		['zh-hant']='{{#if:$date1|$date1年}}夏季',
		default='&lt;span style="color:red"&gt;Summer $date1&lt;/span&gt;',
	},

	['autumn'] = {
		nDates = 1,
		ar='خريف $date1',
		['be-tarask']='восень $date1',
		bn='শরত্কাল $date1',
		ca='tardor de $date1',
		ckb='پاییزی $date1',
		cs={'podzim $date1', case={'gen', ''}},
		da='Efterår $date1',
		de='Herbst $date1',
		en='Autumn $date1',
		['en-gb']='Autumn $date1',
		['en-ca']='Autumn $date1',
		eo='aŭtuno $date1',
		es='otoño de $date1',
		et='$date1 sügis',
		fa='پاییز $date1',
		fi='Syksy $date1',
		fr='automne $date1',
		gl='outono $date1',
		he='סתיו $date1',
		hr='jesen $date1',
		hsb='nazyma $date1',
		hu='$date1 ősze',
		it='autunno $date1',
		ja='{{#if:$date1|$date1年}}秋',
		mk='есен $date1',
		ml='$date1 ശരത്കാലം',
		nb='høsten $date1',
		nds='Harvst $date1',
		nn='hausten $date1',
		nl='herfst $date1',
		no='høsten $date1',
		pl='jesień $date1',
		pt='outono de $date1',
		ro='toamna lui $date1',
		ru='осень $date1',
		sk={'jeseň $date1', case={'gen', ''}},
		sl='jesen $date1',
		sv='hösten $date1',
		uk='осінь $date1',
		ur='خزاں $date1',
		vi='mùa thu năm $date1',
		['zh-hans']='{{#if:$date1|$date1年}}秋季',
		['zh-hant']='{{#if:$date1|$date1年}}秋季',
		default='&lt;span style="color:red"&gt;Autumn $date1&lt;/span&gt;',
	},

	['winter'] = {
		nDates = 1,
		ar='شتاء $date1',
		['be-tarask']='зіма $date1',
		bn='শীতকাল $date1',
		ca='hivern de $date1',
		ckb='زستانی $date1',
		cs={'zima $date1', case={'gen', ''}},
		da='Vinter $date1',
		de='Winter $date1',
		en='Winter $date1',
		['en-gb']='Winter $date1',
		['en-ca']='Winter $date1',
		eo='vintro $date1',
		es='invierno de $date1',
		et='$date1 talv',
		fa='زمستان $date1',
		fi='Talvi $date1',
		fr='hiver $date1',
		gl='inverno $date1',
		he='חורף $date1',
		hr='zima $date1',
		hsb='zyma $date1',
		hu='$date1 tele',
		it='inverno $date1',
		ja='{{#if:$date1|$date1年}}冬',
		mk='зима $date1',
		ml='$date1 ശൈത്യകാലം',
		nds='Winter $date1',
		nl='winter $date1',
		nb='vinteren $date1',
		nn='vinteren $date1',
		no='vinteren $date1',
		pl='zima $date1',
		pt='inverno de $date1',
		ro='iarna lui $date1',
		ru='зима $date1',
		sk={'zima $date1', case={'gen', ''}},
		sl='zima $date1',
		sv='vintern $date1',
		uk='зима $date1',
		ur='سرما $date1',
		vi='mùa đông năm $date1',
		['zh-hans']='{{#if:$date1|$date1年}}冬季',
		['zh-hant']='{{#if:$date1|$date1年}}冬季',
		default='&lt;span style="color:red"&gt;Winter $date1&lt;/span&gt;',
	},

	-- ==========================================
	-- === Decade/Century/Millennium ============
	-- ==========================================
	['decade'] = {
		nDates = 1,
		ar='أعوام $date1',
		['be-tarask']='$date1-я гады',
		bn='$date1-এর দশক',
		ca='dècada del $date1',
		ckb='دەیەی $date1',
		cs=function(date1, state) return ((date1 % 100 == 0) and 'první dekáda' or ((date1 % 100) .. '. léta')) .. ' ' .. (math.floor(date1 / 100) + 1) .. '. století' end,
		da="$date1'erne",
		de='$date1er-Jahre',
		el='δεκαετία του $date1',
		en='$date1s',
		['en-gb']='$date1s',
		['en-ca']='$date1s',
		eo='$date1-aj jaroj',
		es='años $date1',
		et='$date1ndad',
		fa='دههٔ $date1',
		fi='$date1-luvulla',
		fr='années $date1',
		gl='anos $date1',
		he='שנות ה-$date1',
		hr='$date1-ih',
		hsb='$date1te lěta',
		hu='$date1-s évek',
		it="{{#ifexpr: $date1 mod 100 = 0 | primo decennio del {{Roman|{{#expr: ($date1 / 100) + 1}}}} sec. | anni '{{#expr: $date1 mod 100 }} del {{Roman|{{#expr: floor($date1 / 100) + 1}}}} sec.}}",
		ja='$date1年代',
		mk='$date1-ти',
		ml='ദശകം $date1-ൽ',
		nb='$date1-årene',
		nn='$date1-åra',
		nds='Johren $date1',
		nl='jaren $date1',
		no='$date1-årene',
		pl=function(date1, state) 
			local str = 'lata '..(date1 % 100)..'. '
			if (date1 % 100 == 0) then
				str = 'pierwsza dekada '
			elseif (date1 % 100 == 10) then
				str = 'druga dekada '
			end
			return str .. Roman(math.floor(date1 / 100) + 1) .. ' wieku' 
		end,
		pt='década de $date1',
		qu='$date1 watakuna',
		ro='anii $date1',
		ru='$date1-е годы',
		sk=function(date1, state) return ((date1 % 100 == 0) and 'prvé desaťročie' or ((date1 % 100) .. '. roky')) .. ' ' .. (math.floor(date1 / 100) + 1) .. '. storočia' end,
		sl='$date1-ta leta',
		sv='$date1-talet',
		uk='$date1-ті роки',
		ur='دہائی $date1',
		vi='thập niên $date1',
		['zh-hans']='$date1年代',
		['zh-hant']='$date1年代',
		default='&lt;span style="color:red"&gt;$date1s&lt;/span&gt;',
	},

	['century'] = {
		nDates = 1,
		ar='القرن $date1',
		['be-tarask']=function(date1, state) return Ordinal(date1, 'be-tarask') .. ' стагодзьдзе' end,
		bn=function(date1, state) return Ordinal(date1, 'bn') .. ' শতাব্দী' end,
		ca='segle {{small-caps|{{lc:{{Roman year|$date1}}}}}}',
		ckb='سەدەی $date1',
		cs='$date1. století',
		da='$date1. århundrede',
		de='$date1. Jahrhundert',
		el='$date1ος αιώνας',
		en=function(date1, state) return Ordinal(date1, 'en') .. ' century' end,
		['en-gb']=function(date1, state) return Ordinal(date1, 'en-gb') .. ' century' end,
		['en-ca']=function(date1, state) return Ordinal(date1, 'en-ca') .. ' century' end,
		eo='$date1-a jarcento',
		es=function(date1, state) return 'siglo ' .. Roman(date1) end,
		et='$date1. sajand',
		fa='سدهٔ $date1',
		fi='{{#expr: ($date1 - 1) * 100}}-luvulla',
		fr=function(date1, state) return Ordinal(date1, 'fr', 'roman', 'm') .. ' siècle' end,
		gl=function(date1, state) return 'século ' .. Roman(date1) end,
		he='המאה ה-$date1',
		hr='$date1. stoljeće',
		hsb='$date1. lětstotk',
		hu='$date1. évszázad',
		it=function(date1, state) return Roman(date1) .. ' sec.' end,
		ja='$date1世紀',
		la='saeculum $date1',
		mk=function(date1, state) return Roman(date1) .. ' век' end,
		ml='$date1-ആം നൂറ്റാണ്ട്',
		nb=function(date1, state) return Ordinal(date1, 'nb') .. ' århundre' end,
		nn=function(date1, state) return 'det ' .. Ordinal(date1, 'no') .. ' århundre' end,
		nds='$date1. Johrhunnert',
		nl='$date1e eeuw',
		no=function(date1, state) return Ordinal(date1, 'no') .. ' århundre' end,
		pl=function(date1, state) return Roman(date1) .. ' ' .. decCentury('pl',state.case) end,
		pt=function(date1, state) return 'século ' .. Roman(date1) end,
		qu='$date1 ñiqin pachakwata',
		ro='secolul al $date1-lea',
		ru=function(date1, state) return Roman(date1) .. ' век' end,
		sk='$date1. storočie',
		sl=function(date1, state) return Ordinal(date1, 'sl') .. '. stoletje' end,
		sv='{{#expr:$date1 - 1}}00-talet',
		tt=function(date1, state) return Roman(date1) .. ' гасыр' end,
		uk=function(date1, state) return Roman(date1) .. ' ст.' end,
		ur='$ویں صدیdate1',
		vi='thế kỷ $date1',
		['zh-hans']='$date1世纪',
		['zh-hant']='$date1世紀',
		default='&lt;span style="color:red"&gt;$date1 century&lt;/span&gt;',
	},

	['millennium'] = {
		nDates = 1,
		['be-tarask']=function(date1, state) return Ordinal(date1, 'be-tarask') .. ' тысячагодзьдзе' end,
		bn=function(date1, state) return Ordinal(date1, 'bn') .. ' সহস্রাব্দ' end,
		ckb=function(date1, state) return 'ھەزارەی ' .. Ordinal(date1, 'ckb') end,
		cs='$date1. tisíciletí',
		de='$date1. Jahrtausend',
		en=function(date1, state) return Ordinal(date1, 'en') .. ' millennium' end,
		['en-gb']=function(date1, state) return Ordinal(date1, 'en-gb') .. ' millennium' end,
		['en-ca']=function(date1, state) return Ordinal(date1, 'en-ca') .. ' millennium' end,
		eo='$date1-a jarmilo',
		es=function(date1, state) return Roman(date1) .. ' milenio' end,
		fa=function(date1, state) return 'هزارهٔ ' .. Ordinal(date1, 'fa') end,
		fr=function(date1, state) return Ordinal(date1, 'fr', 'roman', 'm') .. ' millénaire' end,
		hr='$date1. tisućljeće',
		hsb='$date1. lěttysac',
		it=function(date1, state) return Roman(date1) .. ' millennio' end,
		ja='$date1千年紀',
		la='millennium $date1',
		ml='$date1-മത്തെ സഹസ്രാബ്ദം',
		nb=function(date1, state) return Ordinal(date1, 'nb') .. ' årtusen' end,
		nn=function(date1, state) return Ordinal(date1, 'no') .. ' tusenår' end,
		nl='$date1e millennium',
		no=function(date1, state) return Ordinal(date1, 'no') .. ' årtusen' end,
		pl=function(date1, state) return Roman(date1) .. ' ' .. decMillennium('pl',state.case) end,
		pt=function(date1, state) return Roman(date1) .. ' milénio' end,
		qu='$date1 ñiqin waranqawata',
		ru=function(date1, state) return Roman(date1) .. ' тысячелетие' end,
		sk='$date1. tisícročie',
		sl=function(date1, state) return Ordinal(date1, 'sl') .. '. tisočletje' end,
		sv=function(date1, state) return Ordinal(date1, 'sv') .. ' årtusendet' end,
		uk=function(date1, state) return Roman(date1) .. ' тис.' end,
		ur=function(date1, state) return 'ہزارہ ' .. Ordinal(date1, 'ur') end,
		vi='thiên niên kỷ $date1',
		['zh-hans']=function(date1, state) return Ordinal(date1, 'zh-hans') .. '千年' end,
		['zh-hant']=function(date1, state) return Ordinal(date1, 'zh-hant') .. '千年' end,
		--default='{{Please translate|$date1 millennium|Module:I18n/complex date}}',
		default='&lt;span style="color:red"&gt;$date1 millennium&lt;/span&gt;',
	},

	['million'] = {
		ckb = '$date1 میلیۆن ساڵ',
		de = '$date1 Millionen Jahre',
		en = '$date1 million years',
		['en-gb'] = '$date1 million years',
		['en-ca'] = '$date1 million years',
		eo = '$date1 milionoj da jaroj',
		es = '$date1 millones de años',
		nl = '$date1e miljoen jaar',
		fr = '$date1 millions d’années',
		it = '$date1 milioni di anni',
		ja = function(date1, state)
		--[[
		  ja scale | en (short) scale
		  ---------+-----------------
		  1千      | 1 thousand
		  1万      | 10 thousand
		  100万    | 1 million
		  1000万   | 10 million
		  1億      | 100 million
		  10億     | 1 billion
		  1000億   | 100 billion
		  1兆      | 1 trillion
		]]
			if date1 &gt;= 10 then
				return (date1 / 10) .. '億年'
			else
				return (date1 * 10) .. '万年'
			end
		end,
		ml = function(date1, state)
			if date1 &gt;= 10 then 
				return (date1 / 10) .. '  കോടി വർഷങ്ങൾ'  -- 100 lakh = 1 crore
			else 
				 return (date1 * 10) .. ' ലക്ഷം വർഷങ്ങൾ'
			end
		end,
		nb = '$date1 millioner år',
		nl = '$date1 miljoen jaar',
		nn = '$date1 millionar år',
		pl = '$date1 milionów lat',
		pt = '$date1 milhões de anos',
		ru = '$date1 миллиона лет',
		sv = '$date1 miljoner år',
		uk = '$date1 мільйони років',
		ur = '$date1 ملین سال',
		['zh-hans'] = '$date1百万年',
		['zh-hant'] = '$date1百万年',
		default='&lt;span style="color:red"&gt;$date1 million years&lt;/span&gt;',
		nDates = 1,
	},
	
	['billion'] = {
		ckb = '$date1 بیلیۆن ساڵ',
		de = '$date1 Milliarden Jahre',
		en = '$date1 billion years',
		['en-gb'] = '$date1 billion years',
		['en-ca'] = '$date1 billion years',
		es = '$date1 mil millones de años',
		nl = '$date1e miljard jaar',
		fr = '$date1 milliard d’années',
		it = '$date1 miliardi di anni',
		ja = function(date1, state) return (date1 * 10) .. '億年' end,
		ml = function(date1, state) return (date1 * 10) .. ' കോടി വർഷങ്ങൾ' end,
		nb = '$date1 milliarder år',
		nl = '$date1 miljard jaar',
		nn = '$date1 milliardar år',
		pl = '$date1 miliardów lat',
		pt = '$date1 mil milhões de anos',
		sv = '$date1 miljarder år',
		ru = '$date1 миллиардов лет',
		uk = '$date1 мільярдів років',
		ur = '$date1 بلین سال',
		['zh-hans'] = '$date1十亿年',
		['zh-hant'] = '$date1十億年',
		default='&lt;span style="color:red$date1 billion years&lt;/span&gt;',
		nDates = 1,
	},

	-- ==========================================
	-- === Complex phrases ======================
	-- ==========================================
	-- Phrases which for some languages can be build out of simpler phrases
	-- Their "default" state, used when no translation in the requested language was found, returns a "state" like 
	-- table which is used to call the function again and built the phrase out of simple phrases
	-- $date1 - original date - 1
	-- $date2 - original date 
	-- if era is BC than $date1 and $date2 are swapped
	['turn of the century'] = { 
		nDates = 2,
		['be-tarask']=function(date1, date2, state) return 'канец ' .. Roman(date1) ..' — пачатак ' .. Roman(date2) ..' стагодзьдзя' end,
		bn=function(date1, date2, state) return '$date1/' .. Ordinal(date2, 'bn') .. ' শতাব্দীর পালাবদলে' end,
		ckb=function(date1, date2, state) return 'سەردەمی $date1/' .. Ordinal(date2, 'ckb') .. ' سەدە' end,
		cs='přelom $date1. a $date2. století',
		de=function(date1, date2, state) return 'Jahrhundertwende $date1/' .. Ordinal(date2, 'de') end,
		en=function(date1, date2, state) return 'turn of the $date1/' .. Ordinal(date2, 'en') .. ' century' end,
		['en-gb']=function(date1, date2, state) return 'turn of the $date1/' .. Ordinal(date2, 'en-gb') .. ' century' end,
		['en-ca']=function(date1, date2, state) return 'turn of the $date1/' .. Ordinal(date2, 'en-ca') .. ' century' end,
		eo='ŝanĝo de la $date1-a al la $date2-a jarcentoj',
		es=function(date1, date2, state) return 'hacia finales del siglo ' .. Roman(date1) .. ' y principios del siglo ' .. Roman(date2) .. '' end,
		fi='{{#expr: $date1 * 100-100}}-luvun loppu ja {{#expr: $date2 * 100-100}}-luvun alku',
		fr=function(date1, date2, state) return 'fin du ' .. Ordinal(date1, 'fr', 'roman', 'm') .. ' siècle / début du ' .. Ordinal(date2, 'fr', 'roman', 'm') end,
		hr='kraj $date1. i početak $date2. stoljeća',
		hsb=function(date1, date2, state) return 'přechod ' .. Roman(date1) ..' do ' .. Roman(date2) ..' lětstotka' end,
		it=function(date1, date2, state) return 'fine del ' .. Roman(date1) .. ' sec. e inizio del ' .. Roman(date2) .. ' sec.' end,
		ja='$date1世紀から$date2世紀への変わり目',
		ml='$date1 നൂറ്റാണ്ട് അവസാനവും $date2 നൂറ്റാണ്ട് ആദ്യവും',
		nb=function(date1, date2, state) return 'slutten av det ' .. Ordinal(date1, 'nb') .. ' århundre/begynnelsen av det ' .. Ordinal(date2, 'nb') .. ' århundre' end,
		nl=function(date1, date2, state) return 'eind $date1e/begin $date2e eeuw' end,
		nn=function(date1, date2, state) return 'slutten av det ' .. Ordinal(date1, 'nn') .. ' hundreåret/byrjinga av det ' .. Ordinal(date2, 'nn') .. ' hundreåret' end,
		pl=function(date1, date2, state) return 'przełom ' .. Roman(date1) ..' i ' .. Roman(date2) ..' wieku' end,
		qu="$date1 ñiqin waranqawatamanta $date2 ñiqin waranqawataman t'ikrasqanpi",
		ru=function(date1, date2, state) return 'конец ' .. Roman(date1) ..' — начало ' .. Roman(date2) ..' века' end,
		sk='prelom $date1. a $date2. storočia',
		sl=function(date1, date2, state) return 'pozno ' .. Ordinal(date1, 'sl') .. '. in zgodnje ' .. Ordinal(date2, 'sl') .. '. stoletje' end,
		sv=function(date1, date2, state) return '$date1/' .. Ordinal(date2, 'sv') .. ' årtusendets sekelskifte' end,
		uk=function(date1, date2, state) return 'кін. ' .. Roman(date1) ..' ст. — поч. ' .. Roman(date2) ..' ст.' end,
		vi='bước sang thế kỷ $date2',
		['zh-hans']=function(date1, date2, state) return '$date1世纪末' .. Ordinal(date2, 'zh-hans') .. '世纪初' end,
		['zh-hant']=function(date1, date2, state) return '$date1世紀末' .. Ordinal(date2, 'zh-hant') .. '世紀初' end,
		default=function(date1, date2, state) return {conj='and', adj1 = 'late', unit1='century', era1=state.era1, adj2 = 'early',  unit2='century', era2=state.era2} end,
	},

	-- $date1 - original date - 10
	-- $date2 - original date 
	-- if era is BC than $date1 and $date2 are swapped
	['turn of the decade']={
		nDates = 2,
		['be-tarask']='канец $date1-х — пачатак $date2-х гг.',
		bn='$date1-এর দশকের শেষে এবং $date2-এর দশকের শুরুতে',
		cs=function(date1, date2, state)
			local decade1  = math.floor((date1 % 100) / 10)
			local decade2  = math.floor((date2 % 100) / 10)
			local century1 = math.floor( date1 / 100) + 1
			local century2 = math.floor( date2 / 100) + 1
			if decade1 == 0 and date1 &lt; date2 then
				return "přelom 1. a 2. dekády " .. century1 .. ". století"
			elseif decade2 == 0 and date2 &lt; date1 then
				return "přelom 9. a 10. dekády " .. century1 .. ". století"
			elseif (decade1 == 9 and date1 &lt; date2) or (decade2 == 9 and date2 &lt; date1) then
				return "přelom " .. century1 .. ". a " .. century2 .. ". století"
			else
				return "přelom " .. decade1 .. "0. a " .. decade2 .. "0. let " .. century1 .. ". století"
			end
		end,
		de='späte $date1er und frühe $date2er',
		ckb='کۆتایییەکانی $date1 و سەرەتاکانی $date2',
		en='late $date1s and early $date2s',
		['en-gb']='late $date1s and early $date2s',
		['en-ca']='late $date1s and early $date2s',
		eo='ŝanĝo de la $date1-a al la $date2-a jardekoj',
		es='finales de los años $date1 y principios de los años $date2',
		fa='اواخر دههٔ $date1 و اوایل دههٔ $date2',
		fi='$date1-luvun loppu ja $date2-luvun alku',
		fr='fin des années $date1 / début des années $date2',
		hr='kraj $date1-ih i početak $date2-ih',
		hsb='pózdnje $date1te a zažne $date2te lěta',
		it='fine degli anni $date1 / inizio degli anni $date2',
		ja='$date1年代末から$date2年代初頭',
		ml='$date1കൾ അവസാനവും $date2കൾ ആദ്യവും',
		nb = 'sent på $date1-tallet og tidlig på $date2-tallet',
		nl = 'eind $date1e/begin $date2e decennium',
		nn = 'seint på $date1-talet og tidleg på $date2-talet',
		pl=function(date1, date2, state)
			local decade1  = math.floor(date1 % 100)
			local decade2  = math.floor(date2 % 100)
			local century1 = Roman(math.floor( date1 / 100) + 1)
			local century2 = Roman(math.floor( date2 / 100) + 1)
			if decade1 == 0 and date1 &lt; date2  then
				return "przełom pierwszej i drugiej dekady " .. century1 .. " wieku"
			elseif decade1 == 10 and date1 &lt; date2  then
				return "przełom drugiej dekady i lat 20. " .. century1 .. " wieku"
			elseif decade1 == 90 and decade2 == 0 then
				return "przełom ostatniej dekady " .. century1 .. " i pierwszej dekady " .. century2 .. " wieku"
			else
				return "przełom lat " .. decade1 .. ". i " .. decade2 .. ". " .. century1 .. " wieku"
			end
		end,
		qu='qhipaq $date1 watakuna ñawpaq $date2 watakunapas',
		ru='конец $date1-х — начало $date2-х гг.',
		sv='sena $date1-talet och tidiga $date2-talet',
		sk=function(date1, date2, state)
			local decade1  = math.floor((date1 % 100) / 10)
			local decade2  = math.floor((date2 % 100) / 10)
			local century1 = math.floor( date1 / 100) + 1
			local century2 = math.floor( date2 / 100) + 1
			if decade1 == 0 and date1 &lt; date2 then
				return "prelom 1. a 2. desaťročia " .. century1 .. ". storočia"
			elseif decade2 == 0 and date2 &lt; date1 then
				return "prelom 9. a 10. desaťročia " .. century1 .. ". storočia"
			elseif (decade1 == 9 and date1 &lt; date2) or (decade2 == 9 and date2 &lt; date1) then
				return "prelom " .. century1 .. ". a " .. century2 .. ". storočia"
			else
				return "prelom " .. decade1 .. "0. a " .. decade2 .. "0. rokov " .. century1 .. ". storočia"
			end
		end,
		sl='pozna $date1-ta in zgodnja $date2-ta leta',
		uk='кінець $date1-х — початок $date2-х рр.',
		ur='اخیر دہائی $date1 و ابتدا دہائی $date2',
		vi='bước sang thập niên $date2',
		['zh-hans']='$date1年代末$date2年代初',
		['zh-hant']='$date1年代末$date2年代初',
		default=function(date1, date2, state) return {conj='and', adj1 = 'late', unit1='decade', era1=state.era1, adj2 = 'early',  unit2='decade', era2=state.era2} end,
	},

	-- $date1 - original date - 1
	-- $date2 - original date
	-- if era is BC than $date1 and $date2 are swapped
	['turn of the year']={
		nDates = 2,
		['be-tarask']='канец $date1 — пачатак $date2 г.',
		bn='$date1-এর শেষে এবং $date2-এর শুরুতে',
		ckb='کۆتاییی $date1 و سەرەتای $date2',
		cs='přelom roku $date1/$date2',
		de='Jahreswechsel $date1/$date2',
		en='late $date1 and early $date2',
		['en-gb']='late $date1 and early $date2',
		['en-ca']='late $date1 and early $date2',
		eo='jarŝanĝo $date1 / $date2',
		es='finales de $date1 y principios de $date2',
		fa='اواخر $date1 و اوایل $date2',
		fi='vuoden $date1 loppu ja vuoden $date2 alku',
		fr='fin $date1 / début $date2',
		hsb='kónc $date1/spočatk $date2',
		ja='$date1年末から$date2年初め',
		ml='$date1 അവസാനവും $date2 ആദ്യവും',
		nb='årsskiftet $date1/$date2',
		nl='eind $date1 en begin $date2',
		nn='årsskiftet $date1/$date2',
		pl='koniec $date1 i początek $date2 roku',
		qu="$date1 qhipaq p'unchawkuna $date2 ñawpaq p'unchawkunapas",
		ru='конец $date1 — начало $date2 г.',
		sk='prelom rokov $date1/$date2',
		sl='konec leta $date1 in začetek $date2',
		sv='sena $date1 och tidiga $date2',
		uk='кінець $date1 — початок $date2 р.',
		ur='اخیر $date1 و ابتدا $date2',
		vi='bước sang năm $date2',
		['zh-hans']='$date1年末$date2年初',
		['zh-hant']='$date1年末$date2年初',
		default=function(date1, date2, state) return {conj='and', adj1 = 'late', unit1='year', era1=state.era1, adj2 = 'early',  unit2='year', era2=state.era2} end,
	},

	['circa2'] = {
		nDates = 2,
		ar='حوالي $date1 – $date2',
		['be-tarask']={'прыкладна з $date1 да прыкладна $date2', case={'gen','gen'}},
		bn='প্রায় $date1 এবং প্রায় $date2-এর মাঝামাঝি',
		ca='ca. $date1 o $date2',
		ckb='بە نزیکی لەنێوان $date1 و $date2',
		cs='cca $date1 až $date2',
		da='ca. mellem $date1 og $date2',
		de='etwa $date1 bis $date2',
		el='περίπου μεταξύ $date1 και $date2',
		en='between circa $date1 and circa $date2',
		['en-gb']='between circa $date1 and circa $date2',
		['en-ca']='between circa $date1 and circa $date2',
		eo='proksimume de $date1 ĝis $date2',
		es='hacia $date1 o $date2',
		et='ca. $date1 ja $date2 vahel',
		fa='حدوداً بین $date1 و $date2', 
		fi={function(date1, date2, state) return 'suunnilleen ' .. decYear(state,'fi','xxx') .. '$date1 ja $date2 välisenä aikana' end, case={'gen','gen'}},
		fr='vers $date1-$date2',
		gl='entre $date1 e $date2',
		he='בסביבות ה- $date1 עד $date2',
		hr='oko između $date1 i $date2',
		hsb={'wot něhdźe $date1 do něhdźe $date2', case={'gen','gen'}},
		hu='$date1 és $date2 között',
		it='tra il $date1 e il $date2 circa',
		ja='$date1頃と$date2頃の間',
		mk='~ помеѓу $date1 и $date2',
		ml='ഉദ്ദേശം $date1-നും ഉദ്ദേശം $date2-നും ഇടയ്ക്ക്',
		nb='ca. mellom $date1 og $date2',
		nn='ca. mellom $date1 og $date2',
		nds='üm un bi $date1 bet $date2',
		nl='ca. $date1 tot $date2',
		no='ca. mellom $date1 og $date2',
		pl={'od około $date1 do około $date2', case={'gen','gen'}},
		pt='cerca de $date1 a $date2',
		qu="$date1 p'unchawmantachá $date2 p'unchawkamachá",
		ro='circa $date1 – $date2',
		ru={'с около $date1 до, примерно, $date2', case={'gen','gen'}},
		sk='cca $date1 až $date2',
		sl={function(date1, date2, state) return 'ok. ' .. decYear(state,'sl','gen') .. ' $date1 do $date2' end, case={'gen','gen'}},
		sv='c:a $date1 till $date2',
		uk={'з близько $date1 до, приблизно, $date2', case={'gen','gen'}},
		ur='قریباً بین $date1 و $date2', 
		vi='giữa vào khoảng $date1 và vào khoảng $date2',
		['zh-hans']='约$date1~$date2间',
		['zh-hant']='約$date1~$date2間',
		default=function(date1, date2, state) return {conj='between', adj1 = 'circa', unit1=state.unit1, era1=state.era1, adj2 = 'circa',  unit2=state.unit2, era2=state.era2} end,
	},

	-- ==========================================
	-- === Eras and calendars ===================
	-- ==========================================
	['julian'] = {
		nDates = 2,
		ar='$date1 ($date2 حسب [[w:ar:التقويم اليولياني|تقويم يولياني]])',
		['be-tarask']='$date1 ($date2 паводле [[w:be-tarask:Юліянскі каляндар|ст. ст.]]',
		bn='$date1 (জুলিয়ান ক্যালেন্ডারে $date2)',
		ca='$date1 ($date2 segons el [[w:ca:Calendari julià|calendari julià]])',
		ckb='$date1 ($date2 بەپێی [[w:ڕۆژژمێری جولیانی|ڕۆژژمێری جولیانی]])',
		cs='$date1 ($date2 podle [[w:cs:Juliánský kalendář|juliánského kalendáře]])',
		da='$date1 ($date2 [[w:da:Julianske kalender|Julianske kalender]])',
		de='$date1 ($date2 [[w:de:Julianischer Kalender|Julianischer Kalender]])',
		el='$date1 ($date2 με το [[w:el:Ιουλιανό ημερολόγιο|Ιουλιανό ημερολόγιο]])',
		en='$date1 ($date2 in [[w:Old Style and New Style dates|Julian calendar]])',
		['en-gb']='$date1 ($date2 in [[w:Old Style and New Style dates|Julian calendar]])',
		['en-ca']='$date1 ($date2 in [[w:Old Style and New Style dates|Julian calendar]])',
		fa='$date1 ($date2 در [[w:fa:Old Style and New Style dates|تقویم جولیان]])',
		eo='$date1 ($date2 laŭ la [[w:eo:Julia kalendaro|Julia Kalendaro]])',
		es='$date1 ($date2 según el [[w:es:Calendario juliano|calendario juliano]])',
		et='$date1 ($date2 [[w:et:Juliuse kalender|Juliuse kalendris]])',
		fi='$date1 ($date2 [[w:fi:juliaaninen kalenteri|juliaanisen kalenterin]] mukaan)',
		fr='$date1 ($date2 dans le [[w:fr:calendrier julien|calendrier julien]])',
		gl='$date1 ($date2 segundo o [[w:gl:Calendario xuliano|calendario xuliano]])',
		hu='$date1 ($date2 a [[w:hu:Julianus-naptár|Julián naptárban]])',
		hr='$date1 ($date2 prema [[w:hr:Julijanski kalendar|julijanskom kalendaru]])',
		he='$date1 ($date2 ב[[w:he:לוח היוליאני|הלוח היוליאני]])',
		hsb='$date1 ($date2 po julianiskej protyce)',
		it='$date1 ($date2 secondo il [[w:it:Calendario giuliano|calendario giuliano]])',
		ja='$date1（[[w:ja:ユリウス暦|ユリウス暦]] $date2）',
		mk='$date1 ($date2 по [[w:mk:Јулијански календар|Јулијанскиот календар]])',
		ml='$date1 ([[w:ml:ജൂലിയൻ കാലഗണനാരീതി|ജൂലിയൻ വർഷത്തിൽ]] $date2)',
		ml='$date1 ([[w:Old Style and New Style dates|ജൂലിയൻ കാലഗണനാരീതിയിൽ]] $date2)',
		nds='$date1 ($date2 na’n [[w:nds:Juliaansch Klenner|Juliaanschen Klenner]])',
		nb='$date1 ($date2 etter [[w:no:Juliansk kalender|den julianske kalenderen]])',
		nn='$date1 ($date2 etter [[w:no:Juliansk kalender|den julianske kalenderen]])',
		nl='$date1 ($date2 volgens de [[w:nl:Juliaanse kalender|Juliaanse kalender]])',
		no='$date1 ($date2 etter [[w:no:Juliansk kalender|den julianske kalender]])',
		pl='$date1 ($date2 wedle [[w:pl:Daty nowego i starego porządku|kalendarza juliańskiego]])',
		pt='$date1 ($date2 no [[w:pt:Mudança para o calendário gregoriano|calendário juliano]])',
		qu='$date1 ($date2 [[w:qu:Hulyanu kalindaryu|Hulyanu kalindaryupi]])',
		ro='$date1 ($date2 în [[w:ro:calendarul iulian|calendarul iulian]])',
		ru='$date1 ($date2 [[w:ru:Юлианский календарь|по ст. ст.]])',
		sk='$date1 ($date2 podľa [[w:sk:Juliánsky kalendár|juliánskeho kalendára]])',
		sl='$date1 ($date2 po [[w:sl:Julijanski koledar|julijanskem koledarju]])',
		sv='$date1 ($date2 [[w:sv:Gamla stilen|gamla stilen]])',
		uk='$date1 ($date2 [[w:uk:Юліанський календар|Юліанський календар]])',
		ur='$date1 ($date2 حسب [[w:ur:نئے اور پانے انداز کی تاریخ|جولین تقویم]])',
		vi='$date1 ($date2 trong [[w:vi:Lịch Julius|lịch Juliêng]])',
		['zh-hans']='$date1（[[w:Old Style and New Style dates|格里历]]$date2）',
		['zh-hant']='$date1（[[w:Old Style and New Style dates|格里曆]]$date2）',		
		default='&lt;span style="color:red"&gt;$date1 ($date2 in [[w:Old Style and New Style dates|Julian calendar]])&lt;/span&gt;',
	},
	
	['ad'] = {
		nDates = 1,
		['be-tarask']='$date1 [[w:be-tarask:ад Нараджэньня Хрыста|пасьля Н. Х.]]',
		bn ='$date1 খ্রিস্টাব্দ',
		ca ='$date1 dC',
		ckb ='$date1 [[w:ckb:ئانۆ دۆمینی|پاز]]',
		cs ='$date1 n. l.',
		de ='$date1 n. Chr.',
		el ='$date1 μ.Χ.',
		en ='$date1 [[w:en:Anno Domini|AD]]',
		['en-gb'] ='$date1 [[w:en:Anno Domini|AD]]',
		['en-ca'] ='$date1 [[w:en:Anno Domini|AD]]',
		eo ='$date1 pK',
		es ='$date1 [[w:es:Anno Dómini|d. C.]]',
		fa ='$date1 م.',
		fi ='$date1 jaa.',
		fr ='$date1 ap. J.-C.',
		gl ='$date1 d.C.',
		he ='$date1 לספירה',
		hu ='i. sz. $date1',
		hr ='$date1 p. Kr.',
		hsb='$date1 po Chr.',
		it ='$date1 d.C.',
		ja ='西暦$date1',
		mk ='$date1 н.е.',
		ml ='ക്രി.വ. $date1',
		nb ='$date1 e.Kr.',
		nl ='$date1 n.Chr.',
		nn ='$date1 e.Kr.',
		no ='$date1 e.Kr.',
		pl ='$date1 [[w:pl:naszej ery|n.e.]]',
		ro ='$date1 d.Hr.',
		ru ='$date1 н. э.',
		sk ='$date1 po Kr.',
		sl ='$date1 n. št.',
		sv ='$date1 [[w:sv:Vår tideräkning|e.v.t.]]',
		uk ='$date1 н. е.',
		ur ='$date1 ء',
		vi ='$date1 [[w:vi:Công Nguyên|CN]]',
		['zh-hans'] ='[[w:zh:基督纪年|公元]]$date1',
		['zh-hant'] ='[[w:zh:基督纪年|公元]]$date1',
		default='&lt;span style="color:red"&gt;$date1 [[w:en:Anno Domini|AD]]&lt;/span&gt;',
	}, 
	
	['ah'] = {
		nDates = 1,
		['be-tarask']='$date1 [[w:be-tarask:Ісламскі каляндар|хіджры]]',
		bn ='$date1 [[w:bn:ইসলামি বর্ষপঞ্জি|হিজরী]]',
		ckb ='$date1 [[w:ckb:ساڵی کۆچی|سک]]',
		cs ='$date1 [[w:cs:Anno Hegirae|AH]]',
		en ='$date1 [[w:en:Hijri year|AH]]',
		['en-gb'] ='$date1 [[w:en:Hijri year|AH]]',
		['en-ca'] ='$date1 [[w:en:Hijri year|AH]]',
		eo ='$date1 post la [[w:eo:Heĝiro|Heĝiro]]',
		fa ='$date1 ه.ق.',
		fr ='$date1 [[w:fr:Calendrier musulman|A.H.]]',
		he ="$date1 [[w:he:הלוח המוסלמי|להג'רה]]",
		hr ='$date1 god. hidžre',
		ja ='[[w:ja:ヒジュラ暦|ヒジュラ暦]]$date1',
		ml ='$date1 [[w:ml:ഇസ്‌ലാമിക കലണ്ടർ|ഹിജ്റ]]',
		nb ='$date1 [[w:no:Den muslimske kalenderen|A.H.]]',
		nn ='$date1 [[w:nn:Den muslimske kalenderen|A.H.]]',
		pl ='$date1 [[w:pl:Kalendarz muzułmański|A.H.]]',
		ru ='$date1 [[w:ru:Исламский календарь|хиджры]]',
		sk ='$date1 [[w:sk:A. H.|A. H.]]',
		sv ='$date1 [[w:sv:Muslimska kalendern|A.H.]]',
		uk ='$date1 [[w:uk:Мусульманський календар|хіджри]]',
		ur ='$date1 ھ',
		vi ='$date1 [[w:vi:Lịch Hồi giáo|AH]]',
		['zh-hans'] ='[[w:en:Hijri year|Hijri历]]$date1',
		['zh-hant'] ='[[w:en:Hijri year|Hijri曆]]$date1',
		default='&lt;span style="color:red"&gt;$date1 [[w:en:Hijri year|AH]]&lt;/span&gt;',
	},
	
 	['bc'] = {
		nDates = 1,
		ar ='$date1 ق.م.',
		['be-tarask']='$date1 [[w:be-tarask:да Нараджэньня Хрыста|да Н. Х.]]',
		bn ='খ্রিস্টপূর্ব $date1',
		ca ='$date1 [[w:ca:Abans de Crist|aC]]',
		ckb ='$date1 [[w:ckb:پێش زایین|پز]]',
		cs ='$date1 [[w:cs:Př. n. l.|př. n. l.]]',
		de ='$date1 [[w:de:v. Chr.|v. Chr.]]',
		el ='$date1 π.Χ.',
		en ='$date1 [[w:en:Ante Christum Natum|BC]]',
		['en-gb'] ='$date1 [[w:en:Ante Christum Natum|BC]]',
		['en-ca'] ='$date1 [[w:en:Ante Christum Natum|BC]]',
		eo ='$date1 aK',
		es ='$date1 [[w:es:Antes de Cristo|a. C.]]',
		fa ='$date1 پ.م.',
		fi ='$date1 eaa.',
		fr ='$date1 av. J.-C.',
		gl ='$date1 [[w:gl:Antes de Cristo|a.C.]]',
		he ='$date1 לפני הספירה',
		hr ='$date1 [[w:hr:Pr. Kr.|pr. Kr.]]',
		hsb='$date1 do Chr.',
		hu ='i. e. $date1',
		it ='$date1 [[w:it:Avanti Cristo|a.C.]]',
		ja ='[[w:ja:紀元前|紀元前]]$date1',
		mk ='$date1 п.н.е.',
		ml ='ക്രി.മു. $date1',
		nds='$date1 vör uns Tied',
		nb ='$date1 f.Kr.',
		nl ='$date1 v.Chr.',
		nn ='$date1 f.Kr.',
		no ='$date1 f.Kr.',
		pl ='$date1 [[w:pl:przed naszą erą|p.n.e.]]',
		ro ='$date1 î.Hr.',
		ru ='$date1 до н. э.',
		sk ='$date1 [[w:sk:Pred Kristom|pred Kr.]]',
		sl ='$date1 pr. n. št.',
		sv ='$date1 [[w:sv:Vår tideräkning|f.v.t.]]',
		uk ='$date1 до н. е.',
		ur ='$date1 ق م',
		vi ='$date1 [[w:vi:Trước Công Nguyên|TCN]]',
		['zh-hans'] ='[[w:zh:基督纪年|公元前]]$date1',
		['zh-hant'] ='[[w:zh:基督纪年|公元前]]$date1',
		default='&lt;span style="color:red"&gt;$date1 [[w:en:Ante Christum Natum|BC]]&lt;/span&gt;',
	}, 
	
	['bp'] = {
		nDates = 1,
		ar ='$date1 [[w:ar:قبل الحاضر|قبل الحاضر]]',
		be ='$date1 [[w:be-tarask:Да нашых дзён|Да нашых дзён]]',
		['be-tarask']='$date1 [[w:be-tarask:Да нашых дзён|Да нашых дзён]]',
		bn ='বর্তমানের আগে $date1',
		ca ='$date1 [[w:ca:BP (unitat de temps)|BP]]',
		ckb ='$date1 [[w:ckb:پێش ئێستا|پێش ئێستا]]',
		cs ='$date1 [[w:cs:B. P.|B. P.]]',
		de ='$date1 [[w:de:Before Present|BP]]',
		el ='$date1 [[w:en:Before Present|BP]]',
		en ='$date1 [[w:en:Before Present|BP]]',
		['en-gb'] ='$date1 [[w:en:Before Present|BP]]',
		['en-ca'] ='$date1 [[w:en:Before Present|BP]]',
		eo='$date1 [[w:eo:Before Present|BP]]',
		es ='$date1 [[w:es:Before Present|BP]]',
		et ='$date1 [[w:et:Before Present|BP]]',
		fa ='$date1 پیش از اکنون',
		fi ='$date1 [[w:fi:BP (ajanlasku)|BP]]',
		fr ='$date1 [[w:fr:Avant le présent|avant le présent]]',
		hr ='$date1 [[w:hr:BP|prije današnjice]]',
		it ='$date1 [[w:it:Before Present|BP]]',
		ja ='$date1 [[w:ja:BP (年代測定)|BP]]',
		lv ='$date1 [[w:lv:Pirms mūsdienām|Pirms mūsdienām]]',
		mk ='$date1 [[w:mk:Пред сегашноста|п.с.]]',
		ml ='[[w:en:Before Present|ഇന്നത്തെ കാലത്തിനു മുമ്പ്]] $date1',
		nb ='$date1 [[w:no:Before Present|BP]]',
		nn ='$date1 [[w:nn:Before Present|BP]]',
		nl ='$date1 [[w:nl:Before Present|BP]]',
		no ='$date1 [[w:no:Before Present|BP]]',
		pl ='$date1 [[w:pl:Before Present|BP]]',
		pt ='$date1 [[w:pt:Antes do Presente|Antes do Presente]]',
		ru ='$date1 [[w:ru:До настоящего времени|до н. в.]]',
		sk ='$date1 [[w:sk:BP (čas)|BP]]',
		sl ='$date1 [[w:sl:pred sedanjostjo|p. s.]]',
		sr ='$date1 [[w:sr:Прије садашњости|Прије садашњости]]',
		sv ='$date1 [[w:sv:B.P.|B.P.]]',
		uk ='$date1 [[w:uk:Років тому|Років тому]]',
		ur ='$date1 قبل حاضر',
		vi ='$date1 [[w:en:Before Present|trước ngày nay]]',
		['zh-hans'] ='[[w:zh:距今|距今]]$date1',
		['zh-hant'] ='[[w:zh:距今|距今]]$date1',
		default='&lt;span style="color:red"&gt;$date1 [[w:en:Before Present|BP]]&lt;/span&gt;',
	},
}

-- List of possible string inputs to "adj", "junction", "era", and "precision" fields
-- Each term is matched to its synonym and the role: a - adjective, e - era
-- p - precision, c - calendar and combos, r - certainty and j - conjunction
p.Synonyms = {
	-- adjectives and prepositions
	['quarter1']={'1quarter','a'},
	['1stquarter']={'1quarter','a'},
	['1st quarter']={'1quarter','a'},
	['first quarter']={'1quarter','a'},
	['1quarter']={'1quarter','a'},
	['quarter2']={'2quarter','a'},
	['2ndquarter']={'2quarter','a'},
	['2nd quarter']={'2quarter','a'},
	['second quarter']={'2quarter','a'},
	['2quarter']={'2quarter','a'},
	['quarter3']={'3quarter','a'},
	['3rdquarter']={'3quarter','a'},
	['3rd quarter']={'3quarter','a'},
	['third quarter']={'3quarter','a'},
	['3quarter']={'3quarter','a'},
	['quarter4']={'4quarter','a'},
	['4thquarter']={'4quarter','a'},
	['4th quarter']={'4quarter','a'},
	['fourth quarter']={'4quarter','a'},
	['4quarter']={'4quarter','a'},
	['spring']={'spring','a'},
	['summer']={'summer','a'},
	['fall']={'autumn','a'},
	['autumn']={'autumn','a'},
	['winter']={'winter','a'},
	['beginning']={'early','a'},
	['early']={'early','a'},
	['1half']={'firsthalf','a'},
	['1sthalf']={'firsthalf','a'},
	['1st half']={'firsthalf','a'},
	['firsthalf']={'firsthalf','a'},
	['first half']={'firsthalf','a'},
	['end']={'late','a'},
	['late']={'late','a'},
	['middle']={'mid','a'},
	['mid']={'mid','a'},
	['2half']={'secondhalf','a'},
	['2ndhalf']={'secondhalf','a'},
	['2nd half']={'secondhalf','a'},
	['secondhalf']={'secondhalf','a'},
	['second half']={'secondhalf','a'},
	['&lt;']={'before','a'},
	['b']={'before','a'},
	['before']={'before','a'},
	['&gt;']={'after','a'},
	['a']={'after','a'},
	['after']={'after','a'},
	['~']={'circa','a'},
	['c']={'circa','a'},
	['ca']={'circa','a'},
	['circa']={'circa','a'},
	['by']={'by','a'},
	['from']={'from','a'},
	['until']={'until','a'},
	['uncertain']={'uncertain','r'},
	['possibly']={'possibly','r'},
	['probably']={'probably','r'},
	['presumably']={'presumably','r'},

	-- eras
	['bc']={'bc','e'},
	['bce']={'bc','e'},
	['before present']={'bp','e'},
	['bp']={'bp','e'},
	['ce']={'ad','e'},
	['ad']={'ad','e'},
	['ah']={'ah','e'},

	-- conjunctions
	['&amp;']={'and','j'},
	['and']={'and','j'},
	['or']={'or','j'},
	['-']={'from-until','j'},
	['–']={'from-until','j'},
	['from-until']={'from-until','j'},
	['between']={'between','j'},
	['circa2']={'circa2','a'},
	
	-- precision
	['day']={'day','p'},
	['month']={'month','p'},
	['year']={'year','p'},
	['s']={'decade','p'},
	['decade']={'decade','p'},
	['century']={'century','p'},
	['millennium']={'millennium','p'},
	['million']={'million','p'},
	['billion']={'billion','p'},

	-- calendar
	['julian']={'julian','c'},
	['islamic']={'islamic','c'},
	['hijri']={'islamic','c'},
	
	-- "Turn of the ..." options are a combos which will be handled in similar way as calendars
	['turn of the century']={'turn of the century','c'},
	['century turn']={'turn of the century','c'},
	['turn of the decade']={'turn of the decade','c'},
	['decade turn']={'turn of the decade','c'},
	['turn of the year']={'turn of the year','c'},
	['year turn']={'turn of the year','c'},

	-- other dates which will be handled in similar way as calendars
	['?']={'unknown','c'},
	['unknown']={'unknown','c'},
	['unknown year']={'year unknown','c'},
	['year unknown']={'year unknown','c'},
}

return p</text>
      <sha1>rfxutkjjuq3bzpxi9p1avfn30wc92w2</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Formatnum</title>
    <ns>828</ns>
    <id>16871471</id>
    <revision>
      <id>793453990</id>
      <parentid>215095619</parentid>
      <timestamp>2018-11-19T03:13:49Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <comment>synch with master version on commons</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="5770" xml:space="preserve">-- This module is intended to replace the functionality of Template:Formatnum and related templates.
local p = {}

function p.main(frame)
    local args = frame:getParent().args
    local prec    = args.prec or ''
    local sep     = args.sep or ''
    local number  = args[1] or args.number or ''
    local lang    = args[2] or args.lang or ''
    -- validate the language parameter within MediaWiki's caller frame
    if lang == "arabic-indic" then -- only for back-compatibility ("arabic-indic" is not a SupportedLanguage)
        lang = "fa" -- better support than "ks"
    elseif lang == '' or not mw.language.isSupportedLanguage(lang) then
        -- Note that 'SupportedLanguages' are not necessarily 'BuiltinValidCodes', and so they are not necessarily
        -- 'KnownLanguages' (with a language name defined at least in the default localisation of the local wiki).
        -- But they all are ValidLanguageCodes (suitable as Wiki subpages or identifiers: no slash, colon, HTML tags, or entities)
        -- In addition, they do not contain any capital letter in order to be unique in page titles (restriction inexistant in BCP47),
        -- but they may violate the standard format of BCP47 language tags for specific needs in MediaWiki.
        -- Empty/unspecified and unsupported languages are treated here in Commons using the user's language,
        -- instead of the local 'ContentLanguage' of the Wiki.
        lang = frame:callParserFunction( "int", "lang" ) -- get user's chosen language
    end
    return p.formatNum(number, lang, prec, sep ~= '')
end

local digit = { -- substitution of decimal digits for languages not supported by mw.language:formatNum() in core Lua libraries for MediaWiki
    ["ml-old"] = { '൦', '൧', '൨', '൩', '൪', '൫', '൬', '൭', '൮', '൯' },
    ["mn"]     = { '᠐', '᠑', '᠒', '᠓', '᠔', '᠕', '᠖', '᠗', '᠘', '᠙'},
    ["ta"]     = { '௦', '௧', '௨', '௩', '௪', '௫', '௬', '௭', '௮', '௯'},
    ["te"]     = { '౦', '౧', '౨', '౩', '౪', '౫', '౬', '౭', '౮', '౯'},
    ["th"]     = { '๐', '๑', '๒', '๓', '๔', '๕', '๖', '๗', '๘', '๙'}
}

function p.formatNum(number, lang, prec, compact)

    -- Do not alter the specified value when it is not a valid number, return it as is
    local value = tonumber(number)
    if value == nil then
        return number
    end
    -- Basic ASCII-only formatting (without paddings)
    number = tostring(value)

    -- Check the presence of an exponent (incorrectly managed in mw.language:FormatNum() and even forgotten due to an internal bug, e.g. in Hindi)
    local exponent
    local pos = string.find(number, '[Ee]')
    if pos ~= nil then
        exponent = string.sub(number, pos + 1, string.len(number))
        number = string.sub(number, 1, pos - 1)
    else
        exponent = ''
    end

    -- Check the minimum precision requested
    prec = tonumber(prec) -- nil if not specified as a true number
    if prec ~= nil then
        prec = math.floor(prec)
        if prec &lt; 0 then
            prec = nil -- discard an incorrect precision (not a positive integer)
        elseif prec &gt; 14 then
            prec = 14 -- maximum precision supported by tostring(number)
        end
    end

    -- Preprocess the minimum precision in the ASCII string
    local dot
    if (prec or 0) &gt; 0 then
        pos = string.find(number, '.', 1, true) -- plain search, no regexp
        if pos ~= nil then
            prec = pos + prec - string.len(number) -- effective number of trailing decimals to add or remove
            dot = '' -- already present
        else
            dot = '.' -- must be added
        end
    else
        dot = '' -- don't add dot
        prec = 0 -- don't alter the precision
    end

    if lang ~= nil and mw.language.isKnownLanguageTag(lang) == true then
        -- Convert number to localized digits, decimal separator, and group separators
        local language = mw.getLanguage(lang)
        if compact then
            number = language:formatNum(tonumber(number), { noCommafy = 'y' }) -- caveat: can load localized resources for up to 20 languages
        else
            number = language:formatNum(tonumber(number)) -- caveat: can load localized resources for up to 20 languages
        end
        -- Postprocessing the precision
        if prec &gt; 0 then
            local zero = language:formatNum(0)
            number = number .. dot .. mw.ustring.rep(zero, prec)
        elseif prec &lt; 0 then
            -- TODO: rounding of last decimal; here only truncate decimals in excess
            number = mw.ustring.sub(number, 1, mw.ustring.len(number) + prec)
        end

        -- Append the localized base-10 exponent without grouping separators (there's no reliable way to detect a localized leading symbol 'E')
        if exponent ~= '' then
            number = number .. 'E' .. language:formatNum(tonumber(exponent),{noCommafy=true})
        end
    else -- not localized, ASCII only
        -- Postprocessing the precision
        if prec &gt; 0 then
            number = number .. dot .. mw.string.rep('0', prec)
        elseif prec &lt; 0 then
            -- TODO: rounding of last decimal; here only truncate decimals in excess
            number = mw.string.sub(number, 1, mw.string.len(number) + prec)
        end

        -- Append the base-10 exponent
        if exponent ~= '' then
            number = number .. 'E' .. exponent
        end
    end

    -- Special cases for substitution of ASCII digits (missing support in Lua core libraries for some languages)
    if digit[lang] then
        for i, v in ipairs(digit[lang]) do
            number = mw.ustring.gsub(number, tostring(i - 1), v)
        end
    end

    return number
end

return p</text>
      <sha1>6voyj480cvr6m308r6mobxv0y82t0ky</sha1>
    </revision>
  </page>
  <page>
    <title>Module:DateI18n</title>
    <ns>828</ns>
    <id>62875221</id>
    <revision>
      <id>1256969714</id>
      <parentid>912917469</parentid>
      <timestamp>2020-08-14T20:13:55Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <comment>synch with the master copy on Commons</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="16087" xml:space="preserve">--[[  
  __  __           _       _        ____        _       ___ _  ___        
 |  \/  | ___   __| |_   _| | ___ _|  _ \  __ _| |_ ___|_ _/ |( _ ) _ __  
 | |\/| |/ _ \ / _` | | | | |/ _ (_) | | |/ _` | __/ _ \| || |/ _ \| '_ \ 
 | |  | | (_) | (_| | |_| | |  __/_| |_| | (_| | ||  __/| || | (_) | | | |
 |_|  |_|\___/ \__,_|\__,_|_|\___(_)____/ \__,_|\__\___|___|_|\___/|_| |_|
  
This module is intended for processing of date strings.

Please do not modify this code without applying the changes first at Module:Date/sandbox and testing 
at Module:Date/sandbox/testcases and Module talk:Date/sandbox/testcases.

Authors and maintainers:
* User:Parent5446 - original version of the function mimicking template:ISOdate
* User:Jarekt - original version of the functions mimicking template:Date 
]]
require('Module:No globals')

-- ==================================================
-- === Internal functions ===========================
-- ==================================================

-- Function allowing for consistent treatment of boolean-like wikitext input.
-- It works similarly to Module:Yesno
local function yesno(val, default)
	if type(val) == 'boolean' then
		return val
	elseif type(val) == 'number' then
		if val==1 then 
			return true
		elseif val==0 then
			return false
		end
	elseif type(val) == 'string' then
	    val = mw.ustring.lower(val)  -- put in lower case
	    if val == 'no'  or val == 'n' or val == 'false' or tonumber(val) == 0 then
	        return false
	    elseif val == 'yes' or val == 'y' or val == 'true'  or tonumber(val) == 1 then
	        return true
	    end
    end
    return default
end

---------------------------------------------------------------------------------------
-- String replacement that ignores part of the string in "..."
local function strReplace(String, old, new)
	if String:find('"') then
		local T={}
		for i, str in ipairs(mw.text.split( String, '"', true )) do
			if i%2==1 then
				str = str:gsub(old, new)
			end
			table.insert(T, str)
		end
		return table.concat(T,'"')
	else
		return String:gsub(old, new)
	end
end

---------------------------------------------------------------------------------------
-- process datevec
-- INPUT:
--  * datevec - Array of {year,month,day,hour,minute,second, tzhour, tzmin} containing broken 
--    down date-time component strings or numbers
-- OUTPUT:
--  * datecode - a code specifying content of the array where Y' is year, 'M' is month, 
--     'D' is day, 'H' is hour, 'M' minute, 'S' is second. output has to be one of YMDHMS, YMDHM, YMD, YM, MD, Y
--  * datenum - same array but holding only numbers or nuls
local function parserDatevec(datevec)
	-- if month is not a number than check if it is a month name in project's language
	local month = datevec[2]
	if month and month~='' and not tonumber(month) then
		datevec[2] = mw.getContentLanguage():formatDate( "n", month)
	end

	-- create datecode based on which variables are provided and check for out-of-bound values
	local maxval = {nil, 12, 31, 23, 59, 59,  23, 59} -- max values for year, month, ...
	local minval = {nil,  1,  1,  0,  0,  0, -23,  0} -- min values for year, month, ...
	local c = {'Y', 'M', 'D', 'H', 'M', 'S', '', ''}
	local datecode = '' -- a string signifying which combination of variables was provided
	local datenum = {}  -- date-time encoded as a vector = [year, month, ... , second]
	for i = 1,8 do
		datenum[i] = tonumber(datevec[i])
		if datenum[i] and (i==1 or (datenum[i]&gt;=minval[i] and datenum[i]&lt;=maxval[i])) then
			datecode = datecode .. c[i]
		end
	end
	return datecode, datenum
end
	
---------------------------------------------------------------------------------------
-- process datevec
-- INPUT:
--  * datecode - a code specifying content of the array where Y' is year, 'M' is month, 
--     'D' is day, 'H' is hour, 'M' minute, 'S' is second. output has to be one of YMDHMS, YMDHM, YMD, YM, MD, Y
--  * datenum - Array of {year,month,day,hour,minute,second, tzhour, tzmin} as numbers or nuls
-- OUTPUT:
--  * timeStamp - date string in the format taken by mw.language:formatDate lua function and {{#time}} perser function
--       https://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#mw.language:formatDate
--       https://www.mediawiki.org/wiki/Help:Extension:ParserFunctions#.23time
--  * datecode - with possible corrections
local function getTimestamp(datecode, datenum)
	-- create time stamp string (for example 2000-02-20 02:20:20) based on which variables were provided
	local timeStamp
	if datecode == 'YMDHMS' then
		timeStamp = string.format('%04i-%02i-%02i %02i:%02i:%02i', datenum[1], datenum[2], datenum[3], datenum[4], datenum[5], datenum[6] )
	elseif datecode == 'YMDHM' then
		timeStamp = string.format('%04i-%02i-%02i %02i:%02i', datenum[1], datenum[2], datenum[3], datenum[4], datenum[5] )
	elseif datecode:sub(1,3)=='YMD' then
		timeStamp = string.format('%04i-%02i-%02i', datenum[1], datenum[2], datenum[3] )
		datecode = 'YMD' -- 'YMD', 'YMDHMS' and 'YMDHM' are the only supported format starting with 'YMD'. All others will be converted to 'YMD'
	elseif datecode == 'YM' then
		timeStamp = string.format('%04i-%02i', datenum[1], datenum[2] )
	elseif datecode:sub(1,1)=='Y' then
		timeStamp = string.format('%04i', datenum[1] )
		datecode = 'Y' 
	elseif datecode == 'M' then
		timeStamp = string.format('%04i-%02i-%02i', 2000, datenum[2], 1 )
	elseif datecode == 'MD' then
		timeStamp = string.format('%04i-%02i-%02i', 2000, datenum[2], datenum[3] )
	else
		timeStamp = nil -- format not supported
	end
	return timeStamp, datecode
end

---------------------------------------------------------------------------------------
-- trim leading zeros in years prior to year 1000
-- INPUT:
--  * datestr   - translated date string 
--  * lang      - language of translation
-- OUTPUT:
--  * datestr - updated date string 

local function trimYear(datestr, year, lang)
	local yearStr0, yearStr1, yearStr2, zeroStr
	yearStr0 = string.format('%04i', year ) -- 4 digit year in standard form "0123"
	yearStr1 = mw.language.new(lang):formatDate( 'Y', yearStr0) -- same as calling {{#time}} parser function
	--yearStr1 = mw.getCurrentFrame():callParserFunction( "#time", { 'Y', yearStr0, lang } ) -- translate to a language 
	if yearStr0==yearStr1 then -- most of languages use standard form of year 
		yearStr2 = tostring(year)
	else -- some languages use different characters for numbers
		yearStr2 = yearStr1
		zeroStr = mw.ustring.sub(yearStr1,1,1) -- get "0" in whatever language
		for i=1,3 do -- trim leading zeros
			if mw.ustring.sub(yearStr2,1,1)==zeroStr then
				yearStr2 = mw.ustring.sub(yearStr2, 2, 5-i)
			else
				break
			end
		end
	end
	return string.gsub(datestr, yearStr1, yearStr2 ) -- in datestr replace long year with trimmed one
end

---------------------------------------------------------------------------------------
-- Look up proper format string to be passed to {{#time}} parser function
-- INPUTS:
--  * datecode: YMDHMS, YMDHM, YMD, YM, MD, Y, or M
--  * day     : Number between 1 and 31 (not needed for most languages)
--  * lang    : language
-- OUTPUT:
--  * dFormat : input to {{#time}} function
local function getDateFormat(datecode, day, lang)
	local function parseFormat(dFormat, day)
		if dFormat:find('default') and #dFormat&gt;10 then
			-- special (and messy) case of dFormat code depending on a day number
			-- then json contains a string with more json containing "default" field and 2 digit day keys
			-- if desired day is not in that json than use "default" case
			dFormat = dFormat:gsub('”','"') -- change fancy double quote to a straight one, used for json marking
			local D = mw.text.jsonDecode( dFormat )		--com = mw.dumpObject(D)
			day = string.format('d%02i',day) -- create day key
			dFormat = D[day] or D.default
			dFormat = dFormat:gsub("'", '"') -- change single quote to a double quote, used for {{#time}} marking
		end
		return dFormat
	end
	
	local T = {}
	local tab = mw.ext.data.get('DateI18n.tab', lang)
	for _, row in pairs(tab.data) do -- convert the output into a dictionary table
		local id, _, msg = unpack(row)
		T[id] = msg
	end
	local dFormat = T[datecode]
	if dFormat=='default' and (datecode=='YMDHMS' or datecode=='YMDHM')  then 
		-- for most languages adding hour:minute:second is done by adding ", HH:MM:SS to the 
		-- day precission date, those languages are skipped in DateI18n.tab and default to 
		-- English which stores word "default"
		dFormat = parseFormat(T['YMD'], day).. ', H:i'
		if datecode=='YMDHMS' then
			dFormat = dFormat .. ':s'
		end
	else
		dFormat = parseFormat(dFormat, day)
	end
	return dFormat
end

---------------------------------------------------------------------------------------
-- Look up proper format string to be passed to {{#time}} parser function
-- INPUTS:
--  * month : month number
--  * case  : gramatic case abbriviation, like "ins", "loc"
--  * lang  : language
-- OUTPUT:
--  * dFormat : input to {{#time}} function
local function MonthCase(month, case, lang)
	local T = {{},{},{},{},{},{},{},{},{},{},{},{}}
	local tab = mw.ext.data.get('I18n/MonthCases.tab', lang)
	for _, row in pairs(tab.data) do
		local mth, cs, msg = unpack(row)
		T[mth][cs] = msg
	end
	return T[month][case]
end

-- ==================================================
-- === External functions ===========================
-- ==================================================
local p = {}

--[[ ========================================================================================
Date
 
This function is the core part of the ISOdate template. 
 
Usage:
  local Date = require('Module:DateI18n')._Date
  local dateStr = Date({2020, 12, 30, 12, 20, 11}, lang)
 
Parameters:
  * {year,month,day,hour,minute,second, tzhour, tzmin}: broken down date-time component strings or numbers
		tzhour, tzmin are timezone offsets from UTC, hours and minutes
  * lang: The language to display it in
  * case: Language format (genitive, etc.) for some languages
  * class: CSS class for the &lt;time&gt; node, use "" for no metadata at all
]]
function p._Date(datevec, lang, case, class, trim_year)	
	-- make sure inputs are in the right format
	if not lang or not mw.language.isValidCode( lang ) then
		lang = mw.getCurrentFrame():callParserFunction( "int", "lang" ) -- get user's chosen language
	end
	if lang == 'be-tarsk' then
		lang = 'be-x-old'
	end
	
	-- process datevec and extract timeStamp and datecode strings as well as numeric datenum array
	local datecode,  datenum  = parserDatevec(datevec)
	local year, month, day = datenum[1], datenum[2], datenum[3]
	local timeStamp, datecode = getTimestamp(datecode, datenum)
	if not timeStamp then -- something went wrong in parserDatevec
		return ''
	end
	-- Commons [[Data:DateI18n.tab]] page stores prefered formats for diferent 
	-- languages and datecodes (specifying year-month-day or just year of month-day, etc)
	-- Look up country specific format input to {{#time}} function
	local dFormat = getDateFormat(datecode, day, lang)

	-- By default the gramatical case is not specified (case=='') allowing the format to be specified 
	-- in [[Data:DateI18n.tab]]. You can overwrite the default grammatical case of the month by 
	-- specifying "case" variable. This is needed mostly by Slavic languages to create more complex 
	-- phrases as it is done in [[c:Module:Complex date]]
	case = case or ''
	if (lang=='qu' or lang=='qug') and (case=='nom') then
		-- Special case related to Quechua and Kichwa languages. The form in the I18n is
		--  Genitive case with suffix "pi" added to month names provided by {#time}}
		-- in Nominative case that "pi" should be removed
		-- see https://commons.wikimedia.org/wiki/Template_talk:Date#Quechua from 2014
		dFormat = dFormat:gsub('F"pi"', 'F')
	elseif (case=='gen') then
		dFormat = strReplace(dFormat, "F", "xg")
	elseif (case=='nom') then
		dFormat = strReplace(dFormat, "xg", "F")
	elseif (case ~= '') then
		-- see is page [[Data:I18n/MonthCases.tab]] on Commons have name of the month 
		-- in specific gramatic case in desired language. If we have it than replace 
		-- "F" and xg" in dFormat
		local monthMsg = MonthCase(month, case, lang)
		if  monthMsg and monthMsg ~= '' then -- make sure it exists
			dFormat = strReplace(dFormat, 'F',  '"'..monthMsg..'"') -- replace default month with month name we already looked up
			dFormat = strReplace(dFormat, 'xg', '"'..monthMsg..'"')
		end
	end

    -- Translate the date using specified format
	-- See https://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#mw.language:formatDate and 
	-- https://www.mediawiki.org/wiki/Help:Extension:ParserFunctions##time for explanation of the format
	local datestr = mw.language.new(lang):formatDate( dFormat, timeStamp) -- same as using {{#time}} parser function
	
	-- Special case related to Thai solar calendar: prior to 1940 new-year was at different 
	-- time of year, so just year (datecode=='Y') is ambiguous and is replaced by "YYYY or YYYY" phrase
	if lang=='th' and datecode=='Y' and year&lt;=1940 then
		datestr = string.format('%04i หรือ %04i', year+542, year+543 ) 
	end
	
	-- If year&lt;1000 than either keep the date padded to the length of 4 digits or trim it
	-- decide if the year will stay padded with zeros (for years in 0-999 range)
	if year and year&lt;1000 then
		if type(trim_year)=='nil' then 
			trim_year = '100-999'
		end
		local trim = yesno(trim_year,nil) -- convert to boolean
		if trim==nil and type(trim_year)=='string' then
			-- if "trim_year" not a simple True/False than it is range of dates
			-- for example '100-999' means to pad one and 2 digit years to be 4 digit long, while keeping 3 digit years as is
			local YMin, YMax = trim_year:match( '(%d+)-(%d+)' )
			trim = (YMin~=nil and year&gt;=tonumber(YMin) and year&lt;=tonumber(YMax)) 
		end
		if trim==true then
			datestr = trimYear(datestr, year, lang) -- in datestr replace long year with trimmed one
		end
	end

	-- append timezone if present
	if datenum[7] and (datecode == 'YMDHMS' or datecode == 'YMDHM') then
		-- use {{#time}} parser function to create timezone string, so that we use correct character set
		local sign = (datenum[7]&lt;0) and '−' or '+'
		timeStamp = string.format("2000-01-01 %02i:%02i:00", math.abs(datenum[7]), datenum[8] or 0)
		local timezone = mw.language.new(lang):formatDate( 'H:i', timeStamp) -- same as using {{#time}} parser function
		datestr = string.format("%s %s%s", datestr, sign, timezone )
	end

	-- html formating and tagging of date string
	if class and class ~= '' and datecode~='M' and datecode~='MD'then
		local DateHtmlTags = '&lt;span style="white-space:nowrap"&gt;&lt;time class="%s" datetime="%s"&gt;%s&lt;/time&gt;&lt;/span&gt;'
		datestr = DateHtmlTags:format(class, timeStamp, datestr)
	end
	return datestr
end

--[[ ========================================================================================
Date
 
This function is the core part of the ISOdate template. 
 
Usage:
{{#invoke:DateI18n|Date|year=|month=|day=|hour=|minute=|second=|tzhour=|tzmin=|lang=en}}
 
Parameters:
  * year, month, day, hour, minute, second: broken down date-time component strings
  * tzhour, tzmin: timezone offset from UTC, hours and minutes
  * lang: The language to display it in
  * case: Language format (genitive, etc.) for some languages
  * class: CSS class for the &lt;time&gt; node, use "" for no metadata at all
]]
function p.Date(frame)
	local args = {}
	for name, value in pairs( frame.args ) do 
		name = string.gsub( string.lower(name), ' ', '_')
		args[name] = value
	end
	return p._Date(	
		{ args.year, args.month, args.day, args.hour, args.minute, args.second, args.tzhour, args.tzmin },
		args.lang,                  -- language
		args.case,                  -- allows to specify grammatical case for the month for languages that use them
		args.class or 'dtstart',    -- allows to set the html class of the time node where the date is included. This is useful for microformats.
		args.trim_year or '100-999' -- by default pad one and 2 digit years to be 4 digit long, while keeping 3 digit years as is
	)	
end

return p</text>
      <sha1>ber4mpu06s9vonpspt2y1ttwq6gczp6</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Complex date</title>
    <ns>828</ns>
    <id>20467387</id>
    <revision>
      <id>1301543408</id>
      <parentid>820308701</parentid>
      <timestamp>2020-11-02T07:31:45Z</timestamp>
      <contributor>
        <username>Verdy p</username>
        <id>37250</id>
      </contributor>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="21536" xml:space="preserve">--[[ 
  __  __           _       _         ____                      _                 _       _       
 |  \/  | ___   __| |_   _| | ___ _ / ___|___  _ __ ___  _ __ | | _____  __   __| | __ _| |_ ___ 
 | |\/| |/ _ \ / _` | | | | |/ _ (_) |   / _ \| '_ ` _ \| '_ \| |/ _ \ \/ /  / _` |/ _` | __/ _ \
 | |  | | (_) | (_| | |_| | |  __/_| |__| (_) | | | | | | |_) | |  __/&gt;  &lt;  | (_| | (_| | ||  __/
 |_|  |_|\___/ \__,_|\__,_|_|\___(_)\____\___/|_| |_| |_| .__/|_|\___/_/\_\  \__,_|\__,_|\__\___|
                                                        |_|                                      
 
This module is intended for creation of complex date phrases in variety of languages.
 
Once deployed, please do not modify this code without applying the changes first at Module:Complex date/sandbox and testing 
at Module:Complex date/sandbox/testcases.
 
Authors and maintainers:
* User:Sn1per - first draft of the original version 
* User:Jarekt - corrections and expansion of the original version 
]]

-- List of external modules and functions
local p = {Error = nil}
local i18n       = require('Module:i18n/complex date')   -- used for translations of date related phrases
local ISOdate    = require('Module:ISOdate')._ISOdate    -- used for parsing dates in YYYY-MM-DD and related formats
local formatnum  = require('Module:Formatnum').formatNum -- used for translation into other alphabets
local Calendar   = require('Module:Calendar')            -- used for conversions between Julian and Gregorian calendar dates

-- ==================================================
-- === Internal functions ===========================
-- ==================================================
local function formatError(msg, ...)
	return string.format(
		'&lt;strong class="error"&gt;Error in [[Module:Complex date]]: ' ..
		msg .. '&lt;/strong&gt;', ...)
end

local function langSwitch(list, lang)
	local langList = mw.language.getFallbacksFor(lang)
	table.insert(langList, 1, lang)
	table.insert(langList, math.max(#langList, 2), 'default')
	for i,language in ipairs(langList) do
		if list[language] then
			return list[language]
		end
	end
end

-- formatNum1() mostly require('Module:Formatnum').formatNum function used to
-- translate a number to use different numeral characters, except that it 
-- does not call that function unless the language is on the list "LList".
local LList = {
	ar = 1,
	arq = 1,
	ary = 1,
	arz = 1,
	bn = 1,
	bo = 1,
	bpy = 1,
	ckb = 1,
	fa = 1,
	glk = 1,
	gu = 1,
	hi = 1,
	kn = 1,
	ks = 1,
	lo = 1,
	['ml-old'] = 1,
	mn = 1,
	mr = 1,
	mzn = 1,
	new = 1,
	['or'] = 1,
	pa = 1,
	ps = 1,
	sd = 1,
	si = 1,
	te = 1,
	th = 1,
	ur = 1,
}
local function formatnum1(numStr, lang)
	if LList[lang] then -- call only when the language is on the list
		numStr = formatnum(numStr, lang, 1)
	end
	return numStr
end

local function getISODate(datestr, datetype, lang, num, case)
-- translate dates in the format YYYY, YYYY-MM, and YYYY-MM-DD
	if  not case and i18n.Translations[datetype] then
		-- look up the grammatical case needed and call ISOdate module
		local rec = langSwitch(i18n.Translations[datetype], lang)
		if type(rec) == 'table' then
			case = rec.case[num]
		end
	end
	return ISOdate(datestr, lang, case, '', 1)
end

local function translatePhrase(date1, date2, operation, lang, state)
-- use tables in Module:i18n/complex date to translate a phrase
	if not i18n.Translations[operation] then
		p.Error = formatError('input parameter "%s" is not recognized.', operation or 'nil')
		return ''
	end
	local dateStr = langSwitch(i18n.Translations[operation], lang)
	if type(dateStr) == 'table' then
		dateStr = dateStr[1]
	end
	if type(dateStr) == 'function' then
		local success
		local nDates = i18n.Translations[operation]['nDates']
		if nDates == 2 then -- double dated phrase
			success, dateStr = pcall(dateStr, date1, date2, state)
		else -- single dated phrase
			success, dateStr = pcall(dateStr, date1, state)
		end
	end
	if type(dateStr) == 'string' then
		-- replace parts of the string '$date1' and '$date2' with date1 and date2 strings
		dateStr = mw.ustring.gsub(dateStr, '$date1', date1)
		dateStr = mw.ustring.gsub(dateStr, '$date2', date2)
	else
		-- Special case of more complex phrases that can be build out of simple phrases
		-- If complex case is not translated to "lang" than build it out of simpler ones
		local x = dateStr
		dateStr = p._complex_date(x.conj, x.adj1, date1, x.units1, x.era1, x.adj2, date2, x.units2, x.era2, lang, 2)
	end
	return dateStr
end

local function oneDatePhrase(dateStr, adj, era, units, lang, num, case, state)
-- translate a single date phrase
	if num == 2 then
		state.adj, state.era, state.units, state.precision = state.adj2, state.era2, state.units2, state.precision2 
	end
	-- dateStr can have many forms: ISO date, year or a number for 
	-- decade, century or millennium
	if units == '' then -- unit is "year", "month", "day"
		dateStr = getISODate(dateStr, adj, lang, num, case)
	else -- units is "decade", "century", "millennium''
		dateStr = translatePhrase(dateStr, '', units, lang, state)
	end
	-- add adjective ("early", "mid", etc.) or preposition ("before", "after", 
	-- "circa", etc.) to the date
	if adj ~= '' then
		dateStr = translatePhrase(dateStr, '', adj, lang, state)
	else -- only era?
		dateStr = formatnum1(dateStr, lang)
	end
	-- add era
	if era ~= '' then
		dateStr = translatePhrase(dateStr, '', era, lang, state)
	end
	return dateStr
end

local function twoDatePhrase(date1, date2, state, lang)
-- translate a double date phrase
	local dateStr, case
	local era = ''
	if state.era1 == state.era2 then
		-- if both eras are the same than add it only once
		era = state.era1
		state.era1 = ''
		state.era2 = ''
	end
	case = {nil, nil}
	if i18n.Translations[state.conj] then
		local rec = langSwitch(i18n.Translations[state.conj], lang)
		if type(rec)=='table' then
			case = rec.case
		end
	end
	date1   = oneDatePhrase(date1, state.adj1, state.era1, state.units1, lang, 1, case[1], state)
	date2   = oneDatePhrase(date2, state.adj2, state.era2, state.units2, lang, 2, case[2], state)
	dateStr = translatePhrase(date1, date2, state.conj, lang, state)
	if era ~= '' then
		dateStr = translatePhrase(dateStr, '', era, lang, state)
	end
	return dateStr
end

local function otherPhrases(date1, date2, operation, era, lang, state)
-- translate specialized phrases
	local dateStr = ''
	if operation == 'islamic' then
		if date2 == '' then
			date2 = mw.getCurrentFrame():callParserFunction('#time', 'xmY', date1)
		end
		date1 = getISODate(date1, operation, lang, 1, nil)
		date2 = getISODate(date2, operation, lang, 2, nil)
		if era == '' then era = 'ad' end
		dateStr = translatePhrase(date1, '', era, lang, state)
			.. ' (' .. translatePhrase(date2, '', 'ah', lang, state) .. ')'
		era = ''
	elseif operation == 'julian' then
		if not date2 and date1 then -- Convert from Julian to Gregorian calendar date
			local JDN = Calendar._date2jdn(date1, 0)
			if JDN then
				date2 = date1 -- first date is assumed to be Julian
				date1 = Calendar._jdn2date(JDN, 1)
			end
		end
		date1 = getISODate(date1, operation, lang, 1, nil)
		date2 = getISODate(date2, operation, lang, 2, nil)
		dateStr = translatePhrase(date1, date2, operation, lang, state)
		dateStr = dateStr.gsub('%( ', '(').gsub(' %)', ')') -- in case date2 is empty
	elseif operation == 'turn of the year'
	or operation == 'turn of the decade'
	or operation == 'turn of the century' then 
		if not date2 or date2 == '' then
			local dt = (operation == 'turn of the decade') and 10 or 1
			date2 = tostring(tonumber(date1) - dt)
		end
		if era ~= 'bp' and era ~= 'bc' then
			date1, date2 = date2, date1
		end
		if operation == 'turn of the year' then
			date1 = ISOdate(date1, lang, '', '', 1)
			date2 = ISOdate(date2, lang, '', '', 1)
		else
			date1 = formatnum1(date1, lang)
			date2 = formatnum1(date2, lang)
		end
		dateStr = translatePhrase(date1, date2, operation, lang, state)
	elseif operation == 'year unknown' then
		dateStr = translatePhrase('', '', operation, lang, state) .. '&lt;q style="display:none"&gt;Unknown date&lt;/q&gt;'
	elseif operation == 'unknown' then
		dateStr = tostring(mw.message.new("exif-unknowndate"):inLanguage(lang)) .. '&lt;q style="display:none"&gt;Unknown date&lt;/q&gt;'
	end
	-- add era
	if era ~= '' then
		dateStr = translatePhrase(dateStr, '', era, lang, state)
	end
	return dateStr
end

local function checkAliases(str1, str2, sType)
	-- some inputs have many aliases - reconcile them and ensure string is playing a proper role	
	local out = ''
	if str1 and str1 ~= '' then
		local a = i18n.Synonyms[str1] -- look up synonyms of "str1"
		if a then
			out = a[1]
		else
			p.Error = formatError('"%s" is not a recognized alias.', str1)
		end
	elseif str2 and str2 ~= '' then -- if "str1" of type "sType" is empty than maybe ...
		local a = i18n.Synonyms[str2] -- ..."str2" is of the same type and is not empty
		if a and a[2] == sType then
			out  = a[1]
			str2 = ''
		end
	end
	return out, str2
end

local function datePrecision(dateStr, units)	
-- "in this module "Units" is a string like millennium, century, or decade
--	"precision" is wikibase compatible date precision number: 6=millennium, 7=century, 8=decade, 9=year, 10=month, 11=day
-- based on string or numeric input calculate "Units" and "precision"
	local precision
	local dateNum = tonumber(dateStr);
	if type(units) == 'number' then
		precision = units
		if precision &gt; 11  then precision = 11 end -- clip the range of precision values
		if     precision == 6 then units = 'millennium' 		
		elseif precision == 7 then units = 'century'
		elseif precision == 8 then units = 'decade'
		else                       units = ''
		end
	elseif type(units) == 'string' then
		units = string.lower(units);
		if     units == 'millennium' then precision = 6
		elseif units == 'century'    then precision = 7
		elseif units == 'decade'     then precision = 8
		else                              precision = 9
		end
	end
	if units == ''
	or precision == 9 then
		local sLen = mw.ustring.len(dateStr)
		if     sLen &lt;=  4 then precision = 9
		elseif sLen ==  7 then precision = 10
		elseif sLen &gt;= 10 then precision = 11
		end
		units=''
	end
	if precision == 6 and dateStr.match(dateStr, '%d000') ~= nil then 
		dateStr = tostring(math.floor(tonumber(dateStr) / 1000) + 1)
	elseif precision == 7 and mw.ustring.match(dateStr, '%d%d00') ~= nil then
		dateStr = tostring(math.floor(tonumber(dateStr) / 100) + 1)
	end
	return dateStr, units, precision
end

local eraLUT = {
	[''] = '+', ad = '+', bc = '-', bp = '-', -- Gregorian eras
	ah = 1, -- TODO: islamic era not supported
}
local function isodate2timestamp(dateStr, precision, era)
-- convert date string to timestamps used by Quick Statements
	if precision &lt; 6 then
		return nil
	end
	era = eraLUT[era or '']
	if not era -- unknown era
	or era ~= '+' and era ~= '-' then -- non-Gregorian eras
		return nil -- TODO: convert dates from non-Gregorian eras
	end
	-- convert isodate to timestamp used by quick statements
	local tStamp
	if precision &gt;= 9 then -- year or better
		if string.match(dateStr,"^%d%d%d%d$") then -- if YYYY format 
			tStamp = era .. dateStr .. '-00-00T00:00:00Z/9'
		elseif string.match(dateStr,"^%d%d%d%d%-%d%d$") then -- if YYYY-MM format 
			tStamp = era .. dateStr .. '-00T00:00:00Z/10'
		elseif string.match(dateStr,"^%d%d%d%d%-%d%d%-%d%d$") then -- if YYYY-MM-DD format 
			tStamp = era .. dateStr .. 'T00:00:00Z/11'
		end
	elseif precision == 8 then -- decade
		tStamp = era .. dateStr .. '-00-00T00:00:00Z/8'
	elseif precision == 7 then -- century
		local d = tostring(tonumber(dateStr) - 1)
		tStamp = era .. d .. '50-00-00T00:00:00Z/7'
	elseif precision == 6 then -- millenium
		local d = tostring(tonumber(dateStr) - 1)
		tStamp = era .. d .. '500-00-00T00:00:00Z/6'
	end
	return tStamp
end

local yearQualifiers = {
	early = 'Q40719727', mid = 'Q40719748', late = 'Q40719766',
	firsthalf = 'Q40719687', secondhalf = 'Q40719707',
	['1quarter'] = 'Q40690303', ['2quarter'] = 'Q40719649',
	['3quarter'] = 'Q40719662', ['4quarter'] = 'Q40719674',
	spring = 'Q40720559', summer = 'Q40720564',
	autumn = 'Q40720568', winter = 'Q40720553'
}
local dayQualifiers = {
	['from'] = 'P580', ['until'] = 'P582',
	['after'] = 'P1319', ['before'] = 'P1326',
	['by'] = 'P1326',
}
local function oneDateQScode(dateStr, adj, era, precision)
-- create QuickStatements string for "one date" dates
	local outputStr = ''
	local d = isodate2timestamp(dateStr, precision, era)
	if not d then
		return ''
	end
	local yearQ, dayQ = yearQualifiers[adj], dayQualifiers[adj]
	if adj == '' then
		outputStr = d
	elseif adj == 'circa' then
		outputStr = d .. ',P1480,Q5727902'
	elseif yearQ then
		outputStr = d .. ',P4241,' .. yearQ
	elseif dayQ and precision &gt; 7 then
		local century = string.gsub(d, 'Z%/%d+', 'Z/7')
		outputStr = century .. ',' .. dayQ .. ',' .. d
	end
	return outputStr 
end

local function twoDateQScode(date1, date2, state)
-- create QuickStatements string for "two date" dates
	if state.adj1 ~= ''
	or state.adj2 ~= ''
	or state.era1 ~= state.era2 then
		return '' -- QuickStatements string are not generated for two date phrases with adjectives
	end
	local outputStr = ''
	local d1 = isodate2timestamp(date1, state.precision1, state.era1)
	local d2 = isodate2timestamp(date2, state.precision2, state.era2)
	if not d1 or not d2 then
		return ''
	end	
	-- find date with lower precision in common to both dates
	local cd
	local year1 = tonumber(string.sub(d1, 2, 5))
	local year2 = tonumber(string.sub(d2, 2, 5))
	local k = 0
	for i = 1, 10, 1 do 
		if string.sub(d1, 1, i) == string.sub(d2, 1, i) then 
			k = i -- find last matching letter
		end
	end
	if k &gt;= 9 then               -- same month, since "+YYYY-MM-" is in common
		cd = isodate2timestamp(string.sub(d1, 2, 8), 10, state.era1)
	elseif k &gt;= 6 and k &lt; 9 then -- same year, since "+YYYY-" is in common
		cd = isodate2timestamp(tostring(year1), 9, state.era1)
	elseif k == 4 then           -- same decade(k=4, precision=8),  since "+YYY" is in common
		cd = isodate2timestamp(tostring(year1), 8, state.era1)
	elseif k == 3 then           -- same century(k=3, precision=7) since "+YY" is in common
	  local d = tostring(math.floor(year1 / 100) + 1) -- convert 1999 -&gt; 20
		cd = isodate2timestamp(d, 7, state.era1)
	elseif k == 2 then           -- same millennium (k=2, precision=6),  since "+Y" is in common
		local d = tostring(math.floor(year1 / 1000) + 1) -- convert 1999 -&gt; 2
		cd = isodate2timestamp(d, 6, state.era1)
	end
	if not cd then
		return ''
	end
	--if not cd then
	--	return formatError(d1 .. ' / ' .. d2 .. ' / ' .. (cd or '')
	-- 		.. ' / ' .. string.sub(d1, 2, 5) .. ' / ' .. string.sub(d2, 2, 5)
	-- 		.. ' / ' .. tostring(k))
	--end
	if state.conj == 'from-until'
	or state.conj == 'and' and year1 == year2 - 1 then
		outputStr = cd .. ',P580,' .. d1 .. ',P582,' .. d2
	elseif state.conj == 'between'
	or state.conj == 'or' and year1 == year2 - 1 then
		outputStr = cd .. ',P1319,' .. d1 .. ',P1326,' .. d2
	elseif state.conj == 'circa2' then
		outputStr = cd .. ',P1319,' .. d1 .. ',P1326,' .. d2 .. ',P1480,Q5727902'
	end
	return outputStr
end

-- ==================================================
-- === External functions ===========================
-- ==================================================

function p.Era(frame)
    -- process inputs
	local dateStr
	local args    = frame.args
	if not (args.lang and mw.language.isSupportedLanguage(args.lang)) then 
		args.lang = frame:callParserFunction('int', 'Lang') -- get user's chosen language  
	end
	local lang    = args['lang']
	local dateStr = args['date'] or ''
	local eraType = string.lower(args['era']  or '')
	dateStr = ISOdate(dateStr, lang, '', '', 1)
	if eraType then 
		eraType = checkAliases(eraType , '', 'e')
		dateStr = translatePhrase(dateStr, '', eraType, lang, {}) 
	end
	return dateStr
end
	
function p._complex_date(conj, adj1, date1, units1, era1, adj2, date2, units2, era2, lang, passNr)
	local Output = ''
	-- process inputs and save date in state array
	local state  = {} 
	state.conj   = string.lower(conj   or '')
	state.adj1   = string.lower(adj1   or '')
	state.adj2   = string.lower(adj2   or '')
	state.era1   = string.lower(era1   or '')
	state.era2   = string.lower(era2   or '')
	state.units1 = string.lower(units1 or '')
	state.units2 = string.lower(units2 or '')
	-- if date 1 is missing but date 2 is provided than swap them
	if date1 == '' and date2 ~= '' then
		date1 = date2
		date2 = ''
		state = {
			adj1 = state.adj2, era1 = state.era2, units1 = state.units2, 
		    adj2 = '',         era2 = '',         units2 = '',
		    conj = state.conj, num = 1}
	end
	if     date2 ~= '' then state.nDates = 2 
	elseif date1 ~= '' then state.nDates = 1 
	else	                state.nDates = 0
	end
	-- reconcile alternative names for text inputs
	local conj         = checkAliases(state.conj ,''  ,'j')
	state.adj1 ,conj   = checkAliases(state.adj1 ,conj,'a')
	state.units1,conj  = checkAliases(state.units1,conj,'p')
	state.era1 ,conj   = checkAliases(state.era1 ,conj,'e')
	state.special,conj = checkAliases('',conj,'c')
	state.adj2         = checkAliases(state.adj2 ,'','a')
	state.units2       = checkAliases(state.units2,'','p')
	state.era2         = checkAliases(state.era2 ,'','e')
	state.conj         = conj
	state.lang         = lang
	if p.Error ~= nil then
		return nil
	end
	-- calculate date precision value
	date1, state.units1, state.precision1 = datePrecision(date1, state.units1)
	date2, state.units2, state.precision2 = datePrecision(date2, state.units2)
	-- Handle special cases 
	-- Some complex phrases can be created out of simpler ones. Therefore on pass 1 we try to create 
	-- the phrase using complex phrase and if that is not found than on the second pass we try to build
	-- the phrase out of the simpler ones
	if passNr == 1 then
		if state.nDates == 2 and state.adj1 == 'circa' then
			state.conj = 'circa2'
			state.adj1 = ''
			state.adj2 = ''
		end
		if state.nDates == 2
		and state.conj == 'and'
		and state.adj1 == 'late' and state.adj2 == 'early'
		and state.units1 == state.units2 and state.era1 == state.era2 then
			if     state.units1 == 'century' then state.conj = 'turn of the century'
			elseif state.units1 == 'decade'  then state.conj = 'turn of the decade'
			elseif state.units1 == ''        then state.conj = 'turn of the year'
			end
			state.adj1 = ''
			state.adj2 = ''
			state.units1 = ''
			state.units2 = ''
		end
	end
	local errorStr = string.format(
		'\n*conj=%s, adj1=%s, era1=%s, unit1=%s, prec1=%i, adj2=%s, era2=%s, unit2=%s, prec2=%i, special=%s', 
		state.conj, state.adj1, state.era1, state.units1, state.precision1,
		state.adj2, state.era2, state.units2, state.precision2, state.special)  
	-- Call specialized functions
	local QScode = ''
	if state.special ~= '' then
		Output = otherPhrases(date1, date2, state.special, state.era1, lang, state)	
	elseif state.conj ~= '' then
		QScode = twoDateQScode(date1, date2, state)
		Output = twoDatePhrase(date1, date2, state, lang)
	elseif state.adj1 ~= ''
	or state.era1 ~= ''
	or state.units1 ~= '' then
		Output = oneDatePhrase(date1, state.adj1, state.era1, state.units1, lang, 1, nil, state)
		QScode = oneDateQScode(date1, state.adj1, state.era1, state.precision1)
	elseif date1 ~= '' then
		Output = ISOdate(date1, lang, '', 'dtstart', '100-999')
	end
	if p.Error ~= nil then
		return errorStr
	end
	-- if there is any wikicode in the string than execute it
	if mw.ustring.find(Output, '{') then
		Output = mw.getCurrentFrame():preprocess(Output)
	end
	if QScode and #QScode&gt;0 then
		QScode = '&lt;q style="display:none"&gt;date QS:P,' .. QScode .. '&lt;/q&gt;'
	end
	return Output .. QScode
end

local certaintyQualifiers = {
	circa      = 'Q5727902',
	presumably = 'Q18122778',
	possibly   = 'Q30230067',
	probably   = 'Q56644435',
}
function p._complex_date_cer(conj, adj1, date1, units1, era1, adj2, date2, units2, era2, certainty, lang)
-- same as p._complex_date but with extra parameter for certainty: probably, possibly, presumably, etc.
	local dateStr = p._complex_date(conj, adj1, date1, units1, era1, adj2, date2, units2, era2, lang, 1)
	certainty = checkAliases(certainty, conj, 'r')
	if certainty and certaintyQualifiers[certainty] then
		dateStr = translatePhrase(dateStr, '', certainty, lang, {})
		dateStr = dateStr.gsub(
			'(%&lt;%a+ style="display: ?none;?"%&gt;date QS:P,[^%&lt;]+)(%&lt;/%a+%&gt;)',
			'%1,P1480,' .. certaintyQualifiers[certainty] .. '%2')
	end
	return dateStr
end

function p.complex_date(frame)
    -- process inputs
	local dateStr, Error
	local args   = frame.args
	if not (args.lang and mw.language.isSupportedLanguage(args.lang)) then 
		args.lang = frame:callParserFunction("int", "Lang") -- get user's chosen language  
	end
	local date1  = args['date1'] or args['2'] or args['date'] or ''
	local date2  = args['date2'] or args['3'] or ''
	local conj   = args['conj']  or args['1'] or ''
	local adj1   = args['adj1']  or args['adj'] or ''
	local adj2   = args['adj2'] or ''
	local units1 = args['precision1'] or args['precision'] or ''
	local units2 = args['precision2'] or args['precision'] or ''
	local era1   = args['era1'] or args['era'] or ''
	local era2   = args['era2'] or args['era'] or ''
	local certainty = args['certainty']
	local lang   = args['lang']
	dateStr = p._complex_date_cer(conj, adj1, date1, units1, era1, adj2, date2, units2, era2, certainty, lang)
	if p.Error ~= nil then
		dateStr = p.Error .. '[[Category:Pages using Complex date template with incorrect parameter]]'
	end
	return dateStr
end

return p</text>
      <sha1>a6nbhzg5zv84w5mbwys5g0qni3uy228</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Cite</title>
    <ns>828</ns>
    <id>18235347</id>
    <revision>
      <id>1325035754</id>
      <parentid>1265729650</parentid>
      <timestamp>2020-12-18T23:51:56Z</timestamp>
      <contributor>
        <username>Sabelöga</username>
        <id>2599541</id>
      </contributor>
      <comment>sv</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="10554" xml:space="preserve">-- Creates a timeline for an item based on various properties

local p = {}
local wikidata = require('Module:Wikidata')
local linguistic = require('Module:Linguistic')
local fb = require('Module:Fallback')


local i18n = {
	articletitle = {
		de = '„$1“',
		en = '"$1"',
		fr = '«$1»',
		nb = '«$1»',
		nn = '«$1»',
		ur = '«$1»',
		},
	booktitle = {
		en = '&lt;i&gt;$1&lt;/i&gt;',
		ur = '&lt;i&gt;$1&lt;/i&gt;',
		},
	editor = {
		de = '$1 (Hrsg.)',
		en = '$1 (ed.)',
		nb = '$1 (red.)',
		nn = '$1 (red.)',
		sv = '$1 (red.)',
		ur = '$1 (مدیر۔)',
	},
	editors = {
		de = '$1 (Hrsg.)',
		en = '$1 (eds.)',
		nb = '$1 (red.)',
		nn = '$1 (red.)',
		sv = '$1 (red.)',
		ur = '$1 (مدیران۔)',	
	},
	num = {
		af = 'nr. $1',
		ca = 'núm. $1',
		cs = 'č. $1',
		da = 'nr. $1',
		de = 'Nr. $1',
		el = 'αρ. $1',
		en = 'no. $1',
		es = ' nº$1',
		fa = 'ش. 1$',
		fr = 'n°1$1',
		gd = 'àir. $1',
		ja = '$1番',
		['io'] = 'nº$1',
		ka = 'არა$1',
		lt = 'nr. $1',
		lv = 'nr. $1',
		mk = 'бр. $1',
		nl = 'nr $1',
		no = 'nr $1',
		pl = 'nr $1',
		pt = 'nº$1',
		ru = '№$1',
		sk = 'č. $1',
		sl = 'št. $1',
		st = 'no. $1',
		sv = 'nr $1',
		nl = '$1號',
		ur = 'نمبر. $1',
	},	
	page = {
		de = 'S. $1',
		en = 'p. $1',
		fr = 'p. $1',
		nb = 's. $1',
		nn = 's. $1',
		sv = 's. $1',
		ur = 'صفحہ۔ $1',
	},
	['read online'] = {
		de = '[$1 online]',
		en = '[$1 read online]',
		fr = '[$1 lire en ligne]',
		nb = '[$1 les online]',
		nn = '[$1 les online]',
		sv = '[$1 läs online]',
		ur = '[$1 آن لائن پڑھیں]',
	},
	['volume'] = {
		de = 'Band $1',
		en = 'vol. $1',
		ur = 'جلد۔ $1',
	},
	['citation_comma'] = {
		ur = '، ',
		zh = '，',  -- in Chinese the commas used in citation aren't '、'
		["zh-cn"] = '，',
		["zh-hans"] = '，',
		["zh-hant"] = '，',
		["zh-hk"] = '，',
		["zh-mo"] = '，',
		["zh-sg"] = '，',
		["zh-tw"] = '，',
		en = ', ',
		message = 'comma-separator',
	},
}

local function translate(msg, lg, sub1, sub2)
	local str = fb._langSwitch(i18n[msg], lg)
	if not str then
		return "nil"
	end
	if sub1 then
		str = str:gsub("$1", sub1)
	end
	if sub2 then
		str = str:gsub("$2", sub2)
	end
	return str
end

local function getTitle(item, lang)
	local title = wikidata.formatStatements({entity=item, property = 'P1476'})
	if not title then
		title = wikidata._getLabel(item, lang) .. " (title not provided in Wikidata)"
	end
	return title
end
local function formatpage(page, lang)
-- same text for singular and plural, most of the time, they can be distinguished by the presence of a "-" but that does not always work, see Q11927173
	if not page then 
		return nil
	end
	return translate("page", lang, page)
end

local function formatnum(num, lang)
	if not num then 
		return nil
	end
	return translate("num", lang, num)
end

local function getauthor(item, lang)
	return wikidata.formatStatements{entity=item, property = 'P50', lang=lang}
end

local function getISBN(item, lang)
	local ISBN = wikidata.formatStatements{entity = item, property = 'P212', lang=lang, numval = 1}
	if ISBN then 
		return 'ISBN ' ..ISBN
	end
end

local function getLink(item, lang)
	local links = wikidata.formatStatements{entity = item, property = 'P854', numval = 1, lang=lang}
	if links then
		return translate('read online', lang, links)
	end
end

local function getVolume(item, lang)
	local volume = wikidata.formatStatements{item = item, property = 'P478', numval = 1, lang=lang}
	if volume then
		return translate("volume", lang, volume)
	end
end

local function getDoi(item, lang)
	local doi = wikidata.formatStatements({entity=item, property = 'P356', numval = 1, lang=lang}) -- what to do if several value
	if not doi then
		return nil
	end
	return '&lt;small&gt;' .. 'doi: [http://dx.doi.org/' .. doi .. ' ' .. doi .. ']' .. '&lt;/small&gt;' -- needs i18n ?
	-- some DOIs contain special characters like "[" or "]", which break the linking syntax above unless these characters are URL-encoded
end

local function getPmid(item, lang)
	local pmid = wikidata.formatStatements({entity=item, property = 'P698', numval = 1, lang=lang}) -- what to do if several values
	if not pmid then
		return nil
	end
	return '&lt;small&gt; PubMed ID: [https://www.ncbi.nlm.nih.gov/pubmed/?term=' .. pmid .. ' ' .. pmid .. '] &lt;/small&gt;' -- needs i18n ?
end

local function getPmcid(item, lang)
	local pmcid = wikidata.formatStatements({entity=item, property = 'P932', numval = 1, lang=lang}) -- what to do if several values
	if not pmcid then
		return nil
	end
	return '&lt;small&gt; PubMed Central ID: [https://www.ncbi.nlm.nih.gov/pmc/articles/PMC?term=' .. pmcid .. ' ' .. pmcid .. '] &lt;/small&gt;' -- needs i18n ?
end

local function getEditor(item, lang)
	local editortable = wikidata.getClaims({entity=item, property='P98'})
	if not editortable then 
		return nil
	end
	local editor = wikidata.formatStatements({entity=item, property='P98', lang=lang}) -- should have a "formatClaims" function to avoid double work
	if #editortable &gt; 1 then
		 return translate('editor', lang, editor)
	else
		return translate('editors', lang, editor)
	end
		
end

local function getedition(item, lang)
	local ednumber = wikidata.formatStatements({entity=item, property = 'P393', lang=lang, numval = 1}) 
	if not ednumber then 
		return nil
	end
	local ord = require('Module:Ordinal')._Ordinal
	return fb._langSwitch({ 
		de = ednumber .. '. Auflage', 
		en = ord(ednumber, 'en') .. ' edition',
		fr = ord(ednumber, 'fr') .. ' édition',
		nb = ord(ednumber, 'nb') .. ' utgave',
		nn = ord(ednumber, 'nn') .. ' utgave',
		ur = ord(ednumber, 'ur') .. ' اشاعت',
		}, lang)
end

local function getarticletitle(item, lang)
	local title = getTitle(item, lang)
	title = translate("articletitle", lang, title)
	return title
end

local function getbooktitle(item, lang)-- needs i18n some languages do not use this format
	local title = getTitle(item, lang)
	title = translate("booktitle", lang, title)
	return title
end

local function getissue(item, lang)
	return  wikidata.formatStatements({entity=item, property = 'P433', lang=lang})
end

local function getpublisher(item, lang)
	return wikidata.formatStatements({entity=item, property = 'P123', lang=lang})
end

local function getpublishdate(item, lang)
	return  wikidata.formatStatements({entity=item, property = 'P577', lang=lang})
end

local function getpublishplace(item, lang)
	return  wikidata.formatStatements({entity=item, property = 'P291', lang=lang})
end

local function geturl(item, lang)
	return wikidata.formatStatements({entity=item, property = 'P854', lang=lang})
end

local function getlicense(item, lang)
	return wikidata.formatStatements{entity=item, property = 'P275', lang=lang}
end

local function getjournal(item, lang) -- get the title property rather than the label
	local journal = wikidata.formatStatements({entity = item, property = 'P1433', exlcudespecial = true})
	if journal then return '&lt;i&gt;' .. journal .. '&lt;/i&gt;' end -- would need i18n 
end

local function citebook(item, lang, page, num)
	local publishdate = getpublishdate(item, lang)
	local author = getauthor(item, lang)
	local editor = getEditor(item, lang)
	local title = getbooktitle(item, lang)
	local publishplace = getpublishplace(item, lang)
	local publisher = getpublisher(item, lang)
	if publishplace and publisher then -- needs cleanup
		publisher = publishplace .. mw.getCurrentFrame():expandTemplate{title = "colon", args = {lang}} .. publisher
	end
	local edition = getedition(item, lang)
	local isbn = getISBN(item, lang)
	local doi = getDoi(item, lang)
	local pmid = getPmid(item, lang)
	local pmcid = getPmcid(item, lang)
	local link = getLink(item, lang)
	local volume = getVolume(item, lang)
	local pagenumber = formatpage(page, lang)
	local refnum = formatpage(num, lang)
	local license = getlicense(item, lang)

	local fields = {}
	table.insert(fields, author)
	table.insert(fields, editor)
	table.insert(fields, title)
	table.insert(fields, edition)
	table.insert(fields, volume)
	table.insert(fields, publisher)
	table.insert(fields, publishdate)
	table.insert(fields, pagenumber)
	table.insert(fields, refnum)
	table.insert(fields, isbn)
	table.insert(fields, doi)
	table.insert(fields, pmid)
	table.insert(fields, pmcid)
	table.insert(fields, link)
	table.insert(fields, license)
	return linguistic.conj(fields, lang, translate("citation_comma", lang))
end

local function citearticle(item, lang, page, num)
	local author = getauthor(item, lang)
	local title = getarticletitle(item, lang)
	local publisher = getpublisher(item, lang)
	local publishdate = getpublishdate(item, lang)
	local pagenumber = formatpage(page, lang)
	local journal = getjournal(item, lang)
	local issue = getissue(item, lang)
	local publishdate = getpublishdate(item, lang)
	local doi = getDoi(item, lang)
	local pmid = getPmid(item, lang)
	local pmcid = getPmcid(item, lang)
	local link = getLink(item, lang)
	local volume = getVolume(item, lang)
	local pagenumber = formatpage(page, lang)
	local refnum = formatpage(num, lang)
	local license = getlicense(item, lang)
	
	local fields = {}
	table.insert(fields, author)
	table.insert(fields, title)
	table.insert(fields, publisher)
	table.insert(fields, journal)
	table.insert(fields, volume)
	table.insert(fields, issue)
	table.insert(fields, publishdate)
	table.insert(fields, pagenumber)
	table.insert(fields, refnum)
	table.insert(fields, doi)
	table.insert(fields, pmid)
	table.insert(fields, pmcid)
	table.insert(fields, link)
	table.insert(fields, license)
	return linguistic.conj(fields, lang, "comma")
end

function p.citeitem(item, lang, page)
	if not item then return nil end
	if type(item) == 'string' then
		item = mw.wikibase.getEntityObject(item)
	end
	if not item then
		return "invalid item id"
	end
	if wikidata.getClaims({entity = item, property = 'P1433'}) then -- if item has "edition of" is a book, else an article, needs a better solution
		return citearticle(item, lang, page)
	else
		mw.log('Citing as book')
		return citebook(item, lang, page)
	end
end

function p.cite(frame)
	local lang = frame.args.lang
	if not lang or lang == '' then
		lang = frame:preprocess('{{int:lang}}')
	end
	local page = frame.args.page
	if page == '' then
		page = nil
	end
	return p.citeitem(frame.args.item, lang, page)
end

function p.reflist(frame)
	local list = mw.text.split( frame.args[1], ' ')
	local lang = frame.args.lang
	if not lang or lang == '' then
		lang = frame:preprocess('{{int:lang}}')
	end
	local str = ''
	for i, j in pairs(list) do
		str = str ..  '&lt;li&gt; ' .. p.citeitem(mw.text.trim(j),lang) .. '&lt;/li&gt;'
	end
	return str
end

return p</text>
      <sha1>gqcoe5iexj6hpccdyeg9c9q0c5gj8xy</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Calendar</title>
    <ns>828</ns>
    <id>41895141</id>
    <revision>
      <id>563186579</id>
      <timestamp>2017-09-21T14:09:58Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <comment>copy from Commons</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="3316" xml:space="preserve">local p = {}

-- Convert "Julian day number" (jdn) to a calendar date
-- "gregorian" is a 1 for gregorian calendar and 0 for Julian
-- based on https://en.wikipedia.org/wiki/Julian_day#Converting_Julian_or_Gregorian_calendar_date_to_Julian_day_number
function p._jdn2date(jdn, gregorian)
  local f, e, g, h, year, month, day

	f = jdn + 1401
	if gregorian&gt;0 then
		 f = f + math.floor((math.floor((4*jdn + 274277) / 146097) * 3) / 4) - 38
	end
	e = 4*f + 3
	g = math.floor(math.fmod(e, 1461) / 4)
	h = 5*g + 2
	day   = math.floor(math.fmod (h,153) / 5) + 1
	month = math.fmod (math.floor(h/153) + 2, 12) + 1
	year  = math.floor(e/1461) - 4716 + math.floor((14 - month) / 12)
	
	-- If year is less than 1, subtract one to convert from a zero based date system to the
	-- common era system in which the year -1 (1 B.C.E) is followed by year 1 (1 C.E.).
	if year &lt; 1 then
			year = year - 1
	end
	
	return string.format('%04i-%02i-%02i', year, month, day)
end

-- Convert calendar date to  "Julian day number" (jdn) 
-- "gregorian" is a 1 for gregorian calendar and 0 for Julian
-- based on  https://en.wikipedia.org/wiki/Julian_day#Converting_Julian_or_Gregorian_calendar_date_to_Julian_day_number
-- explanation based on http://www.cs.utsa.edu/~cs1063/projects/Spring2011/Project1/project1.html
function p._date2jdn(ISOdate, gregorian)
  
	year, month, day = ISOdate:match( "(-?%d%d%d%d)-(%d%d)-(%d%d)" )
	if not year then
		return nil
	elseif tonumber(year) &lt; 0 then
		-- If year is less than 0, add one to convert from  the common era system in which
	    -- the year -1 (1 B.C.E) is followed by year 1 (1 C.E.) to a zero based date system
		year = year + 1
	end
	a = math.floor((14-month) / 12) -- will be 1 for January and February, and 0 for other months.
	y = year + 4800 - a             -- years since year –4800
	m = month + 12*a - 3            -- month number where 10 for January, 11 for February, 0 for March, 1 for April
	c = math.floor((153*m + 2)/5)   -- number of days since March 1
	if gregorian&gt;0 then	
		b = math.floor(y/4) - math.floor(y/100) + math.floor(y/400) -- number of leap years since y==0 (year –4800)
		d = 32045                     -- offset so the result will be 0 for January 1, 4713 BCE
	else
		b = math.floor(y/4)           -- number of leap years since y==0 (year –4800)
	  d = 32083                     -- offset so the result will be 0 for January 1, 4713 BCE
	end
	return day + c + 365*y + b - d
end

-- Convert a date from Gregorian to Julian calendar
function p.Gregorian2Julian(frame)
	local JDN = p._date2jdn(frame.args[1], 1)
	if JDN then
		return p._jdn2date(JDN, 0)
	else
		return "Error parsing input date: " .. frame.args[1]
	end
end

-- Convert a date from Julian to Gregorian calendar
function p.Julian2Gregorian(frame)
	local JDN = p._date2jdn(frame.args[1], 0)
	if JDN then
		return p._jdn2date(JDN, 1)
	else
		return "Error parsing input date: " .. frame.args[1]
	end
end

-- Return day of week based on gregorian date. Mon-&gt;1, Tue-&gt;2, ..., Sun-&gt;7
function p.DayOfWeek(frame)
	local JDN = p._date2jdn(frame.args[1], 1)
	local day = math.fmod(JDN, 7) + 1
	if day then
		local LUT = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }
		return LUT[day]
	else
		return "Error parsing input date: " .. frame.args[1]
	end
end

return p</text>
      <sha1>c2rk6thnmw3vorhwxqxd7afxvv5e75f</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Module-nav/tab3</title>
    <ns>10</ns>
    <id>58869967</id>
    <revision>
      <id>795502518</id>
      <parentid>795454942</parentid>
      <timestamp>2018-11-21T17:10:55Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Module-nav/tab3]]": Used in the edit interface ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="274" xml:space="preserve">&lt;onlyinclude&gt;&lt;span style="display:inline-block; padding:0 1px 0 0; {{linear-gradient|top|#d6d4c7 0%, #c4bb8b 100%}};"&gt;&lt;span style="display:inline-block;{{linear-gradient|top|#fefcea 0%, #ede3a6 100%}}; padding:.8em;"&gt;{{{text}}}&lt;/span&gt;&lt;/span&gt;&lt;/onlyinclude&gt;

{{documentation}}</text>
      <sha1>1fimak0vvy99da6vtmczo7l47oc53y3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Module-nav/tab2</title>
    <ns>10</ns>
    <id>58869954</id>
    <revision>
      <id>795502275</id>
      <parentid>795454873</parentid>
      <timestamp>2018-11-21T17:10:28Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Module-nav/tab2]]": Used in the edit interface ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="274" xml:space="preserve">&lt;onlyinclude&gt;&lt;span style="display:inline-block; padding:0 1px 0 0; {{linear-gradient|top|#c4ceb9 0%, #a8b79a 100%}};"&gt;&lt;span style="display:inline-block;{{linear-gradient|top|#ebf7de 0%, #cee0bc 100%}}; padding:.8em;"&gt;{{{text}}}&lt;/span&gt;&lt;/span&gt;&lt;/onlyinclude&gt;

{{documentation}}</text>
      <sha1>gnh10kwwkn5hofxk2esw3ypuo6uqgyx</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Module-nav/tab</title>
    <ns>10</ns>
    <id>58869923</id>
    <revision>
      <id>795502009</id>
      <parentid>795454682</parentid>
      <timestamp>2018-11-21T17:09:56Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Module-nav/tab]]": Used in the edit interface ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="300" xml:space="preserve">&lt;onlyinclude&gt;&lt;span style="display:inline-block; padding:0 1px 0 0; {{linear-gradient|top|#d9dcdd 0%, #bfc7cc 50%, #aab8bf 100%}};"&gt;&lt;span style="display:inline-block;{{linear-gradient|top|#f2f6f8 0%, #d8e1e7 50%, #c3d4dd 100%}}; padding:.8em;"&gt;{{{text}}}&lt;/span&gt;&lt;/span&gt;&lt;/onlyinclude&gt;

{{documentation}}</text>
      <sha1>eowjz6in045mvypy434fys1qry4wl9o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Module-nav/i18n</title>
    <ns>10</ns>
    <id>58869983</id>
    <revision>
      <id>997698424</id>
      <parentid>870234453</parentid>
      <timestamp>2019-08-17T13:14:39Z</timestamp>
      <contributor>
        <username>Putnik</username>
        <id>4100</id>
      </contributor>
      <comment>+ru</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="949" xml:space="preserve">{{#switch:{{lc:{{{1|}}}}}

|subpages = {{LangSwitch
  |en=Subpages
  |ja=サブページ一覧
  |pl=Podstrony
  |ru=Подстраницы
  |sv=Undersidor
  |zh-hans=子页面
  |zh-hant=子頁面
}}

|link count= {{LangSwitch
  |en=Link count
  |ja=使用数
  |pl=Liczba linków
  |ru=Число ссылок
  |sv=Antal länkar
  |zh-hans=链接计数
  |zh-hant=連結計數
}}

|tests= {{LangSwitch
  |en=Tests
  |ja=テストケース
  |pl=Testowanie
  |ru=Тесты 
  |sv=Test
  |zh-hans=文字
  |zh-hant=文字
}}

|live= {{LangSwitch
  |en=Live code
  |ja=ライブコード
  |pl=Opublikowany kod
  |ru=Текущий код
  |sv=Aktuell kod
  |zh-hans=在线程序代码
  |zh-hant=線上程式代碼
}}

|documentation= {{LangSwitch
  |en=Documentation
  |ja=解説
  |pl=Dokumentacja
  |ru=Документация
  |sv=Dokumentation
  |zh-hans=说明文档
  |zh-hant=說明文件
}}

}}&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>77j7rlrgslf2s70yrrngj7yuopeawtb</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Module-nav</title>
    <ns>10</ns>
    <id>58869784</id>
    <revision>
      <id>1071589557</id>
      <parentid>798992465</parentid>
      <timestamp>2019-12-07T22:49:38Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <minor/>
      <comment>remove colon after "Subpages" (see talk page)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1679" xml:space="preserve">&lt;span class="plainlinks"&gt;&lt;!--

--&gt; &lt;!-- === Section # 1: Code, Discussion, Edit, history, links, Link count, QuickTest ===

--&gt;[[Module:{{{module|File}}}#com-module-code|{{Module-nav/tab|text={{int:Syntaxhighlight-visualeditor-mwsyntaxhighlightinspector-code}} }}]]&lt;!--
--&gt;[[:Module talk:{{ROOTPAGENAME:Module:{{{module|File}}}}}|{{Module-nav/tab|text={{int:talk}}}}]]&lt;!--
--&gt;[{{fullurl:Special:WhatLinksHere/:Module:{{{module|File}}}|limit=999}} {{Module-nav/tab|text={{Ucfirst:{{Int:Wikibase-diffview-link}}}}}}]&lt;!--
--&gt;[https://tools.wmflabs.org/templatecount/index.php?lang=commons&amp;namespace=828&amp;name={{ROOTPAGENAMEE:Module:{{{module|File}}}}} {{Module-nav/tab|text={{Module-nav/i18n|Link count}}}}]&lt;!--

--&gt; &lt;!-- === Section # 2: Subpages, Documentation, tests, results, sandbox ===

--&gt;[[Special:PrefixIndex/Module:{{ROOTPAGENAME:Module:{{{module|File}}}}}|{{Module-nav/tab2|text={{Module-nav/i18n|Subpages}}}}]]&lt;!--
--&gt;[[Special:MyLanguage/Module:{{ROOTPAGENAME:Module:{{{module|File}}}}}/doc|{{Module-nav/tab2|text={{Module-nav/i18n|documentation}} }}]]&lt;!--
--&gt;[[Module:{{{module|File}}}/testcases|{{Module-nav/tab2|text={{Module-nav/i18n|tests}}}}]]&lt;!--
--&gt;[[Module talk:{{{module|File}}}/testcases|{{Module-nav/tab2|text={{int:Apisandbox-results}} }}]]&lt;!--
--&gt;[[Module:{{ROOTPAGENAME:Module:{{{module|File}}}}}/sandbox|{{Module-nav/tab2|text={{int:Sandboxlink-portlet-label}}}}]]&lt;!--
--&gt;[[Module:{{ROOTPAGENAME:Module:{{{module|File}}}}}|{{Module-nav/tab2|text={{Module-nav/i18n|live}} }}]]&lt;!--

--&gt; &lt;!-- === Section # 3: All modules ===

--&gt;[[Special:PrefixIndex/Module:|{{Module-nav/tab3|text=All modules}}]]&lt;!--
--&gt;&lt;/span&gt;&lt;noinclude&gt;

{{documentation}}

&lt;/noinclude&gt;</text>
      <sha1>kbse418r81afnhb94ug0rauc7lequdh</sha1>
    </revision>
  </page>
  <page>
    <title>Template:LuaLogo</title>
    <ns>10</ns>
    <id>58871804</id>
    <revision>
      <id>795467114</id>
      <parentid>795466266</parentid>
      <timestamp>2018-11-21T16:10:47Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:LuaLogo]]": Used in the edit interface: used at [[MediaWiki:Scribunto-doc-page-show]] ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="979" xml:space="preserve">&lt;onlyinclude&gt;&lt;div style="position:relative"&gt;
&lt;div style="width:{{#expr:{{{s|150}}}}}px;height:{{#expr:{{{s|150}}}}}px;{{border-radius|50%}};background-color:#19198A"&gt;&lt;/div&gt;
&lt;div style="position:absolute;top:{{#expr:{{{s|150}}}*0.4}}px;color:#fff;font-family:Helvetica,Arial,sans-serif;font-weight:bold;font-size:{{#expr:{{{s|150}}}*0.525}}px;line-height:{{#expr:{{{s|150}}}*0.525}}px;"&gt;Lua&lt;/div&gt;
&lt;div style="width:{{#expr:{{{s|150}}}*0.267}}px;height:{{#expr:{{{s|150}}}*0.267}}px;{{border-radius|50%}};background-color:#fff;position:absolute;top:{{#expr:{{{s|150}}}*0.034+( &lt;!--radius--&gt;( (&lt;!--total_w--&gt;{{{s|150}}} - &lt;!--self_w--&gt;{{{s|150}}}*0.267)/2 - &lt;!--padding--&gt;{{{s|150}}}*0.034 )*(1-0.707106781186548) )}}px;left:{{#expr:(({{{s|150}}}-({{{s|150}}}*0.267))/2)+( &lt;!--radius--&gt;( (&lt;!--total_w--&gt;{{{s|150}}} - &lt;!--self_w--&gt;{{{s|150}}}*0.267)/2 - &lt;!--padding--&gt;{{{s|150}}}*0.034 )*&lt;!--rotation matrix--&gt;(0.707106781186548) )}}px"&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/onlyinclude&gt;

{{documentation}}</text>
      <sha1>2jcp4hda3jtuwj8cmzgl06uyqiyhk7z</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Linear-gradient</title>
    <ns>10</ns>
    <id>8520</id>
    <revision>
      <id>248299849</id>
      <parentid>34205199</parentid>
      <timestamp>2015-09-06T19:14:50Z</timestamp>
      <contributor>
        <username>Edokter</username>
        <id>120978</id>
      </contributor>
      <comment>Update</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="579" xml:space="preserve">&lt;includeonly&gt;background-image: -moz-linear-gradient({{{1|}}}, {{{2|}}}); background-image: -o-linear-gradient({{{1|}}}, {{{2|}}}); background-image: -webkit-linear-gradient({{{1|}}}, {{{2|}}}); background-image: linear-gradient({{#switch: {{{1|}}}
| top = to bottom
| bottom = to top
| left = to right
| right = to left
| top left
| left top = to bottom right
| top right
| right top = to bottom left
| bottom left
| left bottom = to top right
| bottom right
| right bottom = to top left
| #default = {{{1}}}
}}, {{{2|}}});&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>d9q5b9t0m89azbiekg3lqbh549l2re0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Border-radius</title>
    <ns>10</ns>
    <id>8529</id>
    <revision>
      <id>34205114</id>
      <parentid>489573</parentid>
      <timestamp>2013-05-03T05:37:25Z</timestamp>
      <contributor>
        <username>Razr Nation</username>
        <id>72278</id>
      </contributor>
      <minor/>
      <comment>8 revisions from [[:en:Template:Border-radius]]: Import</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="291" xml:space="preserve">&lt;includeonly&gt;-moz-border-radius: {{{1|8px}}}; -webkit-border-radius: {{{1|8px}}}; border-radius: {{{1|8px}}};&lt;/includeonly&gt;&lt;noinclude&gt;

&lt;!-- ADD CATEGORIES AND INTERWIKIS TO THE /doc PAGE, NOT HERE, THANKS --&gt;
{{documentation}}
[[Category:Cross-browser compatibility templates]]
&lt;/noinclude&gt;</text>
      <sha1>856bf0g6j80ywd2nt002lhapki57ah5</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Capitalize</title>
    <ns>828</ns>
    <id>25940912</id>
    <revision>
      <id>333880118</id>
      <parentid>327538585</parentid>
      <timestamp>2016-05-08T21:08:10Z</timestamp>
      <contributor>
        <username>TomT0m</username>
        <id>7333</id>
      </contributor>
      <comment>cap after the tags</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="518" xml:space="preserve">
local p = {}

function p.cap(str)
	lang = mw.getContentLanguage()
	if lang:ucfirst(str) ~= str then
		return lang:ucfirst(str)
	else
		local substr = mw.ustring.sub 
		b, e = mw.ustring.find(str, "&gt;%s*%a")
		while e ~= nil do
			if mw.ustring.find("&gt;", substr(str, b,e)) == nil then 
				return substr(str, 1, e-1) .. lang:ucfirst(substr(str,e,e)) ..substr(str, e+1)
			end
			b, e = mw.ustring.find(str, "&gt;%s*%a", e)
		end
		return str
	end
end

function p.capitalize(frame) return p.cap(frame.args[1]) end

return p</text>
      <sha1>oi3oo9q42s5okxrm5hbfy01zk32pehp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:SQID</title>
    <ns>10</ns>
    <id>26259378</id>
    <revision>
      <id>1233859301</id>
      <parentid>1227690908</parentid>
      <timestamp>2020-07-18T14:13:28Z</timestamp>
      <contributor>
        <username>MisterSynergy</username>
        <id>44949</id>
      </contributor>
      <comment>move URL to https://sqid.toolforge.org</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="993" xml:space="preserve">&lt;!--
--&gt;{{#if: {{{Q|}}}
| {{Q|1={{{Q|}}}}}&amp;#32;
}}&lt;!--
--&gt;{{#if: {{{P|}}}
| {{P|1={{{P|}}}}}&amp;#32;
}}&lt;!--
--&gt;{{#if: {{{2|}}}
| &lt;span class="plainlinks"&gt;[https://sqid.toolforge.org/#{{#if: {{{1|}}}{{{Q|}}}{{{P|}}}
  | /view?id={{#if: {{{1|}}}
    | {{{1|}}}
    | {{#if: {{{Q|}}}
      | Q{{#titleparts:{{{Q|}}}}}
      | P{{#titleparts:{{{P|}}}}}
      }}
    }}&amp;amp;lang={{Int:Lang}}
  | /?lang={{Int:Lang}}
  }} {{{2|}}}]&lt;/span&gt;&amp;nbsp;
}}&lt;!--
--&gt;[[File:SQID logo.svg|25px|{{TranslateThis
|ast=Ver con SQID
|bn=SQID দিয়ে দেখুন
|ca=Mostra amb SQID
|de=Mit SQID betrachten
|en=View with SQID
|es=Ver con SQID
|fr=Voir avec SQID
|it=Vedi con SQID
|mk=Погледајте со SQID
|pt=Visualizar com SQID
}}|link=https://sqid.toolforge.org/#/{{#if: {{{1|}}}{{{Q|}}}{{{P|}}}
| view?id={{#if: {{{1|}}}
  | {{{1|}}}
  | {{#if: {{{Q|}}}
    | Q{{{Q}}}
    | P{{{P}}}
    }}
  }}&amp;lang={{Int:Lang}}
| &lt;nowiki/&gt;?lang={{Int:Lang}}
}}]]&lt;!--
--&gt;&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>j6wq5aq6l7wsi92xtysclan6m8dprov</sha1>
    </revision>
  </page>
  <page>
    <title>Template:SPARQL2/doc</title>
    <ns>10</ns>
    <id>35750675</id>
    <revision>
      <id>529971156</id>
      <parentid>529970027</parentid>
      <timestamp>2017-08-01T08:57:13Z</timestamp>
      <contributor>
        <username>D1gggg</username>
        <id>2767875</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="439" xml:space="preserve">&lt;nowiki&gt;{{SPARQL2|start=3|highlight=1|query=3}}&lt;/nowiki&gt;

{{SPARQL2
|highlight=1
|start=3
|query=3
}}

&lt;nowiki&gt;{{SPARQL2|highlight=2|query=1 2}}&lt;/nowiki&gt;

{{SPARQL2
|highlight=2
|query=
1
2
}}

&lt;nowiki&gt;{{SPARQL2|nohints=test|query=...}}&lt;/nowiki&gt;

{{SPARQL2
|nohints=test
|query=SELECT ?pop WHERE {
   wd:Q2807 wdt:P1082 ?pop
}
}}

&lt;nowiki&gt;{{SPARQL2|query=...}}&lt;/nowiki&gt;

{{SPARQL2
|query=SELECT ?pop WHERE {
   wd:Q2807 wdt:P1082 ?pop
}
}}</text>
      <sha1>dgxws0n8lqoyq3j5bazdxj8w123yiws</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Reasonator</title>
    <ns>10</ns>
    <id>17365939</id>
    <revision>
      <id>1233857295</id>
      <parentid>1227693285</parentid>
      <timestamp>2020-07-18T14:09:29Z</timestamp>
      <contributor>
        <username>MisterSynergy</username>
        <id>44949</id>
      </contributor>
      <comment>move URL to https://reasonator.toolforge.org; remove "test/" from path as it seems to work perfectly without</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="800" xml:space="preserve">{{#if: {{{2|}}}
| &lt;span class="plainlinks"&gt;[https://reasonator.toolforge.org/?q={{{1|}}}&amp;lang={{Int:Lang}} {{{2|}}}]&lt;/span&gt;
}}&amp;#x202F;[[File:Wikidata-Reasonator small logo.svg|12px|{{TranslateThis
|ast = Ver con Reasonator
|be-tarask = Праглядзець у Рэзанатары
|bn = Reasonator দিয়ে দেখুন
|ca = Mostra amb Reasonator
|de = Im Reasonator betrachten
|en = View with Reasonator
|es = Ver con Reasonator
|fr = Voir avec Reasonator
|fi = Katso Reasonatorissa
|it = Vedi con Reasonator
|mk = Погледајте со Резонатор
|pt = Visualizar com Reasonator
|ru = Смотреть через Reasonator
|uk = Дивитись у Reasonator
}}|link=https://reasonator.toolforge.org/?q={{{1|}}}&amp;lang={{Int:Lang}}]]&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>rb06gc76q0zj0d5viva7svq6b903lr5</sha1>
    </revision>
  </page>
  <page>
    <title>Template:ItemOrNot</title>
    <ns>10</ns>
    <id>28161695</id>
    <revision>
      <id>361346548</id>
      <parentid>361300782</parentid>
      <timestamp>2016-08-02T21:22:10Z</timestamp>
      <contributor>
        <username>Smalyshev (WMF)</username>
        <id>1482806</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="384" xml:space="preserve">{{#if: {{{2|}}} | * {{{1}}}: {{{2|}}} | }}&lt;noinclude&gt;
&lt;templatedata&gt;
{
	"params": {
		"1": {
			"label": "List item name",
			"type": "string",
			"required": true
		},
		"2": {
			"description": "List item contents",
			"type": "string"
		}
	},
	"description": "Displays list item if second argument is not empty, otherwise nothing",
	"format": "block"
}
&lt;/templatedata&gt;
&lt;/noinclude&gt;</text>
      <sha1>230nkvb4w9pmw09vu3optxajqkjdr42</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Int properties</title>
    <ns>10</ns>
    <id>25941214</id>
    <revision>
      <id>1391049900</id>
      <parentid>1224584398</parentid>
      <timestamp>2021-03-27T15:59:33Z</timestamp>
      <contributor>
        <username>Joseph</username>
        <id>139110</id>
      </contributor>
      <comment>+tur</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="631" xml:space="preserve">&lt;noinclude&gt;{{doc}}&lt;/noinclude&gt;{{TranslateThis
|be-tarask=уласьцівасьці
|bn=বৈশিষ্ট্যসমূহ
|da=egenskaber
|de=Eigenschaften
|el=ιδιότητες
|en=properties
|en-gb=properties
|eo=ecoj
|es=propiedades
|fr=propriétés
|hu=tulajdonságok
|it=proprietà
|ja=プロパティ
|ko=속성들
|mk=својства
|nb=egenskaper
|nl=eigenschappen
|nn=eigenskapar
|pl=właściwości
|pt=propriedades
|pt-br=propriedades
|ru=свойства
|sq=tiparet
|sr=својства
|sv=egenskaper
|th=คุณลักษณะ
|tr=özellikler
|uk=властивості
|zh-hans=属性
|zh-hant=屬性
}}</text>
      <sha1>8publ6qno1pwv1hls1ae2cxh9qnjpv3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Int items</title>
    <ns>10</ns>
    <id>28641837</id>
    <revision>
      <id>1391523958</id>
      <parentid>1319138833</parentid>
      <timestamp>2021-03-28T09:51:16Z</timestamp>
      <contributor>
        <username>Joseph</username>
        <id>139110</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="407" xml:space="preserve">&lt;noinclude&gt;{{doc}}&lt;/noinclude&gt;{{
TranslateThis
|cy=pethe
|be-tarask=элемэнты
|ar=عناصر
|en=items
|en-gb=items
|de=Datenobjekte
|el=αντικείμενα
|fr=éléments
|hu=elemek
|id=butir
|it=elementi
|ja=項目
|nb=elementer
|nl=elementen
|nn=element
|pl=elementy
|pt=itens
|pt-br=itens
|ru=элементы
|sr=ставке
|sv=objekt
|tr=ögeler
|uk=елементи
|zh=项目
|...=...
}}</text>
      <sha1>7xqub5jdg1k43un6ty0ktosrcv1ijce</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Int Properties</title>
    <ns>10</ns>
    <id>25945270</id>
    <revision>
      <id>360948553</id>
      <parentid>360948486</parentid>
      <timestamp>2016-07-31T15:39:37Z</timestamp>
      <contributor>
        <username>Airon90</username>
        <id>4782</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="63" xml:space="preserve">&lt;noinclude&gt;{{doc}}&lt;/noinclude&gt;{{capitalize|{{int properties}}}}</text>
      <sha1>1f6bvc59pk8lngjngkff5ej07hrd17a</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Clear</title>
    <ns>10</ns>
    <id>12131100</id>
    <revision>
      <id>665474881</id>
      <parentid>91992232</parentid>
      <timestamp>2018-04-14T18:59:12Z</timestamp>
      <contributor>
        <username>Dataeast0000001</username>
        <id>2952466</id>
      </contributor>
      <comment>move onlyinclude to noinclude</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="79" xml:space="preserve">&lt;div style="clear:{{{1|both}}};"&gt;&lt;/div&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>5aa2j06l3n3husy1g6jggf6oznzocau</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Capitalize</title>
    <ns>10</ns>
    <id>24835143</id>
    <revision>
      <id>334950865</id>
      <parentid>327538791</parentid>
      <timestamp>2016-05-11T10:00:31Z</timestamp>
      <contributor>
        <username>TomT0m</username>
        <id>7333</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="100" xml:space="preserve">&lt;includeonly&gt;{{#invoke:Capitalize|capitalize|{{{1}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{doc}}
&lt;/noinclude&gt;</text>
      <sha1>08bgnnmlolmwjwag381zkq615fl2s0a</sha1>
    </revision>
  </page>
  <page>
    <title>Module:ConcatArgs</title>
    <ns>828</ns>
    <id>28974362</id>
    <revision>
      <id>436146785</id>
      <parentid>384576926</parentid>
      <timestamp>2017-01-25T21:03:58Z</timestamp>
      <contributor>
        <username>TomT0m</username>
        <id>7333</id>
      </contributor>
      <comment>bugfix (tria)</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="661" xml:space="preserve">
local p = {}

function table.slice(tbl, first, last, step)
  local sliced = {}
  
  for i = first or 1, last or #tbl, step or 1 do
    sliced[#sliced+1] = tbl[i]
  end

  return sliced
end

p.slice = table.slice

local function count_args(table)
	local nargs = 0
	for num, _ in ipairs(table) do
		nargs = math.max(num, nargs)
	end
	return nargs
end



function p.ConcatArgs(frame)
	local pargs = frame:getParent().args
	local init = tonumber(frame.args["init"]) or frame.args["init"]
	
	local slice = table.slice(
		pargs,
		tostring(frame.args["min"]),
		count_args(pargs)
	)
	table.insert(slice, 1, pargs[init])
	return table.concat(slice, "|")
end

return p</text>
      <sha1>jhipvizmrz3awgzr5ggd7tq4x3c485u</sha1>
    </revision>
  </page>
  <page>
    <title>Template:SPARQLText</title>
    <ns>10</ns>
    <id>23033014</id>
    <revision>
      <id>1399250943</id>
      <parentid>1399250772</parentid>
      <timestamp>2021-04-10T14:44:00Z</timestamp>
      <contributor>
        <ip>87.126.92.234</ip>
      </contributor>
      <comment>Undid revision 1399250772 by [[Special:Contributions/87.126.92.234|87.126.92.234]] ([[User talk:87.126.92.234|talk]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="340" xml:space="preserve">{{#if:{{{p|}}}{{{v|}}}{{{q|}}}{{{extraprefix|}}}|
{{If||{{{p|}}}|
PREFIX p: &lt;http://www.wikidata.org/prop/&gt;|}}{{If||{{{q|}}}|
PREFIX q: &lt;http://www.wikidata.org/prop/qualifier/&gt;|}}{{If||{{{v|}}}|
PREFIX v: &lt;http://www.wikidata.org/prop/statement/&gt;|}}{{If||{{{extraprefix|}}}|
{{{extraprefix}}}|}}
}}{{{query}}}&lt;noinclude&gt;{{doc}}&lt;/noinclude&gt;</text>
      <sha1>f35rnwtdn4sdogbp73jb3irfk0cvqp7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:SPARQL/doc</title>
    <ns>10</ns>
    <id>23333441</id>
    <revision>
      <id>1324784223</id>
      <parentid>1083324716</parentid>
      <timestamp>2020-12-18T14:43:08Z</timestamp>
      <contributor>
        <username>Jhawkinson</username>
        <id>1508084</id>
      </contributor>
      <comment>/* See also*/ SPARQL2, SPARQL Inline</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3392" xml:space="preserve">{{Documentation subpage}}
&lt;!-- Categories go at the bottom of this page. --&gt;

== Usage ==
&lt;templatedata&gt;
{
	"params": {
		"p": {
			"label": "p",
			"description": "Produce p: prefix if set",
			"type": "boolean"
		},
		"q": {
			"label": "q",
			"description": "Produce q: prefix if set",
			"type": "boolean"
		},
		"v": {
			"label": "v",
			"description": "Produce v: prefix if set",
			"type": "boolean"
		},
		"query": {
			"required": true,
			"label": "query",
			"description": "SPARQL query",
			"example": "SELECT * WHERE { ?x wdt:P31 wd:Q5 } LIMIT 1",
			"type": "string"
		},
		"extraprefix": {
			"description": "Extra prefixes to be added",
			"example": "PREFIX wikibase: &lt;http://wikiba.se/ontology#&gt;",
			"type": "string"
		},
		"state": {
			"description": "Either \"collapsed\" or \"expanded\", both make the query code collapsible, \"collapsed\" makes it start collapsed. In a list (\"*\" or \"#\" at beginning of line) the \"Collapse\"/\"Expand\" toggle button is displayed next to the link to the Wikidata Query Service.",
			"type": "string"
		},
		"label": {
			"description": "Text to be used as the label of the link to the Wikidata Query Service",
			"type": "content",
			"default": "Try it!"
		},
		"shortURL": {
			"description": "slug of the query's short URL, as generated by the WMF URL shortener - for example, for https://w.wiki/37j enter just 37j",
			"type": "string"
		},
		"project": {
			"required": false,
			"label": "project",
			"description": "project name: '''wd''' for Wikidata and '''sdc''' for Structured Data on Commons",
			"type": "string"
		}
	},
	"description": "This template displays SPARQL query with syntax highlighting, prefixes and link to WDQS beta site to run the query. ",
	"paramOrder": [
		"query",
		"p",
		"q",
		"v",
		"extraprefix",
		"state",
		"label",
		"shortURL",
		"project"
	]
}
&lt;/templatedata&gt;

== {{Int Examples}}==
* &lt;nowiki&gt;{{SPARQL|query=SELECT DISTINCT ?person ?name ?language ?death (URI(CONCAT("https://www.gutenberg.org/ebooks/author/", ?gutenberg)) AS ?gberglink) WHERE {
  ?person wdt:P1938 ?gutenberg.
  ?person wdt:P570 ?death. # Dead people only
  MINUS {
    ?enws schema:about ?person.
    ?enws schema:isPartOf &lt;https://en.wikisource.org/&gt;
  }
  OPTIONAL {?person wdt:P1412 ?lang}.
  FILTER (!BOUND(?lang) {{!}}{{!}} ?lang = wd:Q1860) # Language: English or absent
  BIND(IF(BOUND(?lang),"English","Not specified") AS ?language
)  ?person rdfs:label ?name.
  FILTER((LANG(?name)) = "en")
}
ORDER BY ?death
|shortURL=37j}}&lt;/nowiki&gt;
{{SPARQL|query=SELECT DISTINCT ?person ?name ?language ?death (URI(CONCAT("https://www.gutenberg.org/ebooks/author/", ?gutenberg)) AS ?gberglink) WHERE {
  ?person wdt:P1938 ?gutenberg.
  ?person wdt:P570 ?death. # Dead people only
  MINUS {
    ?enws schema:about ?person.
    ?enws schema:isPartOf &lt;https://en.wikisource.org/&gt;
  }
  OPTIONAL {?person wdt:P1412 ?lang}.
  FILTER (!BOUND(?lang) {{!}}{{!}} ?lang = wd:Q1860) # Language: English or absent
  BIND(IF(BOUND(?lang),"English","Not specified") AS ?language
)  ?person rdfs:label ?name.
  FILTER((LANG(?name)) = "en")
}
ORDER BY ?death
|shortURL=37j}}

== {{Int See also}} ==
* [[Wikidata:SPARQL query service]]
** {{tl|SPARQL2}}
** {{tl|SPARQL Inline}}
** {{tl|Wdquery}}
* WDQ
** {{tl|WDQ}}
** {{tl|WDQ2}}
** {{tl|Query}}

&lt;includeonly&gt;
&lt;!-- Categories go here: --&gt;
[[Category:Query template]]
&lt;/includeonly&gt;</text>
      <sha1>csafeyywanz63pqkzzegnj2u99974tc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Int try it</title>
    <ns>10</ns>
    <id>25022557</id>
    <revision>
      <id>1391022272</id>
      <parentid>1224616245</parentid>
      <timestamp>2021-03-27T15:13:08Z</timestamp>
      <contributor>
        <username>Joseph</username>
        <id>139110</id>
      </contributor>
      <minor/>
      <comment>+tur</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="912" xml:space="preserve">&lt;noinclude&gt;{{doc}}&lt;/noinclude&gt;{{TranslateThis
|ar=!تجربة
|ast=¡Pruébalo!
|be-tarask=Паспрабуйце!
|bn=এটি চেষ্টা করে দেখুন!
|ca=Prova-ho!
|cs=Zkuste to!
|cy-Ceisio!
|da=Prøv det!
|de=Versuche es!
|de-at|de-ch=Es kann versucht werden!
|de-formal=Versuchen Sie es!
|el=Δοκιμάστε το!
|en=Try it!
|en-gb=Try it!
|eo=Provu ĝin!
|es=¡Pruébalo!
|fi=Kokeile!
|fr=Essayez&amp;nbsp;!
|hu=Próbáld ki!
|hy=Փորձի՛ր
|id=Cobalah!
|it=Provalo!
|ja=試す!
|he=נסו את זה!
|ko=SPARQL 쿼리 실행하기
|lv=Izmēģini!
|mk=Пробајте!
|nl=Probeer!
|nb=Prøv selv!
|nn=Prøv sjølv
|pl=Wypróbuj!
|pt=Experimenta!
|pt-br=Experimente!
|ru=Выполнить запрос
|sq=Provoje
|sr=Испробајте!
|sv=Testa!
|th=ทดลองใช้
|tr=Deneyin!
|uk=Виконати!
|zh=试一试！
|zh-hans=试一试！
|zh-hant=試一試！
}}</text>
      <sha1>6yn5negysxotyujj0bfc3jk1ornfube</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Q/doc</title>
    <ns>10</ns>
    <id>15084360</id>
    <revision>
      <id>1276206149</id>
      <parentid>1276206076</parentid>
      <timestamp>2020-09-12T13:23:45Z</timestamp>
      <contributor>
        <username>Pigsonthewing</username>
        <id>4279</id>
      </contributor>
      <comment>/* QB */ nulle dit</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2182" xml:space="preserve">{{Documentation subpage}}
&lt;!-- Categories and interwikis go at the bottom of this page. --&gt;

== Usage ==
{{tl|Q}} is used to get an automatically localized link to an item; {{tl|QT}} links to the item's talk page; {{tl|QB}} links to both. A variety of alternative templates is also available; see list below.

For example:

=== Q ===

*&lt;nowiki&gt;{{Q|42}}&lt;/nowiki&gt; → {{Q|42}}
*&lt;nowiki&gt;{{Q|Q42}}&lt;/nowiki&gt; → {{Q|Q42}}
*&lt;nowiki&gt;{{Q|Q42|capitalization=uc}}&lt;/nowiki&gt; → {{Q|Q42|capitalization=uc}}
*&lt;nowiki&gt;{{Q|Q42|capitalization=lc}}&lt;/nowiki&gt; → {{Q|Q42|capitalization=lc}}
*&lt;nowiki&gt;{{Q|Q42|capitalization=lcfirst}}&lt;/nowiki&gt; → {{Q|Q42|capitalization=lcfirst}}

=== QT ===

*&lt;nowiki&gt;{{QT|42}}&lt;/nowiki&gt; → {{QT|42}}
*&lt;nowiki&gt;{{QT|Q42}}&lt;/nowiki&gt; → {{QT|Q42}}
*&lt;nowiki&gt;{{QT|Q42|capitalization=uc}}&lt;/nowiki&gt; → {{QT|Q42|capitalization=uc}}
*&lt;nowiki&gt;{{QT|Q42|capitalization=lc}}&lt;/nowiki&gt; → {{QT|Q42|capitalization=lc}}
*&lt;nowiki&gt;{{QT|Q42|capitalization=lcfirst}}&lt;/nowiki&gt; → {{QT|Q42|capitalization=lcfirst}}

&lt;br&gt;
=== QB ===

*&lt;nowiki&gt;{{QB|42}}&lt;/nowiki&gt; → {{QB|42}}
*&lt;nowiki&gt;{{QB|Q42}}&lt;/nowiki&gt; → {{QB|Q42}}
*&lt;nowiki&gt;{{QB|Q42|capitalization=uc}}&lt;/nowiki&gt; → {{QB|Q42|capitalization=uc}}
*&lt;nowiki&gt;{{QB|Q42|capitalization=lc}}&lt;/nowiki&gt; → {{QB|Q42|capitalization=lc}}
*&lt;nowiki&gt;{{QB|Q42|capitalization=lcfirst}}&lt;/nowiki&gt; → {{QB|Q42|capitalization=lcfirst}}

== TemplateData ==
&lt;templatedata&gt;
{
	"description": {
		"en": "Displays an item label in user language and a link to its wikipage",
		"de": "Diese Vorlage zeigt eine Bezeichnung in der Benutzersprache an, und verlinkt ihr Wikiseite",
		"fr": "Affiche le le label et un lien vers la page d’un item"
	},
	"params": {
		"1": {
			"label": {
				"en": "item",
				"de": "Objekt",
				"fr": "item"
			},
			"description": {
				"en": "The item to show",
				"de": "Das anzuzeigende Objekt",
				"fr": "L’item à afficher"
			},
			"type": "wiki-page-name",
			"required": true
		},
		"capitalization": {
			"label": {
				"en": "capitalization"
			},
			"type": "line"
		}
	}
}
&lt;/templatedata&gt;

== See also ==

{{Entity description templates}}

&lt;includeonly&gt;
&lt;!-- Categories and interwikis go here: --&gt;

&lt;/includeonly&gt;</text>
      <sha1>hwh5kcqduy6hhq7ijflsecm1f2es4cb</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Yesno</title>
    <ns>828</ns>
    <id>16757118</id>
    <revision>
      <id>1340914962</id>
      <parentid>1331514050</parentid>
      <timestamp>2021-01-14T13:56:14Z</timestamp>
      <contributor>
        <username>Sannita</username>
        <id>3223</id>
      </contributor>
      <minor/>
      <comment>2 revisions imported from [[:en:Module:Yesno]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="745" xml:space="preserve">-- Function allowing for consistent treatment of boolean-like wikitext input.
-- It works similarly to the template {{yesno}}.

return function (val, default)
	-- If your wiki uses non-ascii characters for any of "yes", "no", etc., you
	-- should replace "val:lower()" with "mw.ustring.lower(val)" in the
	-- following line.
	val = type(val) == 'string' and val:lower() or val
	if val == nil then
		return nil
	elseif val == true 
		or val == 'yes'
		or val == 'y'
		or val == 'true'
		or val == 't'
		or val == 'on'
		or tonumber(val) == 1
	then
		return true
	elseif val == false
		or val == 'no'
		or val == 'n'
		or val == 'false'
		or val == 'f'
		or val == 'off'
		or tonumber(val) == 0
	then
		return false
	else
		return default
	end
end</text>
      <sha1>swdskn7svew8i9wuydn9uj5l3r2ghcs</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Wikidata label</title>
    <ns>828</ns>
    <id>59108317</id>
    <revision>
      <id>1341336734</id>
      <parentid>1341331735</parentid>
      <timestamp>2021-01-15T03:24:23Z</timestamp>
      <contributor>
        <username>Mahir256</username>
        <id>203574</id>
      </contributor>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="18138" xml:space="preserve">--[[
  __  __           _       _      __        ___ _    _     _       _          _       _          _
 |  \/  | ___   __| |_   _| | ___ \ \      / (_) | _(_) __| | __ _| |_ __ _  | | __ _| |__   ___| |
 | |\/| |/ _ \ / _` | | | | |/ _ (_) \ /\ / /| | |/ / |/ _` |/ _` | __/ _` | | |/ _` | '_ \ / _ \ |
 | |  | | (_) | (_| | |_| | |  __/_ \ V  V / | |   &lt;| | (_| | (_| | || (_| | | | (_| | |_) |  __/ |
 |_|  |_|\___/ \__,_|\__,_|_|\___(_) \_/\_/  |_|_|\_\_|\__,_|\__,_|\__\__,_| |_|\__,_|_.__/ \___|_|

This module is intended to be the engine behind "Template:Label".
This module was copied from Commons please ask for changes there.

Please do not modify this code without applying the changes first at "Module:Wikidata label/sandbox" and testing
at "Module:Wikidata label/testcases".

Authors and maintainers:
* User:Jarekt - original version

]]

require('Module:No globals') -- used for debugging purposes as it detects cases of unintended global variables

--=============================================
--=== Internal functions ======================
--=============================================

---------------------------------------------------------------------------
-- Normalize input arguments by converting them all to lower case and
-- replacing space with "_" in the argument name. Also empty strings are
-- converted to nils. Arguments are collected from arguments passed to the
-- module and if missing from the template that calls the module
local function getArgs(frame)
	local function normalize_input_args(input_args, output_args)
		for name, value in pairs( input_args ) do
			value = mw.text.trim(value) -- trim whitespaces from the beggining and the end of the string
			if value ~= '' then -- nuke empty strings
				if type(name)=='string' then
					name = string.gsub( string.lower(name), ' ', '_')
				end
				output_args[name] = value
			end
		end
		return output_args
	end
	local args = {}
	args = normalize_input_args(frame:getParent().args, args)
	args = normalize_input_args(frame.args, args)
	return args
end

---------------------------------------------------------------------------
-- Function allowing for consistent treatment of boolean-like wikitext input.
-- It works similarly to Module:Yesno but does not assume val is a string
local function yesno(val, default)
	if type(val) == 'boolean' then
		return val
	elseif type(val) == 'number' then
		if val == 1 then
			return true
		elseif val == 0 then
			return false
		end
	elseif type(val) == 'string' then
		val = mw.ustring.lower(val)  -- put in lower case
		if val == 'no'  or val == 'n' or val == 'false' or val == '0' then
			return false
		elseif val == 'yes' or val == 'y' or val == 'true' or val == '1' then
			return true
		end
	end
	return default
end

-------------------------------------------------------------------------
-- get message in a given language
-- INPUTS:
-- * msg  - name of a message. For it to work [[MediaWiki:msg]] page need to be set up
-- * lang - translate message to language "lang"
-- * default - string to return in case this module is moved to a project where this message is not set
-- OUTPUT:
--  * translated message
local function getMessage(msg, lang, default)
	msg = mw.message.new(msg):inLanguage(lang):plain()
	return (msg == nil and default) or msg
end

---------------------------------------------------------------------------
-- use different sitelink call depending if you already have an entity or not
-- INPUTS:
--  * item and entity - entity id and entity: if full entity already uploded than use that
--                      otherwise use entity id to look up sitelink
--  * lang - language of the project
-- OUTPUT:
--  * sitelink
local function getSitelink(item, entity, lang)
	if entity and entity.getSitelink then -- if we have entity then use it
		return entity:getSitelink(lang .. 'wiki')
	else -- if no entity then use different function
		return mw.wikibase.getSitelink(item, lang .. 'wiki')
	end
end

---------------------------------------------------------------------------
-- use different sitelink call depending if you already have an entity or not
-- INPUTS:
--  * item and entity - entity id and entity: if full entity already uploded than use that
--                      otherwise use entity id to look up sitelink
--  * prop - property for which to return the best statment
-- OUTPUT:
--  * value of the best statment (only from the first one)
local function getBestStatementsValue(item, entity, prop)
	local statments
	if entity then
		statments = entity:getBestStatements(prop)
	else
		statments = mw.wikibase.getBestStatements(item, prop)
	end
	for _, statment in ipairs(statments) do
		if statment and statment.mainsnak.datavalue.value then
			return statment.mainsnak.datavalue.value
		end
	end
end

---------------------------------------------------------------------------
-- change capitalization of the label
-- INPUTS:
--  * label - label string
--  * capitalization - capitalization to be applied: allowed values are "lc",
--      "uc", "lcfirst", and "ucfirst". Any other value will return original string
--  * lang - language of the label
-- OUTPUT:
--  * value of the best statment (only from the first one)
local function apply_capitalization(label, capitalization, lang)
	capitalization = string.lower(capitalization or 'none')
	if capitalization == 'none' then
		return label
	elseif capitalization == 'uc' then
		return mw.ustring.upper(label)
	elseif capitalization == 'ucfirst' then
		return mw.language.new(lang):ucfirst(label)
	elseif capitalization == 'lc' then
		return mw.ustring.lower(label)
	elseif capitalization == 'lcfirst' then
		return mw.language.new(lang):lcfirst(label)
	end
	return label
end

--[[-------------------------------------------------------------------------
get link based on user preference
INPUTS:
* link_type - can be :
   * "wikidata" - link to wikidata
   * "wikipedia" - link to wikipedia (language dependent)
   * "wikidata talk" - link to wikidata talk page
   * "commons" - link to commons (try sitelink then commons category then commons gallery)
   * "commonscat" - link to commons (try commons category then commons gallery)
   * "-" - means no link
* item   - entity ID (always provided)
* entity - whole entity. It can be nil if whole entity is not loaded
* langList - language fallback list for preferred language (required)
OUTPUT:
* link - link to the wikimedia page
]]
local function getLink(link_type, item, entity, langList)
	local link, eLink
	link_type = mw.ustring.lower(link_type or '')
	local item_type = mw.ustring.sub(item, 1, 1) -- first letter prefix of item entity ID: 'Q', 'P' or 'M'
	if item_type == 'M' then
		eLink='c:Special:EntityPage/'..item
	elseif item_type == 'Q' then
		eLink='d:'..item -- wikibase entity page link
	elseif item_type == 'P' then
		eLink='d:Property:'..item -- wikibase entity page link
	else
		eLink='d:Special:EntityPage/'..item
	end
	if link_type == '-' then -- allow different link formats
		link = ''            -- no link
	elseif link_type == 'wikidata' or item_type == 'M' then
		link = eLink        -- link to wikibase entity page
	elseif link_type == 'wikidata talk' and item_type == 'P' then
		link = 'd:Property talk:'.. item        -- link to wikidata property talk page
	elseif link_type == 'wikidata talk' then
		link = 'd:Talk:'..item   -- link to wikidata talk page
	elseif link_type == 'commons' or link_type == 'commonscat' then
		--[[
		When link_type == 'commons' we try the following links (in specified order):
		  1) commons sitelink
		  2) P373 "Commons Category" claims
		  3) P935 "Commons Gallery"  claims
		Since most items have a commons sitelink we never have to look for claims
		When link_type == 'commonscat' we try to maximize chances of commons link being a category, so we
		      try the following links (in specified order):
		  1) commons sitelink, which is kept if it points to a category
		  2) P373 "Commons Category" claims
		  3) commons sitelink (which does not point to a category)
		  4) P935 "Commons Gallery"  claims
		Since most pages have a commons sitelink we never have to look for claims
		]]
		local sLink = getSitelink(item, entity, 'commons')  -- look for sitelink to commons
		if sLink then
			sLink = 'c:'..sLink
			if (link_type == 'commons') or (link_type == 'commonscat' and mw.ustring.find(sLink, 'Category:')) then
				link = sLink
			end
		end
		if not link then -- try linking to P373 "Commons Category"
			local cat = getBestStatementsValue(item, entity, 'P373')
			link = (cat ~= nil and 'c:Category:' .. cat) or nil
		end
		link = link or sLink
		if not link then -- try linking to P935 "Commons Gallery"
			link = getBestStatementsValue(item, entity, 'P935')
		end
	end
	if not link then -- apply default "Wikipedia" link type
		for _, language in ipairs(langList) do
			local sitelink = getSitelink(item, entity, language)
			if sitelink then
				link = 'w:'.. language ..':'.. sitelink
				break
			end
		end
	end
	return link or eLink  -- no wiki sitelink, so link to wikidata
end

--=============================================
--=== External functions ======================
--=============================================
local p = {}

--======================================================================
--=== API functions for use from other Scribunto modules ===============
--======================================================================

--[[
_getLabel

This function returns a label translated to desired language, created based on wikidata

Inputs:
	1: item - wikidata's item's q-id or entity class
	2: lang - desired language of the label
	3: link_type - link style. Possible values (case-insensitive): "wikipedia", "wikidata", "Commons", or "-" (no link)
	4: capitalization - can be "uc" (upper case), "lc" (lower case), "ucfirst" (upper case for the first letter),
			"lcfirst" (lower case for the first letter), or 'none' (default)

Error Handling:
	Bad q-id will result in displayed error
]]
function p._getLabel(item, lang, link_type, capitalization, show_id)
	local entity, s, link, label, language

	-- clean up the input parameters
	if type(item) ~= 'string' then -- "item" is not a q-id
		entity = item            -- "item" must be the entity
		item   = entity.id       -- look-up q-id
	elseif tonumber(item) then   -- if it is just the number then add "Q" in front
		item = 'Q'..item
	end
	item = mw.ustring.gsub(mw.ustring.upper(item), 'PROPERTY:P', 'P') -- make all the properties the same and capitalize

	if not lang then
		label, lang = mw.wikibase.getLabelWithLang(item)
	end
	if not lang then -- if still no language
		lang  = mw.getCurrentFrame():callParserFunction("int","lang")  -- get user's chosen language
		label = nil
	end

	-- build language fallback list
	lang = mw.ustring.lower(lang)
	local langList = mw.language.getFallbacksFor(lang)
	table.insert(langList, 1, lang)

	-- get label (visible part of the link)
	if not label then
		for _, language in ipairs(langList) do  -- loop over language fallback list looking for label in the specific language
			if entity then
				label = entity:getLabel(language)
			else
				label = mw.wikibase.getLabelByLang(item, language)
			end
			if label then break end                    -- label found and we are done
		end
	end
	if label then  -- wikitext-escape the label if we have one
		label = mw.text.nowiki(label)
	end
	if not label then                              -- no labels found, so just show the q-id
		label = item
	elseif show_id then           -- add id
		show_id = yesno(show_id,false)
		if show_id then
			local wordsep = getMessage('Word-separator', lang, ' ')
			local id = mw.message.new('parentheses', item):inLanguage(lang):plain()
			id = (id~=nil and id) or ('('..item..')') -- in case this module is moved to a project where {{int:parenthesis}} is not set
			label = label .. wordsep .. "&lt;small&gt;" .. id .. "&lt;/small&gt;"
		end
	end
	label = apply_capitalization(label, capitalization, lang)

	-- return the results
	if link_type == '-' then
		return label -- return just the label
	else
		link = getLink(link_type, item, entity, langList)
		return '[[' .. link .. '|' .. label .. ']]' -- return link
	end
end

--[[-------------------------------------------------------------------------------
_sitelinks

This function returns a table of sitelinks for a single project organized by language

Inputs:
	1: item - wikidata's item's q-id or entity class
	2: project - (case-insensitive) one of: "wikipedia", "wikisource", "wikiquote", "wikibooks", "wikinews",
			"wikiversity", "wikivoyage", "wiktionary", "commons", "mediawiki", "wikispecies", "wikidata", etc.

Output:
	Table of sitelinks with language fields

Output:
	Table of sitelinks with language fields
See also
* [https://foundation.wikimedia.org/wiki/Special:SiteMatrix] for the full list of supported interwikis.
* [https://dumps.wikimedia.org/backup-index.html] for the full list of sitecodes (used in database dumps).
]]
function p._sitelinks(item, project)
	local entity, sitelink
	-- get entity
	if type(item) == 'string' then -- "item" is a q-id
		entity = mw.wikibase.getEntity(item)
	else
		entity = item              -- "item" is the entity
	end

	-- convert from english project name  to proproject code
	local projLUT = {
		wikipedia   = 'wiki',           commons   = 'commonswiki',
		foundation  = 'foundationwiki', mediawiki = 'mediawikiwiki',
		wikispecies = 'specieswiki',    wikidata  = 'wikidatawiki',
		incubator   = 'incubatorwiki',	oldwikisource = 'sourceswiki',
	}
	local langLUT = {
		-- These are not language codes before the 'wiki' or 'wikiversity' suffix in a sitecode:
		foundation = '~', commons = '~',	-- they will be skipped
		incubator  = '~', meta    = '~',
		mediawiki  = '~', sources = '~',
		species    = '~', beta    = '~',
		-- Legacy language codes used in sitecodes, remapped to standard Wikimedia language codes:
		-- See https://meta.wikimedia.org/wiki/Special_language_codes for details
		als     = 'gsw', bat_smg      = 'sgs',
		fiu_vro = 'vro', be_x_old     = 'be-tarask',
		roa_rup = 'rup', zh_classical = 'lzh',
		zh_yue  = 'yue', zh_min_nan   = 'nan',
		zh_wuu  = 'wuu', no           = 'nb',
	}
	project = project:lower()
	project = projLUT[project] or project -- correct the project name
	local n = project:len()
	local linkTable = {}
	if entity and entity.sitelinks then  -- See if entity exists, and that it has sitelinks
		for _, sitelink in pairs(entity.sitelinks) do -- loop over all sitelinks
			local site = sitelink.site
			local m    = site:len() - n
			local proj = site:sub(m +1)  -- project part of the siteID
			if proj == project  then -- proj matches desired "project"
				local lang = site:sub(1, m)  -- language part of the siteID
				lang = langLUT[lang] or lang:gsub('_','-')
				if lang ~= '~' then -- proj matches desired "project"
					linkTable[lang] = sitelink.title
				end
			end
		end
	end
	return linkTable
end

--[[----------------------------------------------------------------
_aliases

This function returns a table of aliases for a single language

Inputs:
	1: item - wikidata's item's q-id or entity class
	2: lang - language code, like 'en' or 'de'

Output:
	Table of aliases with language fields
]]
function p._aliases(item, lang)
	local entity
	if type(item) == 'string' then -- "item" is a q-id
		entity = mw.wikibase.getEntity(item)
	else
		entity = item            -- "item" is the entity
	end
	local aliasTable = {}
	if entity and entity.aliases then						-- See if there is an entity and that is has aliases
		if entity.aliases[lang] then						-- See if it has English Aliases
			for _, alias in pairs(entity.aliases[lang]) do  -- Make a loop around the English aliases
				table.insert(aliasTable, alias.value)				-- Create a table of English aliases
			end
		end
	end
	return aliasTable
end

--======================================================================
--=== Invoke functions for use from wikitext, e.g., templates ==========
---=====================================================================

--[[
getLabel

This function returns a label translated to desired language, created based on wikidata

Usage:
{{#invoke:Wikidata label|getLabel|item=Q...|lang=..|link_style=..|capitalization=..}}

Parameters
	1: wikidata's item's q-id (required)
	2: language (optional; default {{int:lang}})
	3: link_style: "wikipedia" (default), "Wikidata", "Commons", or "-" (no link)
	4: capitalization - can be "uc", "lc", "ucfirst", "lcfirst"

Error Handling:
	Bad q-id will result in displayed error
]]
function p.getLabel(frame)
	local args = getArgs(frame)
	return p._getLabel(args.item, args.lang, args.link, args.capitalization, args.show_id)
end

--[[-------------------------------------------------------------------------------
sitelinks

This function returns a comma separated list of sitelinks for a single project organized by language
Its main purpose is to help with testing of _sitelinks function.

Usage:
{{#invoke:Wikidata label|sitelinks|item=Q...|project=..}}

Inputs:
	1: item - wikidata's item's q-id or entity class
	2: project - "wikipedia" (or "wiki"), "wikisource", "wikiquote", "wikibooks",
	             "wikinews", "wikiversity", "wikivoyage", "wiktionary", etc.

Output:
	comma separated list
]]
function p.sitelinks(frame)
	local args = getArgs(frame)
	local sitelinks = p._sitelinks(args.item, args.project)
	local sitelinkList = {}
	for lang, sitelink in pairs(sitelinks) do
		table.insert(sitelinkList, (lang=='' and sitelink) or (lang .. ':' .. sitelink))
	end
	return table.concat(sitelinkList, ', ')
end

--[[----------------------------------------------------------------------------
aliases

This function returns a comma separated list of aliases for a single language
Its main purpose is to help with testing of _aliases function.

Usage:
{{#invoke:Wikidata label|aliases|item=Q...|lang=..}}

Inputs:
	1: item - wikidata's item's q-id or entity class
	2: lang - language code, like 'en' or 'de'

Output:
	Comma separated list of aliases
]]
function p.aliases(frame)
	local args = getArgs(frame)
	return table.concat(p._aliases(args.item, args.lang), ', ')
end

return p</text>
      <sha1>r5m4p4ai561sppf27uy7cg37trr91jd</sha1>
    </revision>
  </page>
  <page>
    <title>Module:TranslateThis</title>
    <ns>828</ns>
    <id>16552706</id>
    <revision>
      <id>985177510</id>
      <parentid>443391876</parentid>
      <timestamp>2019-07-24T18:26:19Z</timestamp>
      <contributor>
        <username>Tacsipacsi</username>
        <id>33956</id>
      </contributor>
      <comment>add “lang” parameter to fix the language of the template (useful on translated pages), use clearer and more efficient code for concatenating all available translations</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="1550" xml:space="preserve">local fb = require('Module:Fallback')

return { main = function( frame )
	
	function shallowcopy(orig)
		if type(orig) ~= 'table' then
			return orig
		end
		
		local result = {}
		for key, value in pairs(orig) do
			result[key] = value
		end
		return result
	end
	
	local args = shallowcopy(frame:getParent().args)
	local lang = args.lang or frame:preprocess("{{int:lang}}") -- I don't know of any other way to get the user's language...
	args.lang = nil
	
	local anchor = args.anchor
	args.anchor = nil
	if (anchor and args[anchor]) then
		anchor = args[anchor]
	end
	anchor = anchor and frame:expandTemplate( { title = "Anchor", args = { anchor } } ) or ''
	
	local result = args[ lang ]
	if result and result ~= '' then
		result = '&lt;span lang="' .. lang .. '"&gt;' .. result .. '&lt;/span&gt;'
	else
		local default = {}
		for i, v in pairs( args ) do
			if v ~= "" then
				table.insert(default, '&lt;span lang="' .. i .. '"&gt;' .. v .. '&lt;/span&gt; &lt;small&gt;(' .. i .. ')&lt;/small&gt;')
			end
		end
		default = table.concat(default, ' / ')
		args.default=default
		local newlang
		result, newlang = fb._langSwitch(args, lang)
		if not newlang then
			result = ''
		elseif newlang~='default' then
			result = '&lt;span lang="' .. newlang .. '"&gt;' .. result .. '&lt;/span&gt; &lt;small&gt;(' .. newlang .. ')&lt;/small&gt;'
		end
		local langname = mw.language.fetchLanguageName( lang, lang )
		if langname ~= "" and newlang then
			result = result .. " – " .. frame:expandTemplate( { title = "Help translate", args = { langname, lang = lang } } )
		end
	end
	
	return anchor .. result
end}</text>
      <sha1>hex1jysgsqg3vrqnzvak3rxtnmbmax0</sha1>
    </revision>
  </page>
  <page>
    <title>Module:TableTools</title>
    <ns>828</ns>
    <id>23885553</id>
    <revision>
      <id>944584245</id>
      <parentid>647174310</parentid>
      <timestamp>2019-05-19T02:58:17Z</timestamp>
      <contributor>
        <username>DiBabelYurikBot</username>
        <id>3176749</id>
      </contributor>
      <minor/>
      <comment>Copying one change by Capankajsmilyo: "copied from enwiki" from [[mw:Module:TableTools]]. ([[mw:WP:TNT|docs]], [[c:Data:I18n/DiBabel.tab|translate]])</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="12326" xml:space="preserve">--[[
------------------------------------------------------------------------------------
--                               TableTools                                       --
--                                                                                --
-- This module includes a number of functions for dealing with Lua tables.        --
-- It is a meta-module, meant to be called from other Lua modules, and should     --
-- not be called directly from #invoke.                                           --
------------------------------------------------------------------------------------
--]]

local libraryUtil = require('libraryUtil')

local p = {}

-- Define often-used variables and functions.
local floor = math.floor
local infinity = math.huge
local checkType = libraryUtil.checkType
local checkTypeMulti = libraryUtil.checkTypeMulti

--[[
------------------------------------------------------------------------------------
-- isPositiveInteger
--
-- This function returns true if the given value is a positive integer, and false
-- if not. Although it doesn't operate on tables, it is included here as it is
-- useful for determining whether a given table key is in the array part or the
-- hash part of a table.
------------------------------------------------------------------------------------
--]]
function p.isPositiveInteger(v)
	if type(v) == 'number' and v &gt;= 1 and floor(v) == v and v &lt; infinity then
		return true
	else
		return false
	end
end

--[[
------------------------------------------------------------------------------------
-- isNan
--
-- This function returns true if the given number is a NaN value, and false
-- if not. Although it doesn't operate on tables, it is included here as it is
-- useful for determining whether a value can be a valid table key. Lua will
-- generate an error if a NaN is used as a table key.
------------------------------------------------------------------------------------
--]]
function p.isNan(v)
	if type(v) == 'number' and tostring(v) == '-nan' then
		return true
	else
		return false
	end
end

--[[
------------------------------------------------------------------------------------
-- shallowClone
--
-- This returns a clone of a table. The value returned is a new table, but all
-- subtables and functions are shared. Metamethods are respected, but the returned
-- table will have no metatable of its own.
------------------------------------------------------------------------------------
--]]
function p.shallowClone(t)
	local ret = {}
	for k, v in pairs(t) do
		ret[k] = v
	end
	return ret
end

--[[
------------------------------------------------------------------------------------
-- removeDuplicates
--
-- This removes duplicate values from an array. Non-positive-integer keys are
-- ignored. The earliest value is kept, and all subsequent duplicate values are
-- removed, but otherwise the array order is unchanged.
------------------------------------------------------------------------------------
--]]
function p.removeDuplicates(t)
	checkType('removeDuplicates', 1, t, 'table')
	local isNan = p.isNan
	local ret, exists = {}, {}
	for i, v in ipairs(t) do
		if isNan(v) then
			-- NaNs can't be table keys, and they are also unique, so we don't need to check existence.
			ret[#ret + 1] = v
		else
			if not exists[v] then
				ret[#ret + 1] = v
				exists[v] = true
			end
		end	
	end
	return ret
end			

--[[
------------------------------------------------------------------------------------
-- numKeys
--
-- This takes a table and returns an array containing the numbers of any numerical
-- keys that have non-nil values, sorted in numerical order.
------------------------------------------------------------------------------------
--]]
function p.numKeys(t)
	checkType('numKeys', 1, t, 'table')
	local isPositiveInteger = p.isPositiveInteger
	local nums = {}
	for k, v in pairs(t) do
		if isPositiveInteger(k) then
			nums[#nums + 1] = k
		end
	end
	table.sort(nums)
	return nums
end

--[[
------------------------------------------------------------------------------------
-- affixNums
--
-- This takes a table and returns an array containing the numbers of keys with the
-- specified prefix and suffix. For example, for the table
-- {a1 = 'foo', a3 = 'bar', a6 = 'baz'} and the prefix "a", affixNums will
-- return {1, 3, 6}.
------------------------------------------------------------------------------------
--]]
function p.affixNums(t, prefix, suffix)
	checkType('affixNums', 1, t, 'table')
	checkType('affixNums', 2, prefix, 'string', true)
	checkType('affixNums', 3, suffix, 'string', true)

	local function cleanPattern(s)
		-- Cleans a pattern so that the magic characters ()%.[]*+-?^$ are interpreted literally.
		s = s:gsub('([%(%)%%%.%[%]%*%+%-%?%^%$])', '%%%1')
		return s
	end

	prefix = prefix or ''
	suffix = suffix or ''
	prefix = cleanPattern(prefix)
	suffix = cleanPattern(suffix)
	local pattern = '^' .. prefix .. '([1-9]%d*)' .. suffix .. '$'

	local nums = {}
	for k, v in pairs(t) do
		if type(k) == 'string' then			
			local num = mw.ustring.match(k, pattern)
			if num then
				nums[#nums + 1] = tonumber(num)
			end
		end
	end
	table.sort(nums)
	return nums
end

--[[
------------------------------------------------------------------------------------
-- numData
--
-- Given a table with keys like ("foo1", "bar1", "foo2", "baz2"), returns a table
-- of subtables in the format 
-- { [1] = {foo = 'text', bar = 'text'}, [2] = {foo = 'text', baz = 'text'} }
-- Keys that don't end with an integer are stored in a subtable named "other".
-- The compress option compresses the table so that it can be iterated over with
-- ipairs.
------------------------------------------------------------------------------------
--]]
function p.numData(t, compress)
	checkType('numData', 1, t, 'table')
	checkType('numData', 2, compress, 'boolean', true)
	local ret = {}
	for k, v in pairs(t) do
		local prefix, num = mw.ustring.match(tostring(k), '^([^0-9]*)([1-9][0-9]*)$')
		if num then
			num = tonumber(num)
			local subtable = ret[num] or {}
			if prefix == '' then
				-- Positional parameters match the blank string; put them at the start of the subtable instead.
				prefix = 1
			end
			subtable[prefix] = v
			ret[num] = subtable
		else
			local subtable = ret.other or {}
			subtable[k] = v
			ret.other = subtable
		end
	end
	if compress then
		local other = ret.other
		ret = p.compressSparseArray(ret)
		ret.other = other
	end
	return ret
end

--[[
------------------------------------------------------------------------------------
-- compressSparseArray
--
-- This takes an array with one or more nil values, and removes the nil values
-- while preserving the order, so that the array can be safely traversed with
-- ipairs.
------------------------------------------------------------------------------------
--]]
function p.compressSparseArray(t)
	checkType('compressSparseArray', 1, t, 'table')
	local ret = {}
	local nums = p.numKeys(t)
	for _, num in ipairs(nums) do
		ret[#ret + 1] = t[num]
	end
	return ret
end

--[[
------------------------------------------------------------------------------------
-- sparseIpairs
--
-- This is an iterator for sparse arrays. It can be used like ipairs, but can
-- handle nil values.
------------------------------------------------------------------------------------
--]]
function p.sparseIpairs(t)
	checkType('sparseIpairs', 1, t, 'table')
	local nums = p.numKeys(t)
	local i = 0
	local lim = #nums
	return function ()
		i = i + 1
		if i &lt;= lim then
			local key = nums[i]
			return key, t[key]
		else
			return nil, nil
		end
	end
end

--[[
------------------------------------------------------------------------------------
-- size
--
-- This returns the size of a key/value pair table. It will also work on arrays,
-- but for arrays it is more efficient to use the # operator.
------------------------------------------------------------------------------------
--]]

function p.size(t)
	checkType('size', 1, t, 'table')
	local i = 0
	for k in pairs(t) do
		i = i + 1
	end
	return i
end


local function defaultKeySort(item1, item2)
	-- "number" &lt; "string", so numbers will be sorted before strings.
	local type1, type2 = type(item1), type(item2)
	if type1 ~= type2 then
		return type1 &lt; type2
	else -- This will fail with table, boolean, function.
		return item1 &lt; item2
	end
end

--[[
	Returns a list of the keys in a table, sorted using either a default
	comparison function or a custom keySort function.
]]
function p.keysToList(t, keySort, checked)
	if not checked then
		checkType('keysToList', 1, t, 'table')
		checkTypeMulti('keysToList', 2, keySort, { 'function', 'boolean', 'nil' })
	end
	
	local list = {}
	local index = 1
	for key, value in pairs(t) do
		list[index] = key
		index = index + 1
	end
	
	if keySort ~= false then
		keySort = type(keySort) == 'function' and keySort or defaultKeySort
		
		table.sort(list, keySort)
	end
	
	return list
end

--[[
	Iterates through a table, with the keys sorted using the keysToList function.
	If there are only numerical keys, sparseIpairs is probably more efficient.
]]
function p.sortedPairs(t, keySort)
	checkType('sortedPairs', 1, t, 'table')
	checkType('sortedPairs', 2, keySort, 'function', true)
	
	local list = p.keysToList(t, keySort, true)
	
	local i = 0
	return function()
		i = i + 1
		local key = list[i]
		if key ~= nil then
			return key, t[key]
		else
			return nil, nil
		end
	end
end

--[[
	Returns true if all keys in the table are consecutive integers starting at 1.
--]]
function p.isArray(t)
	checkType("isArray", 1, t, "table")
	
	local i = 0
	for k, v in pairs(t) do
		i = i + 1
		if t[i] == nil then
			return false
		end
	end
	return true
end

-- { "a", "b", "c" } -&gt; { a = 1, b = 2, c = 3 }
function p.invert(array)
	checkType("invert", 1, array, "table")
	
	local map = {}
	for i, v in ipairs(array) do
		map[v] = i
	end
	
	return map
end

--[[
	{ "a", "b", "c" } -&gt; { ["a"] = true, ["b"] = true, ["c"] = true }
--]]
function p.listToSet(t)
	checkType("listToSet", 1, t, "table")
	
	local set = {}
	for _, item in ipairs(t) do
		set[item] = true
	end
	
	return set
end

--[[
	Recursive deep copy function.
	Preserves identities of subtables.
	
]]
local function _deepCopy(orig, includeMetatable, already_seen)
	-- Stores copies of tables indexed by the original table.
	already_seen = already_seen or {}
	
	local copy = already_seen[orig]
	if copy ~= nil then
		return copy
	end
	
	if type(orig) == 'table' then
		copy = {}
		for orig_key, orig_value in pairs(orig) do
			copy[deepcopy(orig_key, includeMetatable, already_seen)] = deepcopy(orig_value, includeMetatable, already_seen)
		end
		already_seen[orig] = copy
		
		if includeMetatable then
			local mt = getmetatable(orig)
			if mt ~= nil then
				local mt_copy = deepcopy(mt, includeMetatable, already_seen)
				setmetatable(copy, mt_copy)
				already_seen[mt] = mt_copy
			end
		end
	else -- number, string, boolean, etc
		copy = orig
	end
	return copy
end

function p.deepCopy(orig, noMetatable, already_seen)
	checkType("deepCopy", 3, already_seen, "table", true)
	
	return _deepCopy(orig, not noMetatable, already_seen)
end

--[[
	Concatenates all values in the table that are indexed by a number, in order.
	sparseConcat{ a, nil, c, d }  =&gt;  "acd"
	sparseConcat{ nil, b, c, d }  =&gt;  "bcd"
]]
function p.sparseConcat(t, sep, i, j)
	local list = {}
	
	local list_i = 0
	for _, v in p.sparseIpairs(t) do
		list_i = list_i + 1
		list[list_i] = v
	end
	
	return table.concat(list, sep, i, j)
end

--[[
-- This returns the length of a table, or the first integer key n counting from
-- 1 such that t[n + 1] is nil. It is similar to the operator #, but may return
-- a different value when there are gaps in the array portion of the table.
-- Intended to be used on data loaded with mw.loadData. For other tables, use #.
-- Note: #frame.args in frame object always be set to 0, regardless of 
-- the number of unnamed template parameters, so use this function for
-- frame.args.
--]]
function p.length(t)
	local i = 1
	while t[i] ~= nil do
		i = i + 1
	end
	return i - 1
end

function p.inArray(arr, valueToFind)
	checkType("inArray", 1, arr, "table")
	
	-- if valueToFind is nil, error?
	
	for _, v in ipairs(arr) do
		if v == valueToFind then
			return true
		end
	end
	
	return false
end

return p</text>
      <sha1>tqif0qe0lu98pj8cuq70kgi6evye5t3</sha1>
    </revision>
  </page>
  <page>
    <title>Module:No globals</title>
    <ns>828</ns>
    <id>20196123</id>
    <revision>
      <id>1340914846</id>
      <parentid>1331513968</parentid>
      <timestamp>2021-01-14T13:56:09Z</timestamp>
      <contributor>
        <username>Sannita</username>
        <id>3223</id>
      </contributor>
      <minor/>
      <comment>2 revisions imported from [[:en:Module:No_globals]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="324" xml:space="preserve">-- dummy comment
local mt = getmetatable(_G) or {}
function mt.__index (t, k)
	if k ~= 'arg' then
		error('Tried to read nil global ' .. tostring(k), 2)
	end
	return nil
end
function mt.__newindex(t, k, v)
	if k ~= 'arg' then
		error('Tried to write global ' .. tostring(k), 2)
	end
	rawset(t, k, v)
end
setmetatable(_G, mt)</text>
      <sha1>in8hbwad1hk3fec3gd2yoqbrdxvy845</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Namespace detect/data</title>
    <ns>828</ns>
    <id>51354328</id>
    <revision>
      <id>647174214</id>
      <parentid>647174213</parentid>
      <timestamp>2018-03-10T10:01:08Z</timestamp>
      <contributor>
        <username>Mbch331</username>
        <id>69441</id>
      </contributor>
      <minor/>
      <comment>15 revisions imported from [[:en:Module:Namespace_detect/data]]: https://www.wikidata.org/w/index.php?title=Wikidata:Administrators%27_noticeboard&amp;oldid=647164909#Request_to_import_template:Cite_Q_from_ENWP</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="2569" xml:space="preserve">--------------------------------------------------------------------------------
--                          Namespace detect data                             --
-- This module holds data for [[Module:Namespace detect]] to be loaded per    --
-- page, rather than per #invoke, for performance reasons.                    --
--------------------------------------------------------------------------------

local cfg = require('Module:Namespace detect/config')

local function addKey(t, key, defaultKey)
	if key ~= defaultKey then
		t[#t + 1] = key
	end
end

-- Get a table of parameters to query for each default parameter name.
-- This allows wikis to customise parameter names in the cfg table while
-- ensuring that default parameter names will always work. The cfg table
-- values can be added as a string, or as an array of strings.

local defaultKeys = {
	'main',
	'talk',
	'other',
	'subjectns',
	'demospace',
	'demopage'
}

local argKeys = {}
for i, defaultKey in ipairs(defaultKeys) do
	argKeys[defaultKey] = {defaultKey}
end

for defaultKey, t in pairs(argKeys) do
	local cfgValue = cfg[defaultKey]
	local cfgValueType = type(cfgValue)
	if cfgValueType == 'string' then
		addKey(t, cfgValue, defaultKey)
	elseif cfgValueType == 'table' then
		for i, key in ipairs(cfgValue) do
			addKey(t, key, defaultKey)
		end
	end
	cfg[defaultKey] = nil -- Free the cfg value as we don't need it any more.
end

local function getParamMappings()
	--[[
	-- Returns a table of how parameter names map to namespace names. The keys
	-- are the actual namespace names, in lower case, and the values are the
	-- possible parameter names for that namespace, also in lower case. The
	-- table entries are structured like this:
	-- {
	--   [''] = {'main'},
	--   ['wikipedia'] = {'wikipedia', 'project', 'wp'},
	--   ...
	-- }
	--]]
	local mappings = {}
	local mainNsName = mw.site.subjectNamespaces[0].name
	mainNsName = mw.ustring.lower(mainNsName)
	mappings[mainNsName] = mw.clone(argKeys.main)
	mappings['talk'] = mw.clone(argKeys.talk)
	for nsid, ns in pairs(mw.site.subjectNamespaces) do
		if nsid ~= 0 then -- Exclude main namespace.
			local nsname = mw.ustring.lower(ns.name)
			local canonicalName = mw.ustring.lower(ns.canonicalName)
			mappings[nsname] = {nsname}
			if canonicalName ~= nsname then
				table.insert(mappings[nsname], canonicalName)
			end
			for _, alias in ipairs(ns.aliases) do
				table.insert(mappings[nsname], mw.ustring.lower(alias))
			end
		end
	end
	return mappings
end

return {
	argKeys = argKeys,
	cfg = cfg,
	mappings = getParamMappings()
}</text>
      <sha1>ojp6d3pc8mql5nufaqdg576c9so3479</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Namespace detect/config</title>
    <ns>828</ns>
    <id>51354327</id>
    <revision>
      <id>647174195</id>
      <parentid>647174194</parentid>
      <timestamp>2018-03-10T10:01:07Z</timestamp>
      <contributor>
        <username>Mbch331</username>
        <id>69441</id>
      </contributor>
      <minor/>
      <comment>7 revisions imported from [[:en:Module:Namespace_detect/config]]: https://www.wikidata.org/w/index.php?title=Wikidata:Administrators%27_noticeboard&amp;oldid=647164909#Request_to_import_template:Cite_Q_from_ENWP</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="3545" xml:space="preserve">--------------------------------------------------------------------------------
--                    Namespace detect configuration data                     --
--                                                                            --
-- This module stores configuration data for Module:Namespace detect. Here    --
-- you can localise the module to your wiki's language.                       --
--                                                                            --
-- To activate a configuration item, you need to uncomment it. This means     --
-- that you need to remove the text "-- " at the start of the line.           --
--------------------------------------------------------------------------------

local cfg = {} -- Don't edit this line.

--------------------------------------------------------------------------------
--                              Parameter names                               --
-- These configuration items specify custom parameter names. Values added     --
-- here will work in addition to the default English parameter names.         --
-- To add one extra name, you can use this format:                            --
--                                                                            --
-- cfg.foo = 'parameter name'                                                 --
--                                                                            --
-- To add multiple names, you can use this format:                            --
--                                                                            --
-- cfg.foo = {'parameter name 1', 'parameter name 2', 'parameter name 3'}     --
--------------------------------------------------------------------------------

---- This parameter displays content for the main namespace:
-- cfg.main = 'main'

---- This parameter displays in talk namespaces:
-- cfg.talk = 'talk'

---- This parameter displays content for "other" namespaces (namespaces for which
---- parameters have not been specified):
-- cfg.other = 'other'

---- This parameter makes talk pages behave as though they are the corresponding
---- subject namespace. Note that this parameter is used with [[Module:Yesno]].
---- Edit that module to change the default values of "yes", "no", etc.
-- cfg.subjectns = 'subjectns'

---- This parameter sets a demonstration namespace:
-- cfg.demospace = 'demospace'

---- This parameter sets a specific page to compare:
cfg.demopage = 'page'

--------------------------------------------------------------------------------
--                           Table configuration                              --
-- These configuration items allow customisation of the "table" function,     --
-- used to generate a table of possible parameters in the module              --
-- documentation.                                                             --
--------------------------------------------------------------------------------

---- The header for the namespace column in the wikitable containing the list of
---- possible subject-space parameters.
-- cfg.wikitableNamespaceHeader = 'Namespace'

---- The header for the wikitable containing the list of possible subject-space
---- parameters.
-- cfg.wikitableAliasesHeader = 'Aliases'

--------------------------------------------------------------------------------
--                        End of configuration data                           --
--------------------------------------------------------------------------------

return cfg -- Don't edit this line.</text>
      <sha1>1o6ozz56i8q0xgyl6xa41n2v7kelhli</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Message box/styles.css</title>
    <ns>828</ns>
    <id>64445661</id>
    <revision>
      <id>1188169922</id>
      <parentid>971093707</parentid>
      <timestamp>2020-05-23T17:56:29Z</timestamp>
      <contributor>
        <username>Tacsipacsi</username>
        <id>33956</id>
      </contributor>
      <comment>re-import from enwiki, including .mbox-small</comment>
      <model>css</model>
      <format>text/css</format>
      <text bytes="7139" xml:space="preserve">/**
 * Messagebox templates
 * Imported from [[:en:MediaWiki:Common.css]] on 2020-05-23
 */
/* Cell sizes for ambox/tmbox/imbox/cmbox/ombox/fmbox/dmbox message boxes */
th.mbox-text, td.mbox-text {   /* The message body cell(s) */
	border: none;
	padding: 0.25em 0.9em;     /* 0.9em left/right */
	width: 100%;               /* Make all mboxes the same width regardless of text length */
}
td.mbox-image {                /* The left image cell */
	border: none;
	padding: 2px 0 2px 0.9em;  /* 0.9em left, 0px right */
	text-align: center;
}
td.mbox-imageright {           /* The right image cell */
	border: none;
	padding: 2px 0.9em 2px 0;  /* 0px left, 0.9em right */
	text-align: center;
}
td.mbox-empty-cell {           /* An empty narrow cell */
	border: none;
	padding: 0;
	width: 1px;
}

/* Article message box styles */
table.ambox {
	margin: 0 10%;                  /* 10% = Will not overlap with other elements */
	border: 1px solid #a2a9b1;
	border-left: 10px solid #36c;  /* Default "notice" blue */
	background-color: #fbfbfb;
	box-sizing: border-box;
}
table.ambox + table.ambox {      /* Single border between stacked boxes. */
	margin-top: -1px;
}
.ambox th.mbox-text,
.ambox td.mbox-text {            /* The message body cell(s) */
	padding: 0.25em 0.5em;       /* 0.5em left/right */
}
.ambox td.mbox-image {           /* The left image cell */
	padding: 2px 0 2px 0.5em;    /* 0.5em left, 0px right */
}
.ambox td.mbox-imageright {      /* The right image cell */
	padding: 2px 0.5em 2px 0;    /* 0px left, 0.5em right */
}

table.ambox-notice {
	border-left: 10px solid #36c;       /* Blue */
}
table.ambox-speedy {
	border-left: 10px solid #b32424;    /* Red */
	background-color: #fee7e6;          /* Pink */
}
table.ambox-delete {
	border-left: 10px solid #b32424;    /* Red */
}
table.ambox-content {
	border-left: 10px solid #f28500;    /* Orange */
}
table.ambox-style {
	border-left: 10px solid #fc3;       /* Yellow */
}
table.ambox-move {
	border-left: 10px solid #9932cc;    /* Purple */
}
table.ambox-protection {
	border-left: 10px solid #a2a9b1;    /* Gray-gold */
}

/* Image message box styles */
table.imbox {
	margin: 4px 10%;
	border-collapse: collapse;
	border: 3px solid #36c;    /* Default "notice" blue */
	background-color: #fbfbfb;
	box-sizing: border-box;
}
.imbox .mbox-text .imbox {  /* For imboxes inside imbox-text cells. */
	margin: 0 -0.5em;       /* 0.9 - 0.5 = 0.4em left/right.        */
	display: block;         /* Fix for webkit to force 100% width.  */
}
.mbox-inside .imbox {       /* For imboxes inside other templates.  */
	margin: 4px;
}

table.imbox-notice {
	border: 3px solid #36c;       /* Blue */
}
table.imbox-speedy {
	border: 3px solid #b32424;    /* Red */
	background-color: #fee7e6;    /* Pink */
}
table.imbox-delete {
	border: 3px solid #b32424;    /* Red */
}
table.imbox-content {
	border: 3px solid #f28500;    /* Orange */
}
table.imbox-style {
	border: 3px solid #fc3;       /* Yellow */
}
table.imbox-move {
	border: 3px solid #9932cc;    /* Purple */
}
table.imbox-protection {
	border: 3px solid #a2a9b1;    /* Gray-gold */
}
table.imbox-license {
	border: 3px solid #88a;       /* Dark gray */
	background-color: #f7f8ff;    /* Light gray */
}
table.imbox-featured {
	border: 3px solid #cba135;    /* Brown-gold */
}

/* Category message box styles */
table.cmbox {
	margin: 3px 10%;
	border-collapse: collapse;
	border: 1px solid #a2a9b1;
	background-color: #dfe8ff;    /* Default "notice" blue */
	box-sizing: border-box;
}

table.cmbox-notice {
	background-color: #d8e8ff;    /* Blue */
}
table.cmbox-speedy {
	margin-top: 4px;
	margin-bottom: 4px;
	border: 4px solid #b32424;    /* Red */
	background-color: #ffdbdb;    /* Pink */
}
table.cmbox-delete {
	background-color: #ffdbdb;    /* Pink */
}
table.cmbox-content {
	background-color: #ffe7ce;    /* Orange */
}
table.cmbox-style {
	background-color: #fff9db;    /* Yellow */
}
table.cmbox-move {
	background-color: #e4d8ff;    /* Purple */
}
table.cmbox-protection {
	background-color: #efefe1;    /* Gray-gold */
}

/* Other pages message box styles */
table.ombox {
	margin: 4px 10%;
	border-collapse: collapse;
	border: 1px solid #a2a9b1;    /* Default "notice" gray */
	background-color: #f8f9fa;
	box-sizing: border-box;
}

table.ombox-notice {
	border: 1px solid #a2a9b1;    /* Gray */
}
table.ombox-speedy {
	border: 2px solid #b32424;    /* Red */
	background-color: #fee7e6;    /* Pink */
}
table.ombox-delete {
	border: 2px solid #b32424;    /* Red */
}
table.ombox-content {
	border: 1px solid #f28500;    /* Orange */
}
table.ombox-style {
	border: 1px solid #fc3;       /* Yellow */
}
table.ombox-move {
	border: 1px solid #9932cc;    /* Purple */
}
table.ombox-protection {
	border: 2px solid #a2a9b1;    /* Gray-gold */
}

/* Talk page message box styles */
table.tmbox {
	margin: 4px 10%;
	border-collapse: collapse;
	border: 1px solid #c0c090;    /* Default "notice" gray-brown */
	background-color: #f8eaba;
	min-width: 80%;
	box-sizing: border-box;
}
.tmbox.mbox-small {
	min-width: 0;                /* reset the min-width of tmbox above        */
}
.mediawiki .mbox-inside .tmbox { /* For tmboxes inside other templates. The "mediawiki" class ensures that */
	margin: 2px 0;               /* this declaration overrides other styles (including mbox-small above)   */
	width: 100%;                 /* For Safari and Opera */
}
.mbox-inside .tmbox.mbox-small { /* "small" tmboxes should not be small when  */
	line-height: 1.5em;          /* also "nested", so reset styles that are   */
	font-size: 100%;             /* set in "mbox-small" above.                */
}

table.tmbox-speedy {
	border: 2px solid #b32424;    /* Red */
	background-color: #fee7e6;    /* Pink */
}
table.tmbox-delete {
	border: 2px solid #b32424;    /* Red */
}
table.tmbox-content {
	border: 2px solid #f28500;    /* Orange */
}
table.tmbox-style {
	border: 2px solid #fc3;       /* Yellow */
}
table.tmbox-move {
	border: 2px solid #9932cc;    /* Purple */
}
table.tmbox-protection,
table.tmbox-notice {
	border: 1px solid #c0c090;    /* Gray-brown */
}

/* Footer and header message box styles */
table.fmbox {
	clear: both;
	margin: 0.2em 0;
	width: 100%;
	border: 1px solid #a2a9b1;
	background-color: #f8f9fa;     /* Default "system" gray */
	box-sizing: border-box;
}
table.fmbox-system {
	background-color: #f8f9fa;
}
table.fmbox-warning {
	border: 1px solid #bb7070;  /* Dark pink */
	background-color: #ffdbdb;  /* Pink */
}
table.fmbox-editnotice {
	background-color: transparent;
}

/* These mbox-small classes must be placed after all other
   ambox/tmbox/ombox etc classes. "html body.mediawiki" is so
   they override "table.ambox + table.ambox" above. */
html body.mediawiki .mbox-small {   /* For the "small=yes" option. */
	clear: right;
	float: right;
	margin: 4px 0 4px 1em;
	box-sizing: border-box;
	width: 238px;
	font-size: 88%;
	line-height: 1.25em;
}
html body.mediawiki .mbox-small-left {   /* For the "small=left" option. */
	margin: 4px 1em 4px 0;
	box-sizing: border-box;
	overflow: hidden;
	width: 238px;
	border-collapse: collapse;
	font-size: 88%;
	line-height: 1.25em;
}</text>
      <sha1>eg47v2qupc9zncorlx9gt3pqrfuyp6f</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Message box/configuration</title>
    <ns>828</ns>
    <id>16757123</id>
    <revision>
      <id>1340925159</id>
      <parentid>1340914775</parentid>
      <timestamp>2021-01-14T14:14:57Z</timestamp>
      <contributor>
        <username>Tacsipacsi</username>
        <id>33956</id>
      </contributor>
      <comment>revert unjustified changes</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="6203" xml:space="preserve">--------------------------------------------------------------------------------
--                          Message box configuration                         --
--                                                                            --
-- This module contains configuration data for [[Module:Message box]].        --
--------------------------------------------------------------------------------

return {
	ambox = {
		types = {
			speedy = {
				class = 'ambox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'ambox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'ambox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'ambox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'ambox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'ambox-protection',
				image = 'Padlock-silver-medium.svg'
			},
			notice = {
				class = 'ambox-notice',
				image = 'OOjs_UI_icon_info_big_progressive.svg'
			}
		},
		default                     = 'notice',
		allowBlankParams            = {'talk', 'sect', 'date', 'issue', 'fix', 'subst', 'hidden'},
		allowSmall                  = true,
		smallParam                  = 'left',
		smallClass                  = 'mbox-small-left',
		substCheck                  = true,
		classes                     = {'metadata', 'ambox'},
		imageEmptyCell              = true,
		imageCheckBlank             = true,
		imageSmallSize              = '20x20px',
		imageCellDiv                = true,
		useCollapsibleTextFields    = true,
		imageRightNone              = true,
		sectionDefault              = 'article',
		allowMainspaceCategories    = true,
		templateCategory            = 'Article message templates',
	        templateCategoryRequireName = true,
		templateErrorCategory       = 'Article message templates with missing parameters',
		templateErrorParamsToCheck  = {'issue', 'fix', 'subst'},
		removalNotice               = '[[Help:Maintenance template removal|Learn how and when to remove this template message]]'
	},
	
	cmbox = {
		types = {
			speedy = {
				class = 'cmbox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'cmbox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'cmbox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'cmbox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'cmbox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'cmbox-protection',
				image = 'Padlock-silver-medium.svg'
			},
			notice = {
				class = 'cmbox-notice',
				image = 'OOjs_UI_icon_info_big_progressive.svg'
			}
		},
		default              = 'notice',
		showInvalidTypeError = true,
		classes              = {'cmbox'},
		imageEmptyCell       = true
	},
	
	fmbox = {
		types = {
			warning = {
				class = 'fmbox-warning',
				image = 'Ambox warning pn.svg'
			},
			editnotice = {
				class = 'fmbox-editnotice',
				image = 'OOjs_UI_icon_info_big_progressive.svg'
			},
			system = {
				class = 'fmbox-system',
				image = 'OOjs_UI_icon_info_big_progressive.svg'
			}
		},
		default              = 'system',
		showInvalidTypeError = true,
		classes              = {'fmbox'},
		imageEmptyCell       = false,
		imageRightNone       = false
	},
	
	imbox = {
		types = {
			speedy = {
				class = 'imbox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'imbox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'imbox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'imbox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'imbox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'imbox-protection',
				image = 'Padlock-silver-medium.svg'
			},
			license = {
				class = 'imbox-license licensetpl',
				image = 'Imbox license.png' -- @todo We need an SVG version of this
			},
			featured = {
				class = 'imbox-featured',
				image = 'Cscr-featured.svg'
			},
			notice = {
				class = 'imbox-notice',
				image = 'OOjs_UI_icon_info_big_progressive.svg'
			}
		},
		default              = 'notice',
		showInvalidTypeError = true,
		classes              = {'imbox'},
		imageEmptyCell       = true,
		below                = true,
		templateCategory     = 'File message boxes'
	},
	
	ombox = {
		types = {
			speedy = {
				class = 'ombox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'ombox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'ombox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'ombox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'ombox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'ombox-protection',
				image = 'Padlock-silver-medium.svg'
			},
			notice = {
				class = 'ombox-notice',
				image = 'OOjs_UI_icon_info_big_progressive.svg'
			}
		},
		default              = 'notice',
		showInvalidTypeError = true,
		classes              = {'ombox'},
		allowSmall           = true,
		imageEmptyCell       = true,
		imageRightNone       = true
	},
	
	tmbox = {
		types = {
			speedy = {
				class = 'tmbox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'tmbox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'tmbox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'tmbox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'tmbox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'tmbox-protection',
				image = 'Padlock-silver-medium.svg'
			},
			notice = {
				class = 'tmbox-notice',
				image = 'OOjs_UI_icon_info_big_progressive.svg'
			}
		},
		default              = 'notice',
		showInvalidTypeError = true,
		classes              = {'tmbox'},
		allowSmall           = true,
		imageRightNone       = true,
		imageEmptyCell       = true,
		imageEmptyCellStyle  = true,
		templateCategory     = 'Talk message boxes'
	}
}</text>
      <sha1>eag3pe1zfalxtbbj2va1l2oex8jxv7a</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Message box</title>
    <ns>828</ns>
    <id>16757102</id>
    <revision>
      <id>1340914768</id>
      <parentid>1331513947</parentid>
      <timestamp>2021-01-14T13:56:05Z</timestamp>
      <contributor>
        <username>Sannita</username>
        <id>3223</id>
      </contributor>
      <minor/>
      <comment>2 revisions imported from [[:en:Module:Message_box]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="17119" xml:space="preserve">-- This is a meta-module for producing message box templates, including
-- {{mbox}}, {{ambox}}, {{imbox}}, {{tmbox}}, {{ombox}}, {{cmbox}} and {{fmbox}}.

-- Load necessary modules.
require('Module:No globals')
local getArgs
local categoryHandler = require('Module:Category handler')._main
local yesno = require('Module:Yesno')

-- Get a language object for formatDate and ucfirst.
local lang = mw.language.getContentLanguage()

-- Define constants
local CONFIG_MODULE = 'Module:Message box/configuration'

--------------------------------------------------------------------------------
-- Helper functions
--------------------------------------------------------------------------------

local function getTitleObject(...)
	-- Get the title object, passing the function through pcall
	-- in case we are over the expensive function count limit.
	local success, title = pcall(mw.title.new, ...)
	if success then
		return title
	end
end

local function union(t1, t2)
	-- Returns the union of two arrays.
	local vals = {}
	for i, v in ipairs(t1) do
		vals[v] = true
	end
	for i, v in ipairs(t2) do
		vals[v] = true
	end
	local ret = {}
	for k in pairs(vals) do
		table.insert(ret, k)
	end
	table.sort(ret)
	return ret
end

local function getArgNums(args, prefix)
	local nums = {}
	for k, v in pairs(args) do
		local num = mw.ustring.match(tostring(k), '^' .. prefix .. '([1-9]%d*)$')
		if num then
			table.insert(nums, tonumber(num))
		end
	end
	table.sort(nums)
	return nums
end

--------------------------------------------------------------------------------
-- Box class definition
--------------------------------------------------------------------------------

local MessageBox = {}
MessageBox.__index = MessageBox

function MessageBox.new(boxType, args, cfg)
	args = args or {}
	local obj = {}

	-- Set the title object and the namespace.
	obj.title = getTitleObject(args.page) or mw.title.getCurrentTitle()

	-- Set the config for our box type.
	obj.cfg = cfg[boxType]
	if not obj.cfg then
		local ns = obj.title.namespace
		-- boxType is "mbox" or invalid input
		if ns == 0 then
			obj.cfg = cfg.ambox -- main namespace
		elseif ns == 6 then
			obj.cfg = cfg.imbox -- file namespace
		elseif ns == 14 then
			obj.cfg = cfg.cmbox -- category namespace
		else
			local nsTable = mw.site.namespaces[ns]
			if nsTable and nsTable.isTalk then
				obj.cfg = cfg.tmbox -- any talk namespace
			else
				obj.cfg = cfg.ombox -- other namespaces or invalid input
			end
		end
	end

	-- Set the arguments, and remove all blank arguments except for the ones
	-- listed in cfg.allowBlankParams.
	do
		local newArgs = {}
		for k, v in pairs(args) do
			if v ~= '' then
				newArgs[k] = v
			end
		end
		for i, param in ipairs(obj.cfg.allowBlankParams or {}) do
			newArgs[param] = args[param]
		end
		obj.args = newArgs
	end

	-- Define internal data structure.
	obj.categories = {}
	obj.classes = {}

	return setmetatable(obj, MessageBox)
end

function MessageBox:addCat(ns, cat, sort)
	if not cat then
		return nil
	end
	if sort then
		cat = string.format('[[Category:%s|%s]]', cat, sort)
	else
		cat = string.format('[[Category:%s]]', cat)
	end
	self.categories[ns] = self.categories[ns] or {}
	table.insert(self.categories[ns], cat)
end

function MessageBox:addClass(class)
	if not class then
		return nil
	end
	table.insert(self.classes, class)
end

function MessageBox:setParameters()
	local args = self.args
	local cfg = self.cfg

	-- Get type data.
	self.type = args.type
	local typeData = cfg.types[self.type]
	self.invalidTypeError = cfg.showInvalidTypeError
		and self.type
		and not typeData
	typeData = typeData or cfg.types[cfg.default]
	self.typeClass = typeData.class
	self.typeImage = typeData.image

	-- Find if the box has been wrongly substituted.
	self.isSubstituted = cfg.substCheck and args.subst == 'SUBST'

	-- Find whether we are using a small message box.
	self.isSmall = cfg.allowSmall and (
		cfg.smallParam and args.small == cfg.smallParam
		or not cfg.smallParam and yesno(args.small)
	)

	-- Add attributes, classes and styles.
	self.id = args.id
	if yesno(args.plainlinks) ~= false then
		self:addClass('plainlinks')
	end
	for _, class in ipairs(cfg.classes or {}) do
		self:addClass(class)
	end
	if self.isSmall then
		self:addClass(cfg.smallClass or 'mbox-small')
	end
	self:addClass(self.typeClass)
	self:addClass(args.class)
	self.style = args.style
	self.lang  = args.lang
	self.dir   = args.dir or (args.lang and 'auto' or nil)
	self.attrs = args.attrs

	-- Set text style.
	self.textstyle = args.textstyle

	-- Find if we are on the template page or not. This functionality is only
	-- used if useCollapsibleTextFields is set, or if both cfg.templateCategory
	-- and cfg.templateCategoryRequireName are set.
	self.useCollapsibleTextFields = cfg.useCollapsibleTextFields
	if self.useCollapsibleTextFields
		or cfg.templateCategory
		and cfg.templateCategoryRequireName
	then
		self.name = args.name
		if self.name then
			local templateName = mw.ustring.match(
				self.name,
				'^[tT][eE][mM][pP][lL][aA][tT][eE][%s_]*:[%s_]*(.*)$'
			) or self.name
			templateName = 'Template:' .. templateName
			self.templateTitle = getTitleObject(templateName)
		end
		self.isTemplatePage = self.templateTitle
			and mw.title.equals(self.title, self.templateTitle)
	end

	-- Process data for collapsible text fields. At the moment these are only
	-- used in {{ambox}}.
	if self.useCollapsibleTextFields then
		-- Get the self.issue value.
		if self.isSmall and args.smalltext then
			self.issue = args.smalltext
		else
			local sect
			if args.sect == '' then
				sect = 'This ' .. (cfg.sectionDefault or 'page')
			elseif type(args.sect) == 'string' then
				sect = 'This ' .. args.sect
			end
			local issue = args.issue
			issue = type(issue) == 'string' and issue ~= '' and issue or nil
			local text = args.text
			text = type(text) == 'string' and text or nil
			local issues = {}
			table.insert(issues, sect)
			table.insert(issues, issue)
			table.insert(issues, text)
			self.issue = table.concat(issues, ' ')
		end

		-- Get the self.talk value.
		local talk = args.talk
		-- Show talk links on the template page or template subpages if the talk
		-- parameter is blank.
		if talk == ''
			and self.templateTitle
			and (
				mw.title.equals(self.templateTitle, self.title)
				or self.title:isSubpageOf(self.templateTitle)
			)
		then
			talk = '#'
		elseif talk == '' then
			talk = nil
		end
		if talk then
			-- If the talk value is a talk page, make a link to that page. Else
			-- assume that it's a section heading, and make a link to the talk
			-- page of the current page with that section heading.
			local talkTitle = getTitleObject(talk)
			local talkArgIsTalkPage = true
			if not talkTitle or not talkTitle.isTalkPage then
				talkArgIsTalkPage = false
				talkTitle = getTitleObject(
					self.title.text,
					mw.site.namespaces[self.title.namespace].talk.id
				)
			end
			if talkTitle and talkTitle.exists then
				local talkText = 'Relevant discussion may be found on'
				if talkArgIsTalkPage then
					talkText = string.format(
						'%s [[%s|%s]].',
						talkText,
						talk,
						talkTitle.prefixedText
					)
				else
					talkText = string.format(
						'%s the [[%s#%s|talk page]].',
						talkText,
						talkTitle.prefixedText,
						talk
					)
				end
				self.talk = talkText
			end
		end

		-- Get other values.
		self.fix = args.fix ~= '' and args.fix or nil
		local date
		if args.date and args.date ~= '' then
			date = args.date
		elseif args.date == '' and self.isTemplatePage then
			date = lang:formatDate('F Y')
		end
		if date then
			self.date = string.format(" &lt;small&gt;''(%s)''&lt;/small&gt;", date)
		end
		self.info = args.info
		if yesno(args.removalnotice) then
			self.removalNotice = cfg.removalNotice
		end
	end

	-- Set the non-collapsible text field. At the moment this is used by all box
	-- types other than ambox, and also by ambox when small=yes.
	if self.isSmall then
		self.text = args.smalltext or args.text
	else
		self.text = args.text
	end

	-- Set the below row.
	self.below = cfg.below and args.below

	-- General image settings.
	self.imageCellDiv = not self.isSmall and cfg.imageCellDiv
	self.imageEmptyCell = cfg.imageEmptyCell
	if cfg.imageEmptyCellStyle then
		self.imageEmptyCellStyle = 'border:none;padding:0px;width:1px'
	end

	-- Left image settings.
	local imageLeft = self.isSmall and args.smallimage or args.image
	if cfg.imageCheckBlank and imageLeft ~= 'blank' and imageLeft ~= 'none'
		or not cfg.imageCheckBlank and imageLeft ~= 'none'
	then
		self.imageLeft = imageLeft
		if not imageLeft then
			local imageSize = self.isSmall
				and (cfg.imageSmallSize or '30x30px')
				or '40x40px'
			self.imageLeft = string.format('[[File:%s|%s|link=|alt=]]', self.typeImage
				or 'Imbox notice.png', imageSize)
		end
	end

	-- Right image settings.
	local imageRight = self.isSmall and args.smallimageright or args.imageright
	if not (cfg.imageRightNone and imageRight == 'none') then
		self.imageRight = imageRight
	end
end

function MessageBox:setMainspaceCategories()
	local args = self.args
	local cfg = self.cfg

	if not cfg.allowMainspaceCategories then
		return nil
	end

	local nums = {}
	for _, prefix in ipairs{'cat', 'category', 'all'} do
		args[prefix .. '1'] = args[prefix]
		nums = union(nums, getArgNums(args, prefix))
	end

	-- The following is roughly equivalent to the old {{Ambox/category}}.
	local date = args.date
	date = type(date) == 'string' and date
	local preposition = 'from'
	for _, num in ipairs(nums) do
		local mainCat = args['cat' .. tostring(num)]
			or args['category' .. tostring(num)]
		local allCat = args['all' .. tostring(num)]
		mainCat = type(mainCat) == 'string' and mainCat
		allCat = type(allCat) == 'string' and allCat
		if mainCat and date and date ~= '' then
			local catTitle = string.format('%s %s %s', mainCat, preposition, date)
			self:addCat(0, catTitle)
			catTitle = getTitleObject('Category:' .. catTitle)
			if not catTitle or not catTitle.exists then
				self:addCat(0, 'Articles with invalid date parameter in template')
			end
		elseif mainCat and (not date or date == '') then
			self:addCat(0, mainCat)
		end
		if allCat then
			self:addCat(0, allCat)
		end
	end
end

function MessageBox:setTemplateCategories()
	local args = self.args
	local cfg = self.cfg

	-- Add template categories.
	if cfg.templateCategory then
		if cfg.templateCategoryRequireName then
			if self.isTemplatePage then
				self:addCat(10, cfg.templateCategory)
			end
		elseif not self.title.isSubpage then
			self:addCat(10, cfg.templateCategory)
		end
	end

	-- Add template error categories.
	if cfg.templateErrorCategory then
		local templateErrorCategory = cfg.templateErrorCategory
		local templateCat, templateSort
		if not self.name and not self.title.isSubpage then
			templateCat = templateErrorCategory
		elseif self.isTemplatePage then
			local paramsToCheck = cfg.templateErrorParamsToCheck or {}
			local count = 0
			for i, param in ipairs(paramsToCheck) do
				if not args[param] then
					count = count + 1
				end
			end
			if count &gt; 0 then
				templateCat = templateErrorCategory
				templateSort = tostring(count)
			end
			if self.categoryNums and #self.categoryNums &gt; 0 then
				templateCat = templateErrorCategory
				templateSort = 'C'
			end
		end
		self:addCat(10, templateCat, templateSort)
	end
end

function MessageBox:setAllNamespaceCategories()
	-- Set categories for all namespaces.
	if self.invalidTypeError then
		local allSort = (self.title.namespace == 0 and 'Main:' or '') .. self.title.prefixedText
		self:addCat('all', 'Wikipedia message box parameter needs fixing', allSort)
	end
	if self.isSubstituted then
		self:addCat('all', 'Pages with incorrectly substituted templates')
	end
end

function MessageBox:setCategories()
	if self.title.namespace == 0 then
		self:setMainspaceCategories()
	elseif self.title.namespace == 10 then
		self:setTemplateCategories()
	end
	self:setAllNamespaceCategories()
end

function MessageBox:renderCategories()
	-- Convert category tables to strings and pass them through
	-- [[Module:Category handler]].
	return categoryHandler{
		main = table.concat(self.categories[0] or {}),
		template = table.concat(self.categories[10] or {}),
		all = table.concat(self.categories.all or {}),
		nocat = self.args.nocat,
		page = self.args.page
	}
end

function MessageBox:export()
	local root = mw.html.create()

	-- Add the subst check error.
	if self.isSubstituted and self.name then
		root:tag('b')
			:addClass('error')
			:wikitext(string.format(
				'Template &lt;code&gt;%s[[Template:%s|%s]]%s&lt;/code&gt; has been incorrectly substituted.',
				mw.text.nowiki('{{'), self.name, self.name, mw.text.nowiki('}}')
			))
	end
	
	root:wikitext(mw.getCurrentFrame():extensionTag('templatestyles', '', { src = 'Module:Message box/styles.css' }))

	-- Create the box table.
	local boxTable = root:tag('table')
	boxTable:attr('id', self.id or nil)
	for i, class in ipairs(self.classes or {}) do
		boxTable:addClass(class or nil)
	end
	boxTable
		:cssText(self.style or nil)
		:attr('role', 'presentation')

	if self.lang then
		boxTable:attr('lang', self.lang)
	end
	if self.dir then
		boxTable:attr('dir', self.dir)
	end
	if self.attrs then
		boxTable:attr(self.attrs)
	end

	-- Add the left-hand image.
	local row = boxTable:tag('tr')
	if self.imageLeft then
		local imageLeftCell = row:tag('td'):addClass('mbox-image')
		if self.imageCellDiv then
			-- If we are using a div, redefine imageLeftCell so that the image
			-- is inside it. Divs use style="width: 52px;", which limits the
			-- image width to 52px. If any images in a div are wider than that,
			-- they may overlap with the text or cause other display problems.
			imageLeftCell = imageLeftCell:tag('div'):css('width', '52px')
		end
		imageLeftCell:wikitext(self.imageLeft or nil)
	elseif self.imageEmptyCell then
		-- Some message boxes define an empty cell if no image is specified, and
		-- some don't. The old template code in templates where empty cells are
		-- specified gives the following hint: "No image. Cell with some width
		-- or padding necessary for text cell to have 100% width."
		row:tag('td')
			:addClass('mbox-empty-cell')
			:cssText(self.imageEmptyCellStyle or nil)
	end

	-- Add the text.
	local textCell = row:tag('td'):addClass('mbox-text')
	if self.useCollapsibleTextFields then
		-- The message box uses advanced text parameters that allow things to be
		-- collapsible. At the moment, only ambox uses this.
		textCell:cssText(self.textstyle or nil)
		local textCellDiv = textCell:tag('div')
		textCellDiv
			:addClass('mbox-text-span')
			:wikitext(self.issue or nil)
		if (self.talk or self.fix) and not self.isSmall then
			textCellDiv:tag('span')
				:addClass('hide-when-compact')
				:wikitext(self.talk and (' ' .. self.talk) or nil)
				:wikitext(self.fix and (' ' .. self.fix) or nil)
		end
		textCellDiv:wikitext(self.date and (' ' .. self.date) or nil)
		if self.info and not self.isSmall then
			textCellDiv
				:tag('span')
				:addClass('hide-when-compact')
				:wikitext(self.info and (' ' .. self.info) or nil)
		end
		if self.removalNotice then
			textCellDiv:tag('small')
				:addClass('hide-when-compact')
				:tag('i')
					:wikitext(string.format(" (%s)", self.removalNotice))
		end
	else
		-- Default text formatting - anything goes.
		textCell
			:cssText(self.textstyle or nil)
			:wikitext(self.text or nil)
	end

	-- Add the right-hand image.
	if self.imageRight then
		local imageRightCell = row:tag('td'):addClass('mbox-imageright')
		if self.imageCellDiv then
			-- If we are using a div, redefine imageRightCell so that the image
			-- is inside it.
			imageRightCell = imageRightCell:tag('div'):css('width', '52px')
		end
		imageRightCell
			:wikitext(self.imageRight or nil)
	end

	-- Add the below row.
	if self.below then
		boxTable:tag('tr')
			:tag('td')
				:attr('colspan', self.imageRight and '3' or '2')
				:addClass('mbox-text')
				:cssText(self.textstyle or nil)
				:wikitext(self.below or nil)
	end

	-- Add error message for invalid type parameters.
	if self.invalidTypeError then
		root:tag('div')
			:css('text-align', 'center')
			:wikitext(string.format(
				'This message box is using an invalid "type=%s" parameter and needs fixing.',
				self.type or ''
			))
	end

	-- Add categories.
	root:wikitext(self:renderCategories() or nil)

	return tostring(root)
end

--------------------------------------------------------------------------------
-- Exports
--------------------------------------------------------------------------------

local p, mt = {}, {}

function p._exportClasses()
	-- For testing.
	return {
		MessageBox = MessageBox
	}
end

function p.main(boxType, args, cfgTables)
	local box = MessageBox.new(boxType, args, cfgTables or mw.loadData(CONFIG_MODULE))
	box:setParameters()
	box:setCategories()
	return box:export()
end

function mt.__index(t, k)
	return function (frame)
		if not getArgs then
			getArgs = require('Module:Arguments').getArgs
		end
		return t.main(k, getArgs(frame, {trim = false, removeBlanks = false}))
	end
end

return setmetatable(p, mt)</text>
      <sha1>sihknlvcaf9y8dac99re44afh1eeecc</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Lua banner</title>
    <ns>828</ns>
    <id>45415280</id>
    <revision>
      <id>647174166</id>
      <parentid>601396390</parentid>
      <timestamp>2018-03-10T10:01:06Z</timestamp>
      <contributor>
        <username>Mbch331</username>
        <id>69441</id>
      </contributor>
      <minor/>
      <comment>4 revisions imported from [[:en:Module:Lua_banner]]: https://www.wikidata.org/w/index.php?title=Wikidata:Administrators%27_noticeboard&amp;oldid=647164909#Request_to_import_template:Cite_Q_from_ENWP</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="2421" xml:space="preserve">-- This module implements the {{lua}} template.

local yesno = require('Module:Yesno')
local mList = require('Module:List')
local mTableTools = require('Module:TableTools')
local mMessageBox = require('Module:Message box')

local p = {}

function p.main(frame)
	local origArgs = frame:getParent().args
	local args = {}
	for k, v in pairs(origArgs) do
		v = v:match('^%s*(.-)%s*$')
		if v ~= '' then
			args[k] = v
		end
	end
	return p._main(args)
end

function p._main(args)
	local modules = mTableTools.compressSparseArray(args)
	local box = p.renderBox(modules)
	local trackingCategories = p.renderTrackingCategories(args, modules)
	return box .. trackingCategories
end

function p.renderBox(modules)
	local boxArgs = {}
	if #modules &lt; 1 then
		boxArgs.text = '&lt;strong class="error"&gt;Error: no modules specified&lt;/strong&gt;'
	else
		local moduleLinks = {}
		for i, module in ipairs(modules) do
			moduleLinks[i] = string.format('[[:%s]]', module)
		end
		local moduleList = mList.makeList('bulleted', moduleLinks)
		boxArgs.text = 'Uses [[Wikipedia:Lua|Lua]]:\n' .. moduleList
	end
	boxArgs.type = 'notice'
	boxArgs.small = true
	boxArgs.image = '[[File:Lua-logo-nolabel.svg|30px|alt=Lua logo|link=Wikipedia:Lua]]'
	return mMessageBox.main('mbox', boxArgs)
end

function p.renderTrackingCategories(args, modules, titleObj)
	if yesno(args.nocat) then
		return ''
	end
	
	local cats = {}
	
	-- Error category
	if #modules &lt; 1 then
		cats[#cats + 1] = 'Lua templates with errors'
	end
	
	-- Lua templates category
	titleObj = titleObj or mw.title.getCurrentTitle()
	local subpageBlacklist = {
		doc = true,
		sandbox = true,
		sandbox2 = true,
		testcases = true
	}
	if titleObj.namespace == 10 
		and not subpageBlacklist[titleObj.subpageText]
	then
		local category = args.category
		if not category then
			local categories = {
				['Module:String'] = 'Lua String-based templates',
				['Module:Math'] = 'Templates based on the Math Lua module',
				['Module:BaseConvert'] = 'Templates based on the BaseConvert Lua module',
				['Module:Citation'] = 'Lua-based citation templates'
			}
			categories['Module:Citation/CS1'] = categories['Module:Citation']
			category = modules[1] and categories[modules[1]]
			category = category or 'Lua-based templates'
		end
		cats[#cats + 1] = category
	end
	
	for i, cat in ipairs(cats) do
		cats[i] = string.format('[[Category:%s]]', cat)
	end
	return table.concat(cats)
end

return p</text>
      <sha1>l8oeyvtrxsbtfip6xi5evqh3yk40lu5</sha1>
    </revision>
  </page>
  <page>
    <title>Module:List</title>
    <ns>828</ns>
    <id>44456672</id>
    <revision>
      <id>647174161</id>
      <parentid>594952318</parentid>
      <timestamp>2018-03-10T10:01:05Z</timestamp>
      <contributor>
        <username>Mbch331</username>
        <id>69441</id>
      </contributor>
      <minor/>
      <comment>30 revisions imported from [[:en:Module:List]]: https://www.wikidata.org/w/index.php?title=Wikidata:Administrators%27_noticeboard&amp;oldid=647164909#Request_to_import_template:Cite_Q_from_ENWP</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="5154" xml:space="preserve">-- This module outputs different kinds of lists. At the moment, bulleted,
-- unbulleted, horizontal, ordered, and horizontal ordered lists are supported.

local libUtil = require('libraryUtil')
local checkType = libUtil.checkType
local mTableTools = require('Module:TableTools')

local p = {}

local listTypes = {
	['bulleted'] = true,
	['unbulleted'] = true,
	['horizontal'] = true,
	['ordered'] = true,
	['horizontal_ordered'] = true
}

function p.makeListData(listType, args)
	-- Constructs a data table to be passed to p.renderList.
	local data = {}

	-- Classes
	data.classes = {}
	if listType == 'horizontal' or listType == 'horizontal_ordered' then
		table.insert(data.classes, 'hlist hlist-separated')
	elseif listType == 'unbulleted' then
		table.insert(data.classes, 'plainlist')
	end
	table.insert(data.classes, args.class)

	-- Main div style
	data.style = args.style

	-- Indent for horizontal lists
	if listType == 'horizontal' or listType == 'horizontal_ordered' then
		local indent = tonumber(args.indent)
		indent = indent and indent * 1.6 or 0
		if indent &gt; 0 then
			data.marginLeft = indent .. 'em'
		end
	end
	
	-- List style types for ordered lists
	-- This could be "1, 2, 3", "a, b, c", or a number of others. The list style
	-- type is either set by the "type" attribute or the "list-style-type" CSS
	-- property.
	if listType == 'ordered' or listType == 'horizontal_ordered' then 
		data.listStyleType = args.list_style_type or args['list-style-type']
		data.type = args['type']

		-- Detect invalid type attributes and attempt to convert them to
		-- list-style-type CSS properties.
		if data.type 
			and not data.listStyleType
			and not tostring(data.type):find('^%s*[1AaIi]%s*$')
		then
			data.listStyleType = data.type
			data.type = nil
		end
	end
	
	-- List tag type
	if listType == 'ordered' or listType == 'horizontal_ordered' then
		data.listTag = 'ol'
	else
		data.listTag = 'ul'
	end

	-- Start number for ordered lists
	data.start = args.start
	if listType == 'horizontal_ordered' then
		-- Apply fix to get start numbers working with horizontal ordered lists.
		local startNum = tonumber(data.start)
		if startNum then
			data.counterReset = 'listitem ' .. tostring(startNum - 1)
		end
	end

	-- List style
	 -- ul_style and ol_style are included for backwards compatibility. No
	 -- distinction is made for ordered or unordered lists.
	data.listStyle = args.list_style

	-- List items
	-- li_style is included for backwards compatibility. item_style was included
	-- to be easier to understand for non-coders.
	data.itemStyle = args.item_style or args.li_style
	data.items = {}
	for i, num in ipairs(mTableTools.numKeys(args)) do
		local item = {}
		item.content = args[num]
		item.style = args['item' .. tostring(num) .. '_style']
			or args['item_style' .. tostring(num)]
		item.value = args['item' .. tostring(num) .. '_value']
			or args['item_value' .. tostring(num)]
		table.insert(data.items, item)
	end
	
	return data
end

function p.renderList(data)
	-- Renders the list HTML.
	
	-- Return the blank string if there are no list items.
	if type(data.items) ~= 'table' or #data.items &lt; 1 then
		return ''
	end
	
	-- Render the main div tag.
	local root = mw.html.create('div')
	for i, class in ipairs(data.classes or {}) do
		root:addClass(class)
	end
	root:css{['margin-left'] = data.marginLeft}
	if data.style then
		root:cssText(data.style)
	end

	-- Render the list tag.
	local list = root:tag(data.listTag or 'ul')
	list
		:attr{start = data.start, type = data.type}
		:css{
			['counter-reset'] = data.counterReset,
			['list-style-type'] = data.listStyleType
		}
	if data.listStyle then
		list:cssText(data.listStyle)
	end

	-- Render the list items
	for i, t in ipairs(data.items or {}) do
		local item = list:tag('li')
		if data.itemStyle then
			item:cssText(data.itemStyle)
		end
		if t.style then
			item:cssText(t.style)
		end
		item
			:attr{value = t.value}
			:wikitext(t.content)
	end

	return tostring(root)
end

function p.renderTrackingCategories(args)
	local isDeprecated = false -- Tracks deprecated parameters.
	for k, v in pairs(args) do
		k = tostring(k)
		if k:find('^item_style%d+$') or k:find('^item_value%d+$') then
			isDeprecated = true
			break
		end
	end
	local ret = ''
	if isDeprecated then
		ret = ret .. '[[Category:List templates with deprecated parameters]]'
	end
	return ret
end

function p.makeList(listType, args)
	if not listType or not listTypes[listType] then
		error(string.format(
			"bad argument #1 to 'makeList' ('%s' is not a valid list type)",
			tostring(listType)
		), 2)
	end
	checkType('makeList', 2, args, 'table')
	local data = p.makeListData(listType, args)
	local list = p.renderList(data)
	local trackingCategories = p.renderTrackingCategories(args)
	return list .. trackingCategories
end

for listType in pairs(listTypes) do
	p[listType] = function (frame)
		local mArguments = require('Module:Arguments')
		local origArgs = mArguments.getArgs(frame)
		-- Copy all the arguments to a new table, for faster indexing.
		local args = {}
		for k, v in pairs(origArgs) do
			args[k] = v
		end
		return p.makeList(listType, args)
	end
end

return p</text>
      <sha1>lkqmcmpfob2c6xhq46f675tm6p136ns</sha1>
    </revision>
  </page>
  <page>
    <title>Module:LangSwitch</title>
    <ns>828</ns>
    <id>58744344</id>
    <revision>
      <id>1186340494</id>
      <parentid>1186340490</parentid>
      <timestamp>2020-05-21T10:42:29Z</timestamp>
      <contributor>
        <username>Jasper Deng</username>
        <id>3724</id>
      </contributor>
      <minor/>
      <comment>7 revisions imported from [[:commons:Module:LangSwitch]]: Introducing this template for use by me and other CU's</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="3605" xml:space="preserve">--[[
  __  __           _       _        _                      ____          _ _       _     
 |  \/  | ___   __| |_   _| | ___ _| |    __ _ _ __   __ _/ ___|_      _(_) |_ ___| |__  
 | |\/| |/ _ \ / _` | | | | |/ _ (_) |   / _` | '_ \ / _` \___ \ \ /\ / / | __/ __| '_ \ 
 | |  | | (_) | (_| | |_| | |  __/_| |__| (_| | | | | (_| |___) \ V  V /| | || (__| | | |
 |_|  |_|\___/ \__,_|\__,_|_|\___(_)_____\__,_|_| |_|\__, |____/ \_/\_/ |_|\__\___|_| |_|
                                                     |___/                               
 Authors and maintainers:
* User:Zolo   - original version in Module:Fallback
* User:Jarekt 
]]

-- add optional module 
-- used for debugging purposes as it detects cases of unintended global variables
require('Module:No globals') 

local p = {}

--[[
_langSwitch
 
This function is the core part of the LangSwitch template. 
 
Example usage from Lua:
text = _langSwitch({en='text in english', pl='tekst po polsku'}, lang)
 
Parameters:
  args - table with translations by language
  lang - desired language (often user's native language)

 Error Handling:

]]

function p._langSwitch(args, lang) -- args: table of translations
	-- Return error if there is not default and no english version
	if not args.en and not args.default then
		local err = '&lt;b class="error"&gt;LangSwitch Error: no default&lt;/b&gt;'
		if args.nocat == '1' then
			return err
		else
			return err .. '[[Category:LangSwitch template without default version]]'
		end
	end
	
	-- To improve performance try quick switch, and load fallback chain only if needed. 
	-- In the vast majority of cases fast switch is sufficient
	local val = args[lang]
	if val == '~' then 
		return ''
	elseif val and val ~= '' then 
		return val 
	elseif args.quick then
		return nil
	end
	
	-- get the list of accepetable language (lang + those in lang's fallback chain) and check their content
	assert(lang, 'LangSwitch Error: no lang')
	local langList = mw.language.getFallbacksFor(lang)
	table.insert(langList,1,lang)
	table.insert(langList,math.max(#langList,2),'default')
	for _, language in ipairs(langList) do 
		val = args[language]
		if val == '~' then 
			return ''
		elseif val and val ~= '' then 
			return val 
		end
	end
end

--[[
langSwitch
 
This function is the core part of the LangSwitch template. 
 
Example Usage from a template:
{{#invoke:fallback|langSwitch|en=text in english|pl=tekst po polsku|lang={{int:lang}} }}
 
Parameters:
  frame.args - table with translations by language
  frame.args.lang - desired language (often user's native language)

 Error Handling:

]]
function p.langSwitch(frame) -- version to be used from wikitext
	local args = frame.args
	-- if no expected args provided than check parent template/module args
	if args.en==nil and args.default==nil and args.nocat==nil then
		args = mw.getCurrentFrame():getParent().args 
	end
	local lang = args.lang
	if not lang or not mw.language.isKnownLanguageTag(lang) then
		lang = frame:callParserFunction( "int", "lang" ) -- get user's chosen language 
	end
	
	-- Try quick switch which checks the most likely option when fallback is not needed
	args.quick = true;
	local val = p._langSwitch(args, lang)
	if val then
		return val
	end
	
	-- Allow input in format: {{LangSwitch|de=Grün|es/it/pt=Verde|fr=Vert|en=Green |lang=en}}
	-- with multiple languages mapping to a single value
	local args1 = {}
	for name, value in pairs( args ) do 
		if value ~= '' and type(name)=='string' then 
    		for str in string.gmatch( name, "([^/]+)" ) do
				args1[str] = value
			end
		end
	end
	return p._langSwitch(args1, lang)
end

return p</text>
      <sha1>ge4t4wror9xeh52b9vmyxkjjycyb6u5</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Fallback</title>
    <ns>828</ns>
    <id>19181086</id>
    <revision>
      <id>714642825</id>
      <parentid>714642495</parentid>
      <timestamp>2018-07-23T16:35:03Z</timestamp>
      <contributor>
        <username>Matěj Suchánek</username>
        <id>53613</id>
      </contributor>
      <minor/>
      <comment>fix</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="5559" xml:space="preserve">local p = {}

function p.fblist(lang, langonly) -- list the full fallback chain from a language to en
	local fbtable = mw.language.getFallbacksFor(lang)
	table.insert(fbtable, 1, lang)
	if not langonly then
		table.insert(fbtable, 'message')
		table.insert(fbtable, 'item')
		table.insert(fbtable, 'default')
	end
	return fbtable
end

function p._langSwitch(args, lang) -- args: table of translations
	-- Return error if there is not default and no English version
	-- otherwise returns the message in the most appropriate, plus the lang code as a second value
	if not args.en and not args.default and not args.message and not args.item and args.nocat ~= '1' then
		return error("langSwitch error: no default")
	end
	-- get language (either stated one or user's default language)
	if not lang then
		return '&lt;strong class="error"&gt;LangSwitch Error: no lang&lt;/strong&gt;' -- must become proper error
	end
	-- get the list of acceptable language (lang + those in lang's fallback chain) and check their content
	for i, j in ipairs(p.fblist(lang)) do
		if args[j] then
			if args[j] == '~' then return nil, j end
			if j == 'item' then
				local label, lang = mw.wikibase.getLabelWithLang(args[j])
				if label then return label, lang
				else return args[j], 'en' end
			end
			if j == 'message' then return tostring(mw.message.new(args[j]):inLanguage(lang)) end -- if this is an interface message
			if args[j] ~= '' then return args[j], j end
		end
	end
	return nil
end

function p.langSwitch(frame) -- version to be used from wikitext
	local args = frame.args
	-- if no expected args provided than check parent template/module args
	if not args.en and not args.default and not args.nocat then
		args = frame:getParent().args
	end
	local lang
	if args.lang and args.lang ~= '' then
		lang = args.lang
		args.lang = nil
	else -- get user's chosen language
		lang = frame:preprocess( "{{int:lang}}" )
	end
	local str, language = p._langSwitch(args, lang)
	return str -- get the first value of the langSwitch, (the text) not the second (the language)
end

function p.fallbackpage(base, lang, formatting)
	local languages = p.fblist(lang)
	for i, lng in ipairs(languages) do
		if mw.title.new(base .. '/' .. lng).exists then
			if formatting == 'table' then
				return {base .. '/' .. lng, lng} -- returns name of the page + name of the language
			else
				return base .. '/' .. lng -- returns only the page
			end
		end
	end
	return base
end

function p.autotranslate(frame) -- logic for [[template:Autotranslate]]
	local args = frame.args
	if not args.lang or args.lang == '' then
		args.lang = frame:preprocess( "{{int:lang}}" )           -- get user's chosen language
	end

	-- find base page
	local base = args.base
	if not base or base == '' then
		return '&lt;strong class="error"&gt;Base page not provided for autotranslate&lt;/strong&gt;'
	end
	if string.sub(base, 2, 9) ~= 'emplate:' then
		base = 'Template:' .. base   -- base provided without 'Template:' part
	end

	-- find base template language subpage
	local page = p.fallbackpage(base, args.lang) --
	if (not page and base ~= args.base) then
		-- try the original args.base string. This case is only needed if base is not in template namespace
		page = p.fallbackpage(args.base, args.lang)
	end
	if not page then
		return string.format('&lt;strong class="error"&gt;no fallback page found for autotranslate (base=[[%s]], lang=%s)&lt;/strong&gt;', args.base, args.lang)
	end

	-- repack args in a standard table
	local newargs = {}
	for field, value in pairs(args) do
		if field ~= 'base' then
			newargs[field] = value
		end
	end

	-- Transclude {{page |....}} with template arguments the same as the ones passed to {{autotranslate}} template.
	return frame:expandTemplate{ title = page, args = newargs }
end

function p.translate(page, key, lang) --translate data stored in a module
	if type(page) == 'string' then -- if the requested translation table is not yet loaded
		page = require('Module:' .. page)
	end

	local val
	if page[key] then
		val = page[key]
	elseif page.keys and page.keys[key] then-- key 'keys" is an index of all keys, including redirects, see [[Module:i18n/datatype]]
		val = page.keys[key]
	end
	if not val then
		return '&lt;' .. key .. '&gt;'
	end
	return p._langSwitch(val, lang)
end

function p.translatelua(frame)
	local lang = frame.args.lang
	local page = require('Module:' .. mw.text.trim(frame.args[1])) -- page should only contain a simple of translations
	if not lang or mw.text.trim(lang) == '' then
		lang = frame:preprocess( "{{int:lang}}" )
	end
	if frame.args[2] then
		page = page[mw.text.trim(frame.args[2])]
	end
	return p._langSwitch(page, lang)
end

function p.runTests()
	local toFallbackTest = require('Module:Fallback/tests/fallbacks')
	local result = true

	mw.log('Testing fallback chains')
	for i, t in ipairs(toFallbackTest) do
		local fbtbl = table.concat(p.fblist(t.initial), ', ')
		local expected = table.concat(t.expected, ', ')
		local ret = (fbtbl == expected)
		mw.log(i, ret and 'passed' or 'FAILED', t.initial, (not ret) and ('FAILED\nis &gt;&gt;' .. fbtbl .. '&lt;&lt;\nbut should be &gt;&gt;' .. expected .. '&lt;&lt;\n') or '')
		result = result and ret
	end
	
	return result
end

function p.showTemplateArguments(frame)
-- list all input arguments of the template that calls "{{#invoke:Fallback|showTemplateArguments}}"
	local str = ''
	for name, value in pairs( frame:getParent().args ) do
		if str == '' then
			str = string.format('%s=%s', name, value)          -- argument #1
		else
			str = string.format('%s, %s=%s', str, name, value) -- the rest
		end
	end
	return str
end

return p</text>
      <sha1>6vr2in87podxnsj3x2jttt1r1qisf9q</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler/shared</title>
    <ns>828</ns>
    <id>51354321</id>
    <revision>
      <id>647173642</id>
      <parentid>647173641</parentid>
      <timestamp>2018-03-10T10:00:50Z</timestamp>
      <contributor>
        <username>Mbch331</username>
        <id>69441</id>
      </contributor>
      <minor/>
      <comment>7 revisions imported from [[:en:Module:Category_handler/shared]]: https://www.wikidata.org/w/index.php?title=Wikidata:Administrators%27_noticeboard&amp;oldid=647164909#Request_to_import_template:Cite_Q_from_ENWP</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="888" xml:space="preserve">-- This module contains shared functions used by [[Module:Category handler]]
-- and its submodules.

local p = {}

function p.matchesBlacklist(page, blacklist)
	for i, pattern in ipairs(blacklist) do
		local match = mw.ustring.match(page, pattern)
		if match then
			return true
		end
	end
	return false
end

function p.getParamMappings(useLoadData)
	local dataPage = 'Module:Namespace detect/data'
	if useLoadData then
		return mw.loadData(dataPage).mappings
	else
		return require(dataPage).mappings
	end
end

function p.getNamespaceParameters(titleObj, mappings)
	-- We don't use title.nsText for the namespace name because it adds
	-- underscores.
	local mappingsKey
	if titleObj.isTalkPage then
		mappingsKey = 'talk'
	else
		mappingsKey = mw.site.namespaces[titleObj.namespace].name
	end
	mappingsKey = mw.ustring.lower(mappingsKey)
	return mappings[mappingsKey] or {}
end

return p</text>
      <sha1>omlsnhudxz6juptvtxz7ns97jutbzc5</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler/data</title>
    <ns>828</ns>
    <id>51354320</id>
    <revision>
      <id>647173633</id>
      <parentid>647173632</parentid>
      <timestamp>2018-03-10T10:00:50Z</timestamp>
      <contributor>
        <username>Mbch331</username>
        <id>69441</id>
      </contributor>
      <minor/>
      <comment>5 revisions imported from [[:en:Module:Category_handler/data]]: https://www.wikidata.org/w/index.php?title=Wikidata:Administrators%27_noticeboard&amp;oldid=647164909#Request_to_import_template:Cite_Q_from_ENWP</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="631" xml:space="preserve">-- This module assembles data to be passed to [[Module:Category handler]] using
-- mw.loadData. This includes the configuration data and whether the current
-- page matches the title blacklist.

local data = require('Module:Category handler/config')
local mShared = require('Module:Category handler/shared')
local blacklist = require('Module:Category handler/blacklist')
local title = mw.title.getCurrentTitle()

data.currentTitleMatchesBlacklist = mShared.matchesBlacklist(
	title.prefixedText,
	blacklist
)

data.currentTitleNamespaceParameters = mShared.getNamespaceParameters(
	title,
	mShared.getParamMappings()
)

return data</text>
      <sha1>k26mwixuaeijisfddb0sxkg82iux8v4</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler/config</title>
    <ns>828</ns>
    <id>51354319</id>
    <revision>
      <id>647173626</id>
      <parentid>647173625</parentid>
      <timestamp>2018-03-10T10:00:50Z</timestamp>
      <contributor>
        <username>Mbch331</username>
        <id>69441</id>
      </contributor>
      <minor/>
      <comment>13 revisions imported from [[:en:Module:Category_handler/config]]: https://www.wikidata.org/w/index.php?title=Wikidata:Administrators%27_noticeboard&amp;oldid=647164909#Request_to_import_template:Cite_Q_from_ENWP</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="5755" xml:space="preserve">--------------------------------------------------------------------------------
--            [[Module:Category handler]] configuration data                  --
--       Language-specific parameter names and values can be set here.        --
--       For blacklist config, see [[Module:Category handler/blacklist]].     --
--------------------------------------------------------------------------------

local cfg = {} -- Don't edit this line.

--------------------------------------------------------------------------------
--                       Start configuration data                             --
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--                              Parameter names                               --
-- These configuration items specify custom parameter names.                  --
-- To add one extra name, you can use this format:                            --
--                                                                            --
-- foo = 'parameter name',                                                    --
--                                                                            --
-- To add multiple names, you can use this format:                            --
--                                                                            --
-- foo = {'parameter name 1', 'parameter name 2', 'parameter name 3'},        --
--------------------------------------------------------------------------------

cfg.parameters = {
	
	-- The nocat and categories parameter suppress
	-- categorisation. They are used with Module:Yesno, and work as follows:
	--
	-- cfg.nocat:
	-- Result of yesno()                        Effect
	-- true                                     Categorisation is suppressed
	-- false                                    Categorisation is allowed, and
	--                                          the blacklist check is skipped
	-- nil                                      Categorisation is allowed
	--
	-- cfg.categories:
	-- Result of yesno()                        Effect
	-- true                                     Categorisation is allowed, and
	--                                          the blacklist check is skipped
	-- false                                    Categorisation is suppressed
	-- nil                                      Categorisation is allowed
	nocat = 'nocat',
	categories = 'categories',
	
	-- The parameter name for the legacy "category2" parameter. This skips the
	-- blacklist if set to the cfg.category2Yes value, and suppresses
	-- categorisation if present but equal to anything other than
	-- cfg.category2Yes or cfg.category2Negative.
	category2 = 'category2',
	
	-- cfg.subpage is the parameter name to specify how to behave on subpages.
	subpage = 'subpage',
	
	-- The parameter for data to return in all namespaces.
	all = 'all',
	
	-- The parameter name for data to return if no data is specified for the
	-- namespace that is detected.
	other = 'other',
	
	-- The parameter name used to specify a page other than the current page;
	-- used for testing and demonstration.
	demopage = 'page',
}

--------------------------------------------------------------------------------
--                              Parameter values                              --
-- These are set values that can be used with certain parameters. Only one    --
-- value can be specified, like this:                                         --
--                                                                            --
-- cfg.foo = 'value name'                                                     --                                               --
--------------------------------------------------------------------------------

-- The following settings are used with the cfg.category2 parameter. Setting
-- cfg.category2 to cfg.category2Yes skips the blacklist, and if cfg.category2
-- is present but equal to anything other than cfg.category2Yes or
-- cfg.category2Negative then it supresses cateogrisation.
cfg.category2Yes = 'yes'
cfg.category2Negative = '¬'

-- The following settings are used with the cfg.subpage parameter.
-- cfg.subpageNo is the value to specify to not categorise on subpages;
-- cfg.subpageOnly is the value to specify to only categorise on subpages.
cfg.subpageNo = 'no'
cfg.subpageOnly = 'only'

--------------------------------------------------------------------------------
--                           Default namespaces                               --
-- This is a table of namespaces to categorise by default. The keys are the   --
-- namespace numbers.                                                         --
--------------------------------------------------------------------------------

cfg.defaultNamespaces = {
	[  0] = true, -- main
	[  6] = true, -- file
	[ 12] = true, -- help
	[ 14] = true, -- category
	[100] = true, -- portal
	[108] = true, -- book
}

--------------------------------------------------------------------------------
--                                Wrappers                                    --
-- This is a wrapper template or a list of wrapper templates to be passed to  --
-- [[Module:Arguments]].                                                      --
--------------------------------------------------------------------------------

cfg.wrappers = 'Template:Category handler'

--------------------------------------------------------------------------------
--                           End configuration data                           --
--------------------------------------------------------------------------------

return cfg -- Don't edit this line.</text>
      <sha1>6ga9hbq2pdwalsvx68i53dmbr421rq5</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler/blacklist</title>
    <ns>828</ns>
    <id>51354318</id>
    <revision>
      <id>647173610</id>
      <parentid>647173608</parentid>
      <timestamp>2018-03-10T10:00:49Z</timestamp>
      <contributor>
        <username>Mbch331</username>
        <id>69441</id>
      </contributor>
      <minor/>
      <comment>6 revisions imported from [[:en:Module:Category_handler/blacklist]]: https://www.wikidata.org/w/index.php?title=Wikidata:Administrators%27_noticeboard&amp;oldid=647164909#Request_to_import_template:Cite_Q_from_ENWP</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="764" xml:space="preserve">-- This module contains the blacklist used by [[Module:Category handler]].
-- Pages that match Lua patterns in this list will not be categorised unless
-- categorisation is explicitly requested.

return {
	'^Main Page$', -- don't categorise the main page.

	-- Don't categorise the following pages or their subpages.
	-- "%f[/\0]" matches if the next character is "/" or the end of the string.
	'^Wikipedia:Cascade%-protected items%f[/\0]',
	'^User:UBX%f[/\0]', -- The userbox "template" space.
	'^User talk:UBX%f[/\0]',

	-- Don't categorise subpages of these pages, but allow
	-- categorisation of the base page.
	'^Wikipedia:Template messages/.*$',

	-- Don't categorise archives.
	'/[aA]rchive',
	"^Wikipedia:Administrators' noticeboard/IncidentArchive%d+$",
}</text>
      <sha1>hwue3i1eua4tsdxlsbcs4f5syudywbe</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler</title>
    <ns>828</ns>
    <id>16757112</id>
    <revision>
      <id>647173599</id>
      <parentid>647173598</parentid>
      <timestamp>2018-03-10T10:00:49Z</timestamp>
      <contributor>
        <username>Mbch331</username>
        <id>69441</id>
      </contributor>
      <minor/>
      <comment>3 revisions imported from [[:en:Module:Category_handler]]: https://www.wikidata.org/w/index.php?title=Wikidata:Administrators%27_noticeboard&amp;oldid=647164909#Request_to_import_template:Cite_Q_from_ENWP</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="7871" xml:space="preserve">--------------------------------------------------------------------------------
--                                                                            --
--                              CATEGORY HANDLER                              --
--                                                                            --
--      This module implements the {{category handler}} template in Lua,      --
--      with a few improvements: all namespaces and all namespace aliases     --
--      are supported, and namespace names are detected automatically for     --
--      the local wiki. This module requires [[Module:Namespace detect]]      --
--      and [[Module:Yesno]] to be available on the local wiki. It can be     --
--      configured for different wikis by altering the values in              --
--      [[Module:Category handler/config]], and pages can be blacklisted      --
--      from categorisation by using [[Module:Category handler/blacklist]].   --
--                                                                            --
--------------------------------------------------------------------------------

-- Load required modules
local yesno = require('Module:Yesno')

-- Lazily load things we don't always need
local mShared, mappings

local p = {}

--------------------------------------------------------------------------------
-- Helper functions
--------------------------------------------------------------------------------

local function trimWhitespace(s, removeBlanks)
	if type(s) ~= 'string' then
		return s
	end
	s = s:match('^%s*(.-)%s*$')
	if removeBlanks then
		if s ~= '' then
			return s
		else
			return nil
		end
	else
		return s
	end
end

--------------------------------------------------------------------------------
-- CategoryHandler class
--------------------------------------------------------------------------------

local CategoryHandler = {}
CategoryHandler.__index = CategoryHandler

function CategoryHandler.new(data, args)
	local obj = setmetatable({ _data = data, _args = args }, CategoryHandler)
	
	-- Set the title object
	do
		local pagename = obj:parameter('demopage')
		local success, titleObj
		if pagename then
			success, titleObj = pcall(mw.title.new, pagename)
		end
		if success and titleObj then
			obj.title = titleObj
			if titleObj == mw.title.getCurrentTitle() then
				obj._usesCurrentTitle = true
			end
		else
			obj.title = mw.title.getCurrentTitle()
			obj._usesCurrentTitle = true
		end
	end

	-- Set suppression parameter values
	for _, key in ipairs{'nocat', 'categories'} do
		local value = obj:parameter(key)
		value = trimWhitespace(value, true)
		obj['_' .. key] = yesno(value)
	end
	do
		local subpage = obj:parameter('subpage')
		local category2 = obj:parameter('category2')
		if type(subpage) == 'string' then
			subpage = mw.ustring.lower(subpage)
		end
		if type(category2) == 'string' then
			subpage = mw.ustring.lower(category2)
		end
		obj._subpage = trimWhitespace(subpage, true)
		obj._category2 = trimWhitespace(category2) -- don't remove blank values
	end
	return obj
end

function CategoryHandler:parameter(key)
	local parameterNames = self._data.parameters[key]
	local pntype = type(parameterNames)
	if pntype == 'string' or pntype == 'number' then
		return self._args[parameterNames]
	elseif pntype == 'table' then
		for _, name in ipairs(parameterNames) do
			local value = self._args[name]
			if value ~= nil then
				return value
			end
		end
		return nil
	else
		error(string.format(
			'invalid config key "%s"',
			tostring(key)
		), 2)
	end
end

function CategoryHandler:isSuppressedByArguments()
	return
		-- See if a category suppression argument has been set.
		self._nocat == true
		or self._categories == false
		or (
			self._category2
			and self._category2 ~= self._data.category2Yes
			and self._category2 ~= self._data.category2Negative
		)

		-- Check whether we are on a subpage, and see if categories are
		-- suppressed based on our subpage status.
		or self._subpage == self._data.subpageNo and self.title.isSubpage
		or self._subpage == self._data.subpageOnly and not self.title.isSubpage
end

function CategoryHandler:shouldSkipBlacklistCheck()
	-- Check whether the category suppression arguments indicate we
	-- should skip the blacklist check.
	return self._nocat == false
		or self._categories == true
		or self._category2 == self._data.category2Yes
end

function CategoryHandler:matchesBlacklist()
	if self._usesCurrentTitle then
		return self._data.currentTitleMatchesBlacklist
	else
		mShared = mShared or require('Module:Category handler/shared')
		return mShared.matchesBlacklist(
			self.title.prefixedText,
			mw.loadData('Module:Category handler/blacklist')
		)
	end
end

function CategoryHandler:isSuppressed()
	-- Find if categories are suppressed by either the arguments or by
	-- matching the blacklist.
	return self:isSuppressedByArguments()
		or not self:shouldSkipBlacklistCheck() and self:matchesBlacklist()
end

function CategoryHandler:getNamespaceParameters()
	if self._usesCurrentTitle then
		return self._data.currentTitleNamespaceParameters
	else
		if not mappings then
			mShared = mShared or require('Module:Category handler/shared')
			mappings = mShared.getParamMappings(true) -- gets mappings with mw.loadData
		end
		return mShared.getNamespaceParameters(
			self.title,
			mappings
		)
	end
end

function CategoryHandler:namespaceParametersExist()
	-- Find whether any namespace parameters have been specified.
	-- We use the order "all" --&gt; namespace params --&gt; "other" as this is what
	-- the old template did.
	if self:parameter('all') then
		return true
	end
	if not mappings then
		mShared = mShared or require('Module:Category handler/shared')
		mappings = mShared.getParamMappings(true) -- gets mappings with mw.loadData
	end
	for ns, params in pairs(mappings) do
		for i, param in ipairs(params) do
			if self._args[param] then
				return true
			end
		end
	end
	if self:parameter('other') then
		return true
	end
	return false
end

function CategoryHandler:getCategories()
	local params = self:getNamespaceParameters()
	local nsCategory
	for i, param in ipairs(params) do
		local value = self._args[param]
		if value ~= nil then
			nsCategory = value
			break
		end
	end
	if nsCategory ~= nil or self:namespaceParametersExist() then
		-- Namespace parameters exist - advanced usage.
		if nsCategory == nil then
			nsCategory = self:parameter('other')
		end
		local ret = {self:parameter('all')}
		local numParam = tonumber(nsCategory)
		if numParam and numParam &gt;= 1 and math.floor(numParam) == numParam then
			-- nsCategory is an integer
			ret[#ret + 1] = self._args[numParam]
		else
			ret[#ret + 1] = nsCategory
		end
		if #ret &lt; 1 then
			return nil
		else
			return table.concat(ret)
		end
	elseif self._data.defaultNamespaces[self.title.namespace] then
		-- Namespace parameters don't exist, simple usage.
		return self._args[1]
	end
	return nil
end

--------------------------------------------------------------------------------
-- Exports
--------------------------------------------------------------------------------

local p = {}

function p._exportClasses()
	-- Used for testing purposes.
	return {
		CategoryHandler = CategoryHandler
	}
end

function p._main(args, data)
	data = data or mw.loadData('Module:Category handler/data')
	local handler = CategoryHandler.new(data, args)
	if handler:isSuppressed() then
		return nil
	end
	return handler:getCategories()
end

function p.main(frame, data)
	data = data or mw.loadData('Module:Category handler/data')
	local args = require('Module:Arguments').getArgs(frame, {
		wrappers = data.wrappers,
		valueFunc = function (k, v)
			v = trimWhitespace(v)
			if type(k) == 'number' then
				if v ~= '' then
					return v
				else
					return nil
				end
			else
				return v
			end
		end
	})
	return p._main(args, data)
end

return p</text>
      <sha1>letwavu3yvlayfzew66uuwixmwebq5b</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Arguments</title>
    <ns>828</ns>
    <id>20078637</id>
    <revision>
      <id>1340914682</id>
      <parentid>1331513738</parentid>
      <timestamp>2021-01-14T13:56:02Z</timestamp>
      <contributor>
        <username>Sannita</username>
        <id>3223</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:en:Module:Arguments]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="10054" xml:space="preserve">-- This module provides easy processing of arguments passed to Scribunto from
-- #invoke. It is intended for use by other Lua modules, and should not be
-- called from #invoke directly.

local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType

local arguments = {}

-- Generate four different tidyVal functions, so that we don't have to check the
-- options every time we call it.

local function tidyValDefault(key, val)
	if type(val) == 'string' then
		val = val:match('^%s*(.-)%s*$')
		if val == '' then
			return nil
		else
			return val
		end
	else
		return val
	end
end

local function tidyValTrimOnly(key, val)
	if type(val) == 'string' then
		return val:match('^%s*(.-)%s*$')
	else
		return val
	end
end

local function tidyValRemoveBlanksOnly(key, val)
	if type(val) == 'string' then
		if val:find('%S') then
			return val
		else
			return nil
		end
	else
		return val
	end
end

local function tidyValNoChange(key, val)
	return val
end

local function matchesTitle(given, title)
	local tp = type( given )
	return (tp == 'string' or tp == 'number') and mw.title.new( given ).prefixedText == title
end

local translate_mt = { __index = function(t, k) return k end }

function arguments.getArgs(frame, options)
	checkType('getArgs', 1, frame, 'table', true)
	checkType('getArgs', 2, options, 'table', true)
	frame = frame or {}
	options = options or {}

	--[[
	-- Set up argument translation.
	--]]
	options.translate = options.translate or {}
	if getmetatable(options.translate) == nil then
		setmetatable(options.translate, translate_mt)
	end
	if options.backtranslate == nil then
		options.backtranslate = {}
		for k,v in pairs(options.translate) do
			options.backtranslate[v] = k
		end
	end
	if options.backtranslate and getmetatable(options.backtranslate) == nil then
		setmetatable(options.backtranslate, {
			__index = function(t, k)
				if options.translate[k] ~= k then
					return nil
				else
					return k
				end
			end
		})
	end

	--[[
	-- Get the argument tables. If we were passed a valid frame object, get the
	-- frame arguments (fargs) and the parent frame arguments (pargs), depending
	-- on the options set and on the parent frame's availability. If we weren't
	-- passed a valid frame object, we are being called from another Lua module
	-- or from the debug console, so assume that we were passed a table of args
	-- directly, and assign it to a new variable (luaArgs).
	--]]
	local fargs, pargs, luaArgs
	if type(frame.args) == 'table' and type(frame.getParent) == 'function' then
		if options.wrappers then
			--[[
			-- The wrappers option makes Module:Arguments look up arguments in
			-- either the frame argument table or the parent argument table, but
			-- not both. This means that users can use either the #invoke syntax
			-- or a wrapper template without the loss of performance associated
			-- with looking arguments up in both the frame and the parent frame.
			-- Module:Arguments will look up arguments in the parent frame
			-- if it finds the parent frame's title in options.wrapper;
			-- otherwise it will look up arguments in the frame object passed
			-- to getArgs.
			--]]
			local parent = frame:getParent()
			if not parent then
				fargs = frame.args
			else
				local title = parent:getTitle():gsub('/sandbox$', '')
				local found = false
				if matchesTitle(options.wrappers, title) then
					found = true
				elseif type(options.wrappers) == 'table' then
					for _,v in pairs(options.wrappers) do
						if matchesTitle(v, title) then
							found = true
							break
						end
					end
				end

				-- We test for false specifically here so that nil (the default) acts like true.
				if found or options.frameOnly == false then
					pargs = parent.args
				end
				if not found or options.parentOnly == false then
					fargs = frame.args
				end
			end
		else
			-- options.wrapper isn't set, so check the other options.
			if not options.parentOnly then
				fargs = frame.args
			end
			if not options.frameOnly then
				local parent = frame:getParent()
				pargs = parent and parent.args or nil
			end
		end
		if options.parentFirst then
			fargs, pargs = pargs, fargs
		end
	else
		luaArgs = frame
	end

	-- Set the order of precedence of the argument tables. If the variables are
	-- nil, nothing will be added to the table, which is how we avoid clashes
	-- between the frame/parent args and the Lua args.
	local argTables = {fargs}
	argTables[#argTables + 1] = pargs
	argTables[#argTables + 1] = luaArgs

	--[[
	-- Generate the tidyVal function. If it has been specified by the user, we
	-- use that; if not, we choose one of four functions depending on the
	-- options chosen. This is so that we don't have to call the options table
	-- every time the function is called.
	--]]
	local tidyVal = options.valueFunc
	if tidyVal then
		if type(tidyVal) ~= 'function' then
			error(
				"bad value assigned to option 'valueFunc'"
					.. '(function expected, got '
					.. type(tidyVal)
					.. ')',
				2
			)
		end
	elseif options.trim ~= false then
		if options.removeBlanks ~= false then
			tidyVal = tidyValDefault
		else
			tidyVal = tidyValTrimOnly
		end
	else
		if options.removeBlanks ~= false then
			tidyVal = tidyValRemoveBlanksOnly
		else
			tidyVal = tidyValNoChange
		end
	end

	--[[
	-- Set up the args, metaArgs and nilArgs tables. args will be the one
	-- accessed from functions, and metaArgs will hold the actual arguments. Nil
	-- arguments are memoized in nilArgs, and the metatable connects all of them
	-- together.
	--]]
	local args, metaArgs, nilArgs, metatable = {}, {}, {}, {}
	setmetatable(args, metatable)

	local function mergeArgs(tables)
		--[[
		-- Accepts multiple tables as input and merges their keys and values
		-- into one table. If a value is already present it is not overwritten;
		-- tables listed earlier have precedence. We are also memoizing nil
		-- values, which can be overwritten if they are 's' (soft).
		--]]
		for _, t in ipairs(tables) do
			for key, val in pairs(t) do
				if metaArgs[key] == nil and nilArgs[key] ~= 'h' then
					local tidiedVal = tidyVal(key, val)
					if tidiedVal == nil then
						nilArgs[key] = 's'
					else
						metaArgs[key] = tidiedVal
					end
				end
			end
		end
	end

	--[[
	-- Define metatable behaviour. Arguments are memoized in the metaArgs table,
	-- and are only fetched from the argument tables once. Fetching arguments
	-- from the argument tables is the most resource-intensive step in this
	-- module, so we try and avoid it where possible. For this reason, nil
	-- arguments are also memoized, in the nilArgs table. Also, we keep a record
	-- in the metatable of when pairs and ipairs have been called, so we do not
	-- run pairs and ipairs on the argument tables more than once. We also do
	-- not run ipairs on fargs and pargs if pairs has already been run, as all
	-- the arguments will already have been copied over.
	--]]

	metatable.__index = function (t, key)
		--[[
		-- Fetches an argument when the args table is indexed. First we check
		-- to see if the value is memoized, and if not we try and fetch it from
		-- the argument tables. When we check memoization, we need to check
		-- metaArgs before nilArgs, as both can be non-nil at the same time.
		-- If the argument is not present in metaArgs, we also check whether
		-- pairs has been run yet. If pairs has already been run, we return nil.
		-- This is because all the arguments will have already been copied into
		-- metaArgs by the mergeArgs function, meaning that any other arguments
		-- must be nil.
		--]]
		if type(key) == 'string' then
			key = options.translate[key]
		end
		local val = metaArgs[key]
		if val ~= nil then
			return val
		elseif metatable.donePairs or nilArgs[key] then
			return nil
		end
		for _, argTable in ipairs(argTables) do
			local argTableVal = tidyVal(key, argTable[key])
			if argTableVal ~= nil then
				metaArgs[key] = argTableVal
				return argTableVal
			end
		end
		nilArgs[key] = 'h'
		return nil
	end

	metatable.__newindex = function (t, key, val)
		-- This function is called when a module tries to add a new value to the
		-- args table, or tries to change an existing value.
		if type(key) == 'string' then
			key = options.translate[key]
		end
		if options.readOnly then
			error(
				'could not write to argument table key "'
					.. tostring(key)
					.. '"; the table is read-only',
				2
			)
		elseif options.noOverwrite and args[key] ~= nil then
			error(
				'could not write to argument table key "'
					.. tostring(key)
					.. '"; overwriting existing arguments is not permitted',
				2
			)
		elseif val == nil then
			--[[
			-- If the argument is to be overwritten with nil, we need to erase
			-- the value in metaArgs, so that __index, __pairs and __ipairs do
			-- not use a previous existing value, if present; and we also need
			-- to memoize the nil in nilArgs, so that the value isn't looked
			-- up in the argument tables if it is accessed again.
			--]]
			metaArgs[key] = nil
			nilArgs[key] = 'h'
		else
			metaArgs[key] = val
		end
	end

	local function translatenext(invariant)
		local k, v = next(invariant.t, invariant.k)
		invariant.k = k
		if k == nil then
			return nil
		elseif type(k) ~= 'string' or not options.backtranslate then
			return k, v
		else
			local backtranslate = options.backtranslate[k]
			if backtranslate == nil then
				-- Skip this one. This is a tail call, so this won't cause stack overflow
				return translatenext(invariant)
			else
				return backtranslate, v
			end
		end
	end

	metatable.__pairs = function ()
		-- Called when pairs is run on the args table.
		if not metatable.donePairs then
			mergeArgs(argTables)
			metatable.donePairs = true
		end
		return translatenext, { t = metaArgs }
	end

	local function inext(t, i)
		-- This uses our __index metamethod
		local v = t[i + 1]
		if v ~= nil then
			return i + 1, v
		end
	end

	metatable.__ipairs = function (t)
		-- Called when ipairs is run on the args table.
		return inext, t, 0
	end

	return args
end

return arguments</text>
      <sha1>5qx9tzlul9ser30uxj9nbasjt92cevn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:TranslateThis</title>
    <ns>10</ns>
    <id>16552759</id>
    <revision>
      <id>483148362</id>
      <parentid>483129342</parentid>
      <timestamp>2017-05-08T01:54:31Z</timestamp>
      <contributor>
        <username>MKar</username>
        <id>6110</id>
      </contributor>
      <minor/>
      <comment>Undid revision 483129342 by [[Special:Contributions/70.71.90.6|70.71.90.6]] ([[User talk:70.71.90.6|talk]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="97" xml:space="preserve">&lt;includeonly&gt;{{#invoke:TranslateThis|main}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>rm4lztokzfib496c8sbt9q36vx6n9tz</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Tld</title>
    <ns>10</ns>
    <id>33187</id>
    <revision>
      <id>489503</id>
      <parentid>466891</parentid>
      <timestamp>2012-11-18T19:25:14Z</timestamp>
      <contributor>
        <username>Raoli</username>
        <id>4896</id>
      </contributor>
      <minor/>
      <comment>[[q:it:Aiuto:Gadget-HotCatMulti|HotCatMulti]] :  ± [[Category:Templates]]-&gt;[[Category:Internal link templates]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="726" xml:space="preserve">{{#ifeq:{{{allowlinebreak|}}}|yes||&lt;span style="white-space:nowrap;"&gt;}}&lt;code&gt;&amp;#123;&amp;#123;{{#if:{{{1|}}}|{{{1}}}| tld&amp;#124;...}}&lt;!--
--&gt;{{#ifeq:{{{2|x}}}|{{{2|}}}| &amp;#124;{{{2}}} | }}&lt;!--
--&gt;{{#ifeq:{{{3|x}}}|{{{3|}}}| &amp;#124;{{{3}}} | }}&lt;!--
--&gt;{{#ifeq:{{{4|x}}}|{{{4|}}}| &amp;#124;{{{4}}} | }}&lt;!--
--&gt;{{#ifeq:{{{5|x}}}|{{{5|}}}| &amp;#124;{{{5}}} | }}&lt;!--
--&gt;{{#ifeq:{{{6|x}}}|{{{6|}}}| &amp;#124;{{{6}}} | }}&lt;!--
--&gt;{{#ifeq:{{{7|x}}}|{{{7|}}}| &amp;#124;{{{7}}} | }}&lt;!--
--&gt;{{#ifeq:{{{8|x}}}|{{{8|}}}| &amp;#124;{{{8}}} | }}&lt;!--
--&gt;{{#ifeq:{{{9|x}}}|{{{9|}}}| &amp;#124;{{{9}}} | }}&lt;!--
--&gt;&amp;#125;&amp;#125;&lt;/code&gt;{{#ifeq:{{{allowlinebreak|}}}|yes||&lt;/span&gt;}}&lt;noinclude&gt;
{{Documentation|Template:Tlc/doc}}
[[Category:Internal link templates]]
&lt;/noinclude&gt;</text>
      <sha1>kv8gydwfj1axf4gkeotwv188p0dyxfs</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Tl</title>
    <ns>10</ns>
    <id>3170</id>
    <revision>
      <id>1340914302</id>
      <parentid>1335418558</parentid>
      <timestamp>2021-01-14T13:55:34Z</timestamp>
      <contributor>
        <username>Sannita</username>
        <id>3223</id>
      </contributor>
      <minor/>
      <comment>3 revisions imported from [[:en:Template:Tl]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="733" xml:space="preserve">&lt;includeonly&gt;&lt;code&gt;&amp;#123;&amp;#123;{{#if:{{{subst|}}}|subst:}}{{#ifeq:{{padleft:|1|{{{1}}}}}|:|&amp;#58;[[{{FULLPAGENAME:{{{1}}}}}]]|{{#switch:{{NAMESPACE:{{{1}}}}}|{{ns:0}}|{{ns:10}}=[[{{ns:10}}:{{PAGENAME:{{{1}}}}}|{{PAGENAME:{{{1}}}}}]]|{{ns:6}}|{{ns:14}}=[[:{{{1}}}]]|#default=[[{{{1}}}]]}}}}{{#ifeq:{{{2|x}}}|{{{2}}}|&amp;#124;{{{2}}}}}{{#ifeq:{{{3|x}}}|{{{3}}}|&amp;#124;{{{3}}}}}{{#ifeq:{{{4|x}}}|{{{4}}}|&amp;#124;{{{4}}}}}{{#ifeq:{{{5|x}}}|{{{5}}}|&amp;#124;{{{5}}}}}{{#ifeq:{{{6|x}}}|{{{6}}}|&amp;#124;{{{6}}}}}{{#ifeq:{{{7|x}}}|{{{7}}}|&amp;#124;{{{7}}}}}{{#ifeq:{{{8|x}}}|{{{8}}}|&amp;#124;{{{8}}}}}{{#ifeq:{{{9|x}}}|{{{9}}}|&amp;#124;{{{9}}}}}{{#ifeq:{{{10|x}}}|{{{10}}}|&amp;#124;{{{10}}}}}&amp;#125;&amp;#125;&lt;/code&gt;&lt;/includeonly&gt;&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>l20yhf35x51eiwqv99p3amcocod6xza</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Template other</title>
    <ns>10</ns>
    <id>108682</id>
    <revision>
      <id>1340914293</id>
      <parentid>1340914291</parentid>
      <timestamp>2021-01-14T13:55:33Z</timestamp>
      <contributor>
        <username>Sannita</username>
        <id>3223</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:en:Template:Template_other]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="435" xml:space="preserve">{{#switch:
  &lt;!--If no or empty "demospace" parameter then detect namespace--&gt;
  {{#if:{{{demospace|}}}
  | {{lc: {{{demospace}}} }}    &lt;!--Use lower case "demospace"--&gt;
  | {{#ifeq:{{NAMESPACE}}|{{ns:Template}}
    | template
    | other
    }}
  }}
| template = {{{1|}}}
| other
| #default = {{{2|}}}
}}&lt;!--End switch--&gt;&lt;noinclude&gt;

{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>0tcssjmltwl7y5v3f5wj2kqciaabqly</sha1>
    </revision>
  </page>
  <page>
    <title>Template:TemplateBox/layout</title>
    <ns>10</ns>
    <id>4168667</id>
    <revision>
      <id>1102107258</id>
      <parentid>29532622</parentid>
      <timestamp>2020-01-20T23:52:02Z</timestamp>
      <contributor>
        <username>DannyS712</username>
        <id>3032627</id>
      </contributor>
      <minor/>
      <comment>Fixing lint errors ([[Special:LintErrors/obsolete-tag]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="24438" xml:space="preserve">&lt;nowiki/&gt; __NOEDITSECTION__
{{Documentation subpage|page={{{docsub-page|}}}}}

{{#if: {{{desc|}}} | {{{msg-languagedependant|}}}
&lt;div style="border: 1px solid #cccccc; padding: 0.2em;"&gt;
{{{desc}}}
&lt;/div&gt; | {{{msg-nodesc|}}} }}{{#if: {{{setscats|}}} |&lt;nowiki/&gt;

{{{msg-setscats}}}
{{{setscats|}}}
}}
== {{{msg-usage|}}} ==

&lt;code&gt;
&lt;nowiki&gt;{{&lt;/nowiki&gt;{{#if:{{{mustbesubst|}}}|subst&amp;#58;|}}{{#if: {{{name|}}} | {{{name}}} | {{PAGENAME}} }}{{#switch:{{{lines|}}}|multi={{#if: {{{1|}}}{{{2|}}}{{{3|}}}{{{4|}}}{{{5|}}}{{{6|}}}{{{7|}}}{{{8|}}}{{{9|}}}{{{10|}}}{{{11|}}}{{{12|}}}{{{13|}}}{{{14|}}}{{{15|}}}{{{16|}}}{{{17|}}}{{{18|}}}{{{19|}}}{{{20|}}}{{{21|}}}{{{22|}}}{{{23|}}}{{{24|}}}{{{25|}}}{{{26|}}}{{{27|}}}{{{28|}}}{{{29|}}}{{{30|}}} | &lt;br/&gt; }}|one=}}&lt;!--  
--&gt;{{#if: {{#switch: {{{1stat|}}} |optional-=|#default={{{1|}}} }} | {{!}}{{{1|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{2stat|}}} |optional-=|#default={{{2|}}} }} | {{!}}{{{2|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{3stat|}}} |optional-=|#default={{{3|}}} }} | {{!}}{{{3|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{4stat|}}} |optional-=|#default={{{4|}}} }} | {{!}}{{{4|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{5stat|}}} |optional-=|#default={{{5|}}} }} | {{!}}{{{5|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{6stat|}}} |optional-=|#default={{{6|}}} }} | {{!}}{{{6|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{7stat|}}} |optional-=|#default={{{7|}}} }} | {{!}}{{{7|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{8stat|}}} |optional-=|#default={{{8|}}} }} | {{!}}{{{8|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{9stat|}}} |optional-=|#default={{{9|}}} }} | {{!}}{{{9|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{10stat|}}} |optional-=|#default={{{10|}}} }} | {{!}}{{{10|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{11stat|}}} |optional-=|#default={{{11|}}} }} | {{!}}{{{11|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{12stat|}}} |optional-=|#default={{{12|}}} }} | {{!}}{{{12|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{13stat|}}} |optional-=|#default={{{13|}}} }} | {{!}}{{{13|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{14stat|}}} |optional-=|#default={{{14|}}} }} | {{!}}{{{14|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{15stat|}}} |optional-=|#default={{{15|}}} }} | {{!}}{{{15|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{16stat|}}} |optional-=|#default={{{16|}}} }} | {{!}}{{{16|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{17stat|}}} |optional-=|#default={{{17|}}} }} | {{!}}{{{17|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{18stat|}}} |optional-=|#default={{{18|}}} }} | {{!}}{{{18|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{19stat|}}} |optional-=|#default={{{19|}}} }} | {{!}}{{{19|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{20stat|}}} |optional-=|#default={{{20|}}} }} | {{!}}{{{20|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{21stat|}}} |optional-=|#default={{{21|}}} }} | {{!}}{{{21|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{22stat|}}} |optional-=|#default={{{22|}}} }} | {{!}}{{{22|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{23stat|}}} |optional-=|#default={{{23|}}} }} | {{!}}{{{23|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{24stat|}}} |optional-=|#default={{{24|}}} }} | {{!}}{{{24|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{25stat|}}} |optional-=|#default={{{25|}}} }} | {{!}}{{{25|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{26stat|}}} |optional-=|#default={{{26|}}} }} | {{!}}{{{26|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{27stat|}}} |optional-=|#default={{{27|}}} }} | {{!}}{{{27|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{28stat|}}} |optional-=|#default={{{28|}}} }} | {{!}}{{{28|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{29stat|}}} |optional-=|#default={{{29|}}} }} | {{!}}{{{29|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;!--  
--&gt;{{#if: {{#switch: {{{30stat|}}} |optional-=|#default={{{30|}}} }} | {{!}}{{{30|}}}={{#switch:{{{lines|}}}|multi=&lt;br/&gt;|one=}} }}&lt;nowiki&gt;}}&lt;/nowiki&gt;
&lt;/code&gt;{{#if: {{{shorthand|}}} |&lt;nowiki/&gt;

{{{msg-shorthand|}}}{{#ifexist: Template:{{{shorthand|}}} | &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{{shorthand}}}{{#if: {{{1|}}}{{{2|}}}{{{3|}}}{{{4|}}}{{{5|}}}{{{6|}}}{{{7|}}}{{{8|}}}{{{9|}}}{{{10|}}}{{{11|}}}{{{12|}}}{{{13|}}}{{{14|}}}{{{15|}}}{{{16|}}}{{{17|}}}{{{18|}}}{{{19|}}}{{{20|}}}{{{21|}}}{{{22|}}}{{{23|}}}{{{24|}}}{{{25|}}}{{{26|}}}{{{27|}}}{{{28|}}}{{{29|}}}{{{30|}}} | {{!}}... }}&lt;nowiki&gt;}}&lt;/nowiki&gt;&lt;/code&gt; | {{{shorthand}}} }}
}}{{#if: {{{usage-notes|}}} |&lt;nowiki/&gt;

{{{msg-languagedependant|}}}
&lt;div style="border: 1px solid #cccccc; padding: 0.2em;"&gt;
{{{usage-notes}}}
&lt;/div&gt;
}}{{#if: {{{1|}}}{{{2|}}}{{{3|}}}{{{4|}}}{{{5|}}}{{{6|}}}{{{7|}}}{{{8|}}}{{{9|}}}{{{10|}}}{{{11|}}}{{{12|}}}{{{13|}}}{{{14|}}}{{{15|}}}{{{16|}}}{{{17|}}}{{{18|}}}{{{19|}}}{{{20|}}}{{{21|}}}{{{22|}}}{{{23|}}}{{{24|}}}{{{25|}}}{{{26|}}}{{{27|}}}{{{28|}}}{{{29|}}}{{{30|}}} |&lt;nowiki/&gt;
=== {{{msg-parameters|}}} ===

{{{!}} class="wikitable templatebox-table"
! style="width: 20%;" {{!}} {{{msg-table-paramname|}}} {{!}}{{!}} style="width: 60%;" {{!}} {{{msg-table-desc|}}}{{{msg-languagedependant|}}} {{!}}{{!}} style="width: 10%;" {{!}} {{{msg-table-defval|}}} {{!}}{{!}} style="width: 10%;" {{!}} {{{msg-table-reqopt|}}}
{{#if: {{{1|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{1|}}} | 1 | ''{{{msg-parameter-no|}}}1'' (1) | {{{1|}}} }}''' {{!}}{{!}} {{{1d|}}}
{{!}} {{#if: {{{1def|}}} | {{{1def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{1stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{2|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{2|}}} | 2 | ''{{{msg-parameter-no|}}}2'' (2) | {{{2|}}} }}''' {{!}}{{!}} {{{2d|}}}
{{!}} {{#if: {{{2def|}}} | {{{2def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{2stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{3|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{3|}}} | 3 | ''{{{msg-parameter-no|}}}3'' (3) | {{{3|}}} }}''' {{!}}{{!}} {{{3d|}}}
{{!}} {{#if: {{{3def|}}} | {{{3def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{3stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{4|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{4|}}} | 4 | ''{{{msg-parameter-no|}}}4'' (4) | {{{4|}}} }}''' {{!}}{{!}} {{{4d|}}}
{{!}} {{#if: {{{4def|}}} | {{{4def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{4stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{5|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{5|}}} | 5 | ''{{{msg-parameter-no|}}}5'' (5) | {{{5|}}} }}''' {{!}}{{!}} {{{5d|}}}
{{!}} {{#if: {{{5def|}}} | {{{5def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{5stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{6|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{6|}}} | 6 | ''{{{msg-parameter-no|}}}6'' (6) | {{{6|}}} }}''' {{!}}{{!}} {{{6d|}}}
{{!}} {{#if: {{{6def|}}} | {{{6def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{6stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{7|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{7|}}} | 7 | ''{{{msg-parameter-no|}}}7'' (7) | {{{7|}}} }}''' {{!}}{{!}} {{{7d|}}}
{{!}} {{#if: {{{7def|}}} | {{{7def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{7stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{8|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{8|}}} | 8 | ''{{{msg-parameter-no|}}}8'' (8) | {{{8|}}} }}''' {{!}}{{!}} {{{8d|}}}
{{!}} {{#if: {{{8def|}}} | {{{8def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{8stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{9|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{9|}}} | 9 | ''{{{msg-parameter-no|}}}9'' (9) | {{{9|}}} }}''' {{!}}{{!}} {{{9d|}}}
{{!}} {{#if: {{{9def|}}} | {{{9def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{9stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{10|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{10|}}} | 10 | ''{{{msg-parameter-no|}}}10'' (10) | {{{10|}}} }}''' {{!}}{{!}} {{{10d|}}}
{{!}} {{#if: {{{10def|}}} | {{{10def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{10stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{11|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{11|}}} | 11 | ''{{{msg-parameter-no|}}}11'' (11) | {{{11|}}} }}''' {{!}}{{!}} {{{11d|}}}
{{!}} {{#if: {{{11def|}}} | {{{11def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{11stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{12|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{12|}}} | 12 | ''{{{msg-parameter-no|}}}12'' (12) | {{{12|}}} }}''' {{!}}{{!}} {{{12d|}}}
{{!}} {{#if: {{{12def|}}} | {{{12def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{12stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{13|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{13|}}} | 13 | ''{{{msg-parameter-no|}}}13'' (13) | {{{13|}}} }}''' {{!}}{{!}} {{{13d|}}}
{{!}} {{#if: {{{13def|}}} | {{{13def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{13stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{14|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{14|}}} | 14 | ''{{{msg-parameter-no|}}}14'' (14) | {{{14|}}} }}''' {{!}}{{!}} {{{14d|}}}
{{!}} {{#if: {{{14def|}}} | {{{14def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{14stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{15|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{15|}}} | 15 | ''{{{msg-parameter-no|}}}15'' (15) | {{{15|}}} }}''' {{!}}{{!}} {{{15d|}}}
{{!}} {{#if: {{{15def|}}} | {{{15def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{15stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{16|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{16|}}} | 16 | ''{{{msg-parameter-no|}}}16'' (16) | {{{16|}}} }}''' {{!}}{{!}} {{{16d|}}}
{{!}} {{#if: {{{16def|}}} | {{{16def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{16stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{17|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{17|}}} | 17 | ''{{{msg-parameter-no|}}}17'' (17) | {{{17|}}} }}''' {{!}}{{!}} {{{17d|}}}
{{!}} {{#if: {{{17def|}}} | {{{17def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{17stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{18|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{18|}}} | 18 | ''{{{msg-parameter-no|}}}18'' (18) | {{{18|}}} }}''' {{!}}{{!}} {{{18d|}}}
{{!}} {{#if: {{{18def|}}} | {{{18def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{18stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{19|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{19|}}} | 19 | ''{{{msg-parameter-no|}}}19'' (19) | {{{19|}}} }}''' {{!}}{{!}} {{{19d|}}}
{{!}} {{#if: {{{19def|}}} | {{{19def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{19stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{20|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{20|}}} | 20 | ''{{{msg-parameter-no|}}}20'' (20) | {{{20|}}} }}''' {{!}}{{!}} {{{20d|}}}
{{!}} {{#if: {{{20def|}}} | {{{20def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{20stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{21|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{21|}}} | 21 | ''{{{msg-parameter-no|}}}21'' (21) | {{{21|}}} }}''' {{!}}{{!}} {{{21d|}}}
{{!}} {{#if: {{{21def|}}} | {{{21def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{21stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{22|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{22|}}} | 22 | ''{{{msg-parameter-no|}}}22'' (22) | {{{22|}}} }}''' {{!}}{{!}} {{{22d|}}}
{{!}} {{#if: {{{22def|}}} | {{{22def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{22stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{23|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{23|}}} | 23 | ''{{{msg-parameter-no|}}}23'' (23) | {{{23|}}} }}''' {{!}}{{!}} {{{23d|}}}
{{!}} {{#if: {{{23def|}}} | {{{23def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{23stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{24|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{24|}}} | 24 | ''{{{msg-parameter-no|}}}24'' (24) | {{{24|}}} }}''' {{!}}{{!}} {{{24d|}}}
{{!}} {{#if: {{{24def|}}} | {{{24def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{24stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{25|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{25|}}} | 25 | ''{{{msg-parameter-no|}}}25'' (25) | {{{25|}}} }}''' {{!}}{{!}} {{{25d|}}}
{{!}} {{#if: {{{25def|}}} | {{{25def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{25stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{26|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{26|}}} | 26 | ''{{{msg-parameter-no|}}}26'' (26) | {{{26|}}} }}''' {{!}}{{!}} {{{26d|}}}
{{!}} {{#if: {{{26def|}}} | {{{26def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{26stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{27|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{27|}}} | 27 | ''{{{msg-parameter-no|}}}27'' (27) | {{{27|}}} }}''' {{!}}{{!}} {{{27d|}}}
{{!}} {{#if: {{{27def|}}} | {{{27def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{27stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{28|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{28|}}} | 28 | ''{{{msg-parameter-no|}}}28'' (28) | {{{28|}}} }}''' {{!}}{{!}} {{{28d|}}}
{{!}} {{#if: {{{28def|}}} | {{{28def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{28stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{29|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{29|}}} | 29 | ''{{{msg-parameter-no|}}}29'' (29) | {{{29|}}} }}''' {{!}}{{!}} {{{29d|}}}
{{!}} {{#if: {{{29def|}}} | {{{29def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{29stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}{{#if: {{{30|}}} |&lt;nowiki/&gt;
{{!}}-
{{!}} '''{{#ifeq: {{{30|}}} | 30 | ''{{{msg-parameter-no|}}}30'' (30) | {{{30|}}} }}''' {{!}}{{!}} {{{30d|}}}
{{!}} {{#if: {{{30def|}}} | {{{30def}}} | ''{{{msg-param-empty|}}}'' }}
{{!}} {{#switch: {{{30stat|}}}
|optional={{{msg-param-optional|}}}
|optional-={{{msg-param-optional-|}}}
|required={{{msg-param-required|}}}
|deprecated={{{msg-param-deprecated|}}}
|{{{msg-param-optional|}}}
}} }}
{{!}}}|&lt;nowiki/&gt;

{{{msg-param-none|}}} }}
=== {{{msg-moreinfo|}}} ===
{{{msg-intendednamespaces|}}}
{{#switch: {{{namespace|}}}
|={{{msg-intendednamespaces-default|}}}
|all={{{msg-intendednamespaces-all|}}}
|talks={{{msg-intendednamespaces-talks|}}}
|contents={{{msg-intendednamespaces-contents|}}}
|0|Main|Gallery|main|gallery={{{msg-intendednamespaces-0|}}}
|1|Talk|talk={{{msg-intendednamespaces-1|}}}
|2|User|user={{{msg-intendednamespaces-2|}}}
|3|User talk|user talk={{{msg-intendednamespaces-3|}}}
|4|Commons|commons={{{msg-intendednamespaces-4|}}}
|5|Commons talk|commons talk={{{msg-intendednamespaces-5|}}}
|6|File|file={{{msg-intendednamespaces-6|}}}
|7|File talk|file talk={{{msg-intendednamespaces-7|}}}
|8|MediaWiki|mediaWiki={{{msg-intendednamespaces-8|}}}
|9|MediaWiki talk|mediaWiki talk={{{msg-intendednamespaces-9|}}}
|10|Template|template={{{msg-intendednamespaces-10|}}}
|11|Template talk|template talk={{{msg-intendednamespaces-11|}}}
|12|Help|help={{{msg-intendednamespaces-12|}}}
|13|Help talk|help talk={{{msg-intendednamespaces-13|}}}
|14|Category|category={{{msg-intendednamespaces-14|}}}
|15|Category talk|category talk={{{msg-intendednamespaces-15|}}}
|16|Creator|creator={{{msg-intendednamespaces-16|}}}
|17|Creator talk|creator talk={{{msg-intendednamespaces-17|}}}
|18|Special|special={{{msg-intendednamespaces-18|}}}
|#default={{{msg-intendednamespaces-unknown|}}}
}}

{{{msg-intendedusergroups|}}}&lt;!-- usergroup is always lower case transformation on [[Template:TemplateBox]] --&gt;
{{#switch: {{{usergroup|}}}
|all={{{msg-intendedusergroups-all|}}}
|bot={{{msg-intendedusergroups-bot|}}}
|administrator|admin|sysop={{{msg-intendedusergroups-admin|}}}
|bureaucrat|crat={{{msg-intendedusergroups-bureaucrat|}}}
|checkuser={{{msg-intendedusergroups-checkuser|}}}
|licensereviewer|imagereviewer|image-reviewer|license-reviewer={{{msg-intendedusergroups-imagereviewer|[[{{int:Grouppage-Image-reviewer}}|{{int:Group-Image-reviewer}}]]}}}
|otrs|otrs-agent|otrs-member={{{msg-intendedusergroups-otrsmember|[[{{int:Grouppage-OTRS-member}}|{{int:Group-OTRS-member}}]]}}}
|autoconfirmed={{{msg-intendedusergroups-autoconfirmed|[[{{int:Grouppage-autoconfirmed}}|{{int:Group-autoconfirmed}}]]}}}
|autopatrolled={{{msg-intendedusergroups-autopatrolled|[[{{int:Grouppage-autopatrolled}}|{{int:Group-autopatrolled}}]]}}}
|filemover={{{msg-intendedusergroups-filemover|[[{{int:Grouppage-filemover}}|{{int:Group-filemover}}]]}}}
|oversight={{{msg-intendedusergroups-oversight|[[{{int:Grouppage-oversight}}|{{int:Group-oversight}}]]}}}
|patroller={{{msg-intendedusergroups-patroller|[[{{int:Grouppage-patroller}}|{{int:Group-patroller}}]]}}}
|rollbacker={{{msg-intendedusergroups-rollbacker|[[{{int:Grouppage-rollbacker}}|{{int:Group-rollbacker}}]]}}}
|steward={{{msg-intendedusergroups-steward|[[{{int:Grouppage-steward}}|{{int:Group-steward}}]]}}}
|upwizcampeditors={{{msg-intendedusergroups-upwizcampeditors|[[{{int:Grouppage-upwizcampeditors}}|{{int:Group-upwizcampeditors}}]]}}}
|#default={{{msg-intendedusergroups-unspecified|}}}
}}{{#if: {{{placement|}}} |&lt;nowiki/&gt;

{{{msg-placement|}}}
{{#switch: {{{placement|}}}
|top={{{msg-placement-top|}}}
|bottom={{{msg-placement-bottom|}}}
|license|licence={{{msg-placement-licence|}}}
|source={{{msg-placement-source|}}}
|#default={{{msg-languagedependant|}}}
&lt;div style="border: 1px solid #cccccc; padding: 0.2em;"&gt;
{{{placement}}}
&lt;/div&gt;
}}
}}{{#if: {{{relieson|}}} |&lt;nowiki/&gt;

{{{msg-relieson|}}}&lt;br /&gt;
{{{relieson|}}}
}}{{#if: {{{example|}}} |&lt;nowiki/&gt;
== {{{msg-example|}}} ==

 &lt;nowiki&gt;{{&lt;/nowiki&gt;{{#if: {{{name|}}} | {{{name}}} | {{PAGENAME}} }}{{!}}{{{example}}}&lt;nowiki&gt;}}&lt;/nowiki&gt;

{{{msg-example-renders-as|}}}
&lt;div style="border: 1px solid black; background-color: #ffffff; width: 90%; padding: 1.5em;"&gt;
{{{{#if: {{{name|}}} | {{{name}}} | {{PAGENAME}} }}|{{{example|}}}|category=}}
&lt;/div&gt;
}}{{#if: {{{example2|}}} |&lt;nowiki/&gt;
== {{{msg-example|}}} ==

 &lt;nowiki&gt;{{&lt;/nowiki&gt;{{#if: {{{name|}}} | {{{name}}} | {{PAGENAME}} }}{{!}}{{{example2}}}&lt;nowiki&gt;}}&lt;/nowiki&gt;

{{{msg-example-renders-as|}}}
&lt;div style="border: 1px solid black; background-color: #ffffff; width: 90%; padding: 1.5em;"&gt;
{{{{#if: {{{name|}}} | {{{name}}} | {{PAGENAME}} }}|{{{example2|}}}|category=}}
&lt;/div&gt;
}}{{#if: {{{seealso|}}} |&lt;nowiki/&gt;
== {{{msg-seealso|}}} ==

{{{msg-languagedependant|}}}
&lt;div style="border: 1px solid #cccccc; padding: 0.2em;"&gt;
{{{seealso}}}
&lt;/div&gt;
}}{{#switch: {{{i18n-method|}}}
|-=&lt;nowiki/&gt;
== {{{msg-localization|}}} ==

{{{msg-localization-instruct-none|}}}
|autotranslate=&lt;nowiki/&gt;
== {{{msg-localization|}}} ==

{{lang links|1={{NAMESPACE}}:{{{name|{{PAGENAME}}}}}|suppressaddlink=true}}

{{{msg-localization-instruct-autotranslate|}}}

{{#tag:inputbox|
type=create
preload=Template:{{#if: {{{name|}}} | {{{name}}} | {{PAGENAME}} }}/en
default=Template:{{#if: {{{name|}}} | {{{name|}}} | {{PAGENAME}} }}/{{#ifexist: Template:{{#if: {{{name|}}} | {{{name}}} | {{PAGENAME}} }}/{{int:Lang}} | LANGCODE | {{int:Lang}} }}
}}

|switch=&lt;nowiki/&gt;
== {{{msg-localization|}}} ==

{{{msg-localization-instruct-switch|}}}
|mediawiki-msg=&lt;nowiki/&gt;
== {{{msg-localization|}}} ==

{{{msg-localization-instruct-mediawiki-msg|}}}
|custommediawiki-msg=&lt;nowiki/&gt;
== {{{msg-localization|}}} ==

{{{msg-localization-instruct-custommediawiki-msg|}}}
|#default=
}}{{#if: {{{i18n-desc|}}} |&lt;nowiki/&gt;

{{{msg-languagedependant|}}}
&lt;div style="border: 1px solid #cccccc; padding: 0.2em;"&gt;
{{{i18n-desc}}}
&lt;/div&gt;
}}&lt;noinclude&gt;

[[Category:Layout templates|{{PAGENAME}}]]
&lt;/noinclude&gt;</text>
      <sha1>d0vd0m1xoqy6626bqtqpxyep6o8scq4</sha1>
    </revision>
  </page>
  <page>
    <title>Template:TemplateBox/en</title>
    <ns>10</ns>
    <id>4168660</id>
    <revision>
      <id>29016860</id>
      <parentid>6194750</parentid>
      <timestamp>2013-04-21T18:24:11Z</timestamp>
      <contributor>
        <username>Labant</username>
        <id>43960</id>
      </contributor>
      <comment>fix</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7171" xml:space="preserve">{{TemplateBox/layout
|1={{{1|}}}|1d={{{1d|}}}|1def={{{1def|}}}|1stat={{{1stat|}}}|2={{{2|}}}|2d={{{2d|}}}|2def={{{2def|}}}|2stat={{{2stat|}}}
|3={{{3|}}}|3d={{{3d|}}}|3def={{{3def|}}}|3stat={{{3stat|}}}|4={{{4|}}}|4d={{{4d|}}}|4def={{{4def|}}}|4stat={{{4stat|}}}
|5={{{5|}}}|5d={{{5d|}}}|5def={{{5def|}}}|5stat={{{5stat|}}}|6={{{6|}}}|6d={{{6d|}}}|6def={{{6def|}}}|6stat={{{6stat|}}}
|7={{{7|}}}|7d={{{7d|}}}|7def={{{7def|}}}|7stat={{{7stat|}}}|8={{{8|}}}|8d={{{8d|}}}|8def={{{8def|}}}|8stat={{{8stat|}}}
|9={{{9|}}}|9d={{{9d|}}}|9def={{{9def|}}}|9stat={{{9stat|}}}|10={{{10|}}}|10d={{{10d|}}}|10def={{{10def|}}}|10stat={{{10stat|}}}
|11={{{11|}}}|11d={{{11d|}}}|11def={{{11def|}}}|11stat={{{11stat|}}}|12={{{12|}}}|12d={{{12d|}}}|12def={{{12def|}}}|12stat={{{12stat|}}}
|13={{{13|}}}|13d={{{13d|}}}|13def={{{13def|}}}|13stat={{{13stat|}}}|14={{{14|}}}|14d={{{14d|}}}|14def={{{14def|}}}|14stat={{{14stat|}}}
|15={{{15|}}}|15d={{{15d|}}}|15def={{{15def|}}}|15stat={{{15stat|}}}|16={{{16|}}}|16d={{{16d|}}}|16def={{{16def|}}}|16stat={{{16stat|}}}
|17={{{17|}}}|17d={{{17d|}}}|17def={{{17def|}}}|17stat={{{17stat|}}}|18={{{18|}}}|18d={{{18d|}}}|18def={{{18def|}}}|18stat={{{18stat|}}}
|19={{{19|}}}|19d={{{19d|}}}|19def={{{19def|}}}|19stat={{{19stat|}}}|20={{{20|}}}|20d={{{20d|}}}|20def={{{20def|}}}|20stat={{{20stat|}}}
|21={{{21|}}}|21d={{{21d|}}}|21def={{{21def|}}}|21stat={{{21stat|}}}|22={{{22|}}}|22d={{{22d|}}}|22def={{{22def|}}}|22stat={{{22stat|}}}
|23={{{23|}}}|23d={{{23d|}}}|23def={{{23def|}}}|23stat={{{23stat|}}}|24={{{24|}}}|24d={{{24d|}}}|24def={{{24def|}}}|24stat={{{24stat|}}}
|25={{{25|}}}|25d={{{25d|}}}|25def={{{25def|}}}|25stat={{{25stat|}}}|26={{{26|}}}|26d={{{26d|}}}|26def={{{26def|}}}|26stat={{{26stat|}}}
|27={{{27|}}}|27d={{{27d|}}}|27def={{{27def|}}}|27stat={{{27stat|}}}|28={{{28|}}}|28d={{{28d|}}}|28def={{{28def|}}}|28stat={{{28stat|}}}
|29={{{29|}}}|29d={{{29d|}}}|29def={{{29def|}}}|29stat={{{29stat|}}}|30={{{30|}}}|30d={{{30d|}}}|30def={{{30def|}}}|30stat={{{30stat|}}}
|name={{{name|}}}|desc={{{desc|}}}|namespace={{{namespace|}}}|usergroup={{{usergroup|}}}|placement={{{placement|}}}|usage-notes={{{usage-notes|}}}|type={{{type|}}}|example={{{example|}}}|i18n-method={{{i18n-method|}}}|i18n-desc={{{i18n-desc|}}}|seealso={{{seealso|}}}|setscats={{{setscats|}}}|lines={{{lines|}}}|shorthand={{{shorthand|}}}|relieson={{{relieson|}}}|docsub-override={{{docsub-override|}}}|docsub-page={{{docsub-page|}}}|mustbesubst={{{mustbesubst|}}}
|msg-setscats=The template automatically sets the following categories:
|msg-nodesc=No description yet available.
|msg-languagedependant=&lt;nowiki/&gt;
|msg-usage=Usage
|msg-example=Example
|msg-example-renders-as=renders as:
|msg-shorthand=Or use the shorthand &lt;nowiki/&gt;
|msg-parameters=Parameters
|msg-table-paramname=Parameter name
|msg-table-desc=Description
|msg-table-defval=Default value
|msg-table-reqopt=required or optional?
|msg-parameter-no=parameter #
|msg-param-empty=empty
|msg-param-optional=optional
|msg-param-optional-=optional
|msg-param-required=required
|msg-param-deprecated=deprecated
|msg-param-none=The template takes no parameters.
|msg-moreinfo=Additional information
|msg-localization=Localization
|msg-localization-instruct-switch=To add your language to the list of languages supported by this template, please edit the template and add a row to the "{{Tlf|LangSwitch| }}" construct. It takes the form "&lt;tt&gt;{{!}}xx=Your translation&lt;/tt&gt;" (&lt;tt&gt;xx&lt;/tt&gt; being the code of your language)
|msg-localization-instruct-autotranslate=This template is localized through {{tl|Autotranslate}}. {{#ifexist: Template:{{#if:{{{name|}}}|{{{name}}}|{{PAGENAME}}}}/layout | The layout of the template can be found under [[Template:{{#if:{{{name|}}}|{{{name}}}|{{PAGENAME}}}}/layout]].}}

To add your language to the list of languages supported by this template, please copy the code of [[Template:{{{name|{{PAGENAME}}}}}/en]] (or any other language version you prefer to translate) and replace the text strings in there (the form below can be used to create a translation, the English version is preloaded in the edit box). Please change the parameter &lt;tt&gt;lang&lt;/tt&gt; from &lt;tt&gt;en&lt;/tt&gt; (or whatever language you are translating) to the language code of your language.
|msg-localization-instruct-none=This template is not intended to be localized.
|msg-localization-instruct-custommediawiki-msg=This template is localized by utilizing custom MediaWiki namespace messages.
|msg-localization-instruct-mediawiki-msg=This template is localized by utilizing MediaWiki namespace messages. These can be translated at [[:translatewiki:MediaWiki:{{#if:{{{i18n-mediawiki-msg|}}}|{{{i18n-mediawiki-msg|}}}|Wm-license-{{lc:{{BASEPAGENAME}}}}-text}}|translatewiki.net]] ([[:translatewiki:Special:Translations/MediaWiki:{{#if:{{{i18n-mediawiki-msg|}}}|{{{i18n-mediawiki-msg|}}}|Wm-license-{{lc:{{BASEPAGENAME}}}}-text}}|current translations]]).
|msg-seealso=See also
|msg-relieson=Relies on:
|msg-intendedusergroups=The template is intended to be used by the following user groups:
|msg-intendedusergroups-all=[[Wikidata:User access levels|all users]]
|msg-intendedusergroups-bot=[[Wikidata:Bots|bots]]
|msg-intendedusergroups-admin=[[Wikidata:Administrators|admins]]
|msg-intendedusergroups-bureaucrat=[[Wikidata:Bureaucrats|bureaucrats]]
|msg-intendedusergroups-checkuser=checkusers
|msg-intendedusergroups-unspecified=no user group specified
|msg-intendednamespaces=The template is intended to be used in the following namespaces:
|msg-intendednamespaces-unknown=unknown
|msg-intendednamespaces-all=all namespaces
|msg-intendednamespaces-talks=all talk namespaces
|msg-intendednamespaces-contents=all content namespaces
|msg-intendednamespaces-0=the main name space or for items. (unprefixed)
|msg-intendednamespaces-1=the Talk main name space or for items
|msg-intendednamespaces-2=the User namespace
|msg-intendednamespaces-3=the User talk namespace
|msg-intendednamespaces-4=the Policies, guidelines, portals and wikiproject pages
|msg-intendednamespaces-5=the talk namespace of Policies, guidelines, portals and wikiproject pages
|msg-intendednamespaces-6=the File namespace
|msg-intendednamespaces-7=the File talk namespace
|msg-intendednamespaces-8=the MediaWiki namespace
|msg-intendednamespaces-9=the MediaWiki talk namespace
|msg-intendednamespaces-10=the Template namespace
|msg-intendednamespaces-11=the Template talk namespace
|msg-intendednamespaces-12=the Help namespace
|msg-intendednamespaces-13=the Help talk namespace
|msg-intendednamespaces-14=the Category namespace
|msg-intendednamespaces-15=the Category talk namespace
|msg-intendednamespaces-default=no namespace specified
|msg-placement=Placement:
|msg-placement-top=At the top of the page
|msg-placement-bottom=At the bottom of the page
|msg-placement-licence=In the "permission" parameter of the {{tl|Information}} template (or the respective parameter of similar templates) or in the "Licence" section
|msg-placement-source=In the "source" parameter of the {{tl|Information}} template (or the respective parameter of similar templates) or just below this template
|lang=en
}}&lt;noinclude&gt;
{{translated tag|documentation}}
&lt;/noinclude&gt;</text>
      <sha1>lg2deg3045crobupkffvp7cybl4djea</sha1>
    </revision>
  </page>
  <page>
    <title>Template:TemplateBox</title>
    <ns>10</ns>
    <id>4168657</id>
    <revision>
      <id>6194713</id>
      <parentid>6194712</parentid>
      <timestamp>2013-02-10T12:58:10Z</timestamp>
      <contributor>
        <username>Zolo</username>
        <id>4610</id>
      </contributor>
      <minor/>
      <comment>18 revisions from [[:commons:Template:TemplateBox]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2653" xml:space="preserve">&lt;includeonly&gt;{{TemplateBox/{{Fallback|TemplateBox}}
|1={{{1|}}}|1d={{{1d|}}}|1def={{{1def|}}}|1stat={{{1stat|}}}|2={{{2|}}}|2d={{{2d|}}}|2def={{{2def|}}}|2stat={{{2stat|}}}
|3={{{3|}}}|3d={{{3d|}}}|3def={{{3def|}}}|3stat={{{3stat|}}}|4={{{4|}}}|4d={{{4d|}}}|4def={{{4def|}}}|4stat={{{4stat|}}}
|5={{{5|}}}|5d={{{5d|}}}|5def={{{5def|}}}|5stat={{{5stat|}}}|6={{{6|}}}|6d={{{6d|}}}|6def={{{6def|}}}|6stat={{{6stat|}}}
|7={{{7|}}}|7d={{{7d|}}}|7def={{{7def|}}}|7stat={{{7stat|}}}|8={{{8|}}}|8d={{{8d|}}}|8def={{{8def|}}}|8stat={{{8stat|}}}
|9={{{9|}}}|9d={{{9d|}}}|9def={{{9def|}}}|9stat={{{9stat|}}}|10={{{10|}}}|10d={{{10d|}}}|10def={{{10def|}}}|10stat={{{10stat|}}}
|11={{{11|}}}|11d={{{11d|}}}|11def={{{11def|}}}|11stat={{{11stat|}}}|12={{{12|}}}|12d={{{12d|}}}|12def={{{12def|}}}|12stat={{{12stat|}}}
|13={{{13|}}}|13d={{{13d|}}}|13def={{{13def|}}}|13stat={{{13stat|}}}|14={{{14|}}}|14d={{{14d|}}}|14def={{{14def|}}}|14stat={{{14stat|}}}
|15={{{15|}}}|15d={{{15d|}}}|15def={{{15def|}}}|15stat={{{15stat|}}}|16={{{16|}}}|16d={{{16d|}}}|16def={{{16def|}}}|16stat={{{16stat|}}}
|17={{{17|}}}|17d={{{17d|}}}|17def={{{17def|}}}|17stat={{{17stat|}}}|18={{{18|}}}|18d={{{18d|}}}|18def={{{18def|}}}|18stat={{{18stat|}}}
|19={{{19|}}}|19d={{{19d|}}}|19def={{{19def|}}}|19stat={{{19stat|}}}|20={{{20|}}}|20d={{{20d|}}}|20def={{{20def|}}}|20stat={{{20stat|}}}
|21={{{21|}}}|21d={{{21d|}}}|21def={{{21def|}}}|21stat={{{21stat|}}}|22={{{22|}}}|22d={{{22d|}}}|22def={{{22def|}}}|22stat={{{22stat|}}}
|23={{{23|}}}|23d={{{23d|}}}|23def={{{23def|}}}|23stat={{{23stat|}}}|24={{{24|}}}|24d={{{24d|}}}|24def={{{24def|}}}|24stat={{{24stat|}}}
|25={{{25|}}}|25d={{{25d|}}}|25def={{{25def|}}}|25stat={{{25stat|}}}|26={{{26|}}}|26d={{{26d|}}}|26def={{{26def|}}}|26stat={{{26stat|}}}
|27={{{27|}}}|27d={{{27d|}}}|27def={{{27def|}}}|27stat={{{27stat|}}}|28={{{28|}}}|28d={{{28d|}}}|28def={{{28def|}}}|28stat={{{28stat|}}}
|29={{{29|}}}|29d={{{29d|}}}|29def={{{29def|}}}|29stat={{{29stat|}}}|30={{{30|}}}|30d={{{30d|}}}|30def={{{30def|}}}|30stat={{{30stat|}}}
|name={{{name|}}}|desc={{{desc|}}}|namespace={{{namespace|}}}|usergroup={{lc:{{{usergroup|}}}}}|placement={{{placement|}}}|usage-notes={{{usage-notes|}}}|type={{{type|}}}|example={{{example|}}}|example2={{{example2|}}}|i18n-method={{{i18n-method|}}}|i18n-desc={{{i18n-desc|}}}|i18n-mediawiki-msg={{{i18n-mediawiki-msg|}}}|seealso={{{seealso|}}}|setscats={{{setscats|}}}|lines={{{lines|}}}|shorthand={{{shorthand|}}}|relieson={{{relieson|}}}|docsub-override={{{docsub-override|}}}|docsub-page={{{docsub-page|}}}|mustbesubst={{{mustbesubst|}}}
}}&lt;/includeonly&gt;__NOEDITSECTION__&lt;noinclude&gt;
{{documentation}}

&lt;/noinclude&gt;</text>
      <sha1>5ngm394wdy5r9gizmns0srnw0ignxmq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Str left</title>
    <ns>10</ns>
    <id>54617</id>
    <revision>
      <id>609803350</id>
      <parentid>609800651</parentid>
      <timestamp>2017-12-16T08:54:39Z</timestamp>
      <contributor>
        <username>Pizza1016</username>
        <id>27804</id>
      </contributor>
      <comment>Added safesubst</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="153" xml:space="preserve">&lt;includeonly&gt;{{safesubst:padleft:|{{{2|1}}}|{{{1}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;!-- Categories go on the /doc subpage. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>1b6plvfixcru8aabeofs0uj4t46wwdv</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Purge</title>
    <ns>10</ns>
    <id>8535</id>
    <revision>
      <id>1376814517</id>
      <parentid>223476976</parentid>
      <timestamp>2021-03-07T00:39:31Z</timestamp>
      <contributor>
        <username>Ihaveahax</username>
        <id>59911</id>
      </contributor>
      <comment>replace ?action=purge with Special:Purge - VisualEditor seems to sometimes break ?action=history and change it to an edit link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="191" xml:space="preserve">&lt;span class="noprint purgelink"&gt;[[Special:Purge/{{{page|{{FULLPAGENAME}}}}}#{{{anchor|}}}|&lt;span title="Purge this page"&gt;{{{1|Purge}}}&lt;/span&gt;]]&lt;/span&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>j6ode800nln2zngkn5ok89m392ze5gc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Property</title>
    <ns>10</ns>
    <id>14167878</id>
    <revision>
      <id>1368972836</id>
      <parentid>806978893</parentid>
      <timestamp>2021-02-24T09:52:48Z</timestamp>
      <contributor>
        <username>Nikki</username>
        <id>201849</id>
      </contributor>
      <comment>fulfilling edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="472" xml:space="preserve">&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;&lt;includeonly&gt;{{#ifeq: {{str left|{{{1|}}}|1}} | P  
 | {{#if:{{{anchor|}}}|{{anchor|Property:{{{1|}}}}}}}[[Property:{{{1|}}}|{{label|{{{1|}}}}}{{#ifeq:{{{show_p|}}}|no||&amp;#32;&lt;small dir="ltr"&gt;{{int:parentheses|{{{1|}}}}}&lt;/small&gt;}}]]
 | {{#if:{{{anchor|}}}|{{anchor|Property:P{{{1|}}}}}}}[[Property:P{{{1|}}}|{{label|P{{{1|}}}}}{{#ifeq:{{{show_p|}}}|no||&amp;#32;&lt;small dir="ltr"&gt;{{int:parentheses|P{{{1|}}}}}&lt;/small&gt;}}]]
}}&lt;/includeonly&gt;</text>
      <sha1>nld0fm8k9yo4tfm19hn3kp2c3jbfx90</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Pp-template</title>
    <ns>10</ns>
    <id>4303700</id>
    <revision>
      <id>89573341</id>
      <parentid>80968114</parentid>
      <timestamp>2013-11-26T11:44:29Z</timestamp>
      <contributor>
        <username>Kaganer</username>
        <id>4170</id>
      </contributor>
      <comment>update links and cat. names</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3537" xml:space="preserve">&lt;includeonly&gt;{{pp-meta
|type={{#switch:{{{demolevel|{{#ifeq:{{PROTECTIONLEVEL:edit}}-{{PROTECTIONLEVEL:move}}|-sysop|move|{{PROTECTIONLEVEL:edit}}}}}}}
   |semi
   |autoconfirmed=semi
   |administrator
   |full
   |sysop=indef
   |move=move
   |templateeditor=template
   |#default=template&lt;!--fallback value--&gt;}}
|small={{{small|yes}}}
|right={{{right|}}}
|demospace={{{demospace|}}}
|demolevel={{#ifeq:{{PAGENAME}}/{{NAMESPACE}}|{{SUBPAGENAME}}/{{ns:Template}}|{{{demolevel|undefined}}}|{{#ifeq:{{lc:{{SUBPAGENAME}}}}|sandbox|sysop|{{{demolevel|undefined}}}}}}}
|expiry=&lt;!--not applicable--&gt;
|dispute=no
|icon-text=This {{#ifeq:{{NAMESPACE}}|{{ns:6}}|image, included in a high-risk template or message,|high-risk {{pp-meta/pagetype}} }} is permanently {{#switch:{{{demolevel|{{#ifeq:{{PROTECTIONLEVEL:edit}}-{{PROTECTIONLEVEL:move}}|-sysop|move|{{PROTECTIONLEVEL:edit}}}}}}}
   |semi
   |autoconfirmed=semi-protected from editing
   |move=move-protected
   |administrator
   |full
   |sysop
   |templateeditor
   |#default=&lt;!--fallback value--&gt; protected from editing}} to prevent vandalism.
|reason-text=This {{#switch:{{NAMESPACE}}
  |{{ns:image}}=image, used in one or more [[w:en:Wikipedia:High-risk templates|high-risk templates]]{{#switch:{{{demolevel|{{PROTECTIONLEVEL:edit}}}}}
   |semi
   |autoconfirmed=
   |administrator
   |full
   |sysop=&lt;nowiki&gt; &lt;/nowiki&gt;and/or [[Special:Allmessages|system messages]],
   |templateeditor=&lt;nowiki&gt; &lt;/nowiki&gt;and/or [[Special:Allmessages|system messages]],
   |#default=&lt;!--fallback value--&gt;}}
  |#default=[[w:en:Wikipedia:High-risk templates|high-risk {{pp-meta/pagetype}}]]
}} has been [[w:en:Wikipedia:This page is protected|{{#switch:{{{demolevel|{{#ifeq:{{PROTECTIONLEVEL:edit}}-{{PROTECTIONLEVEL:move}}|-sysop|move|{{PROTECTIONLEVEL:edit}}}}}}}
   |semi
   |autoconfirmed=semi-
   |move=move-
   |administrator
   |full
   |sysop
   |templateeditor&lt;!--uses default--&gt;
   |#default=&lt;!--fallback value--&gt;permanently&lt;nowiki&gt; &lt;/nowiki&gt;}}protected]]{{#ifeq:{{PROTECTIONLEVEL:edit}}-{{PROTECTIONLEVEL:move}}|-sysop||&lt;nowiki&gt; &lt;/nowiki&gt;from editing}} to prevent [[Wikidata:Vandalism|vandalism]]. {{#switch:{{{demolevel|{{PROTECTIONLEVEL:edit}}}}}
   |semi
   |autoconfirmed=
   |administrator
   |full
   |sysop
   |templateeditor&lt;!--uses default--&gt;
   |#default={{#switch:{{NAMESPACE}}|{{ns:image}}=&lt;br /&gt;&lt;small&gt;'''Do not move this image''' to [[commons:|Wikimedia Commons]].&lt;/small&gt;}}}}
|categories={{{categories|{{#ifeq:{{NAMESPACE}}|{{ns:10}}|{{#switch:{{{demolevel|{{#ifeq:{{PROTECTIONLEVEL:edit}}-{{PROTECTIONLEVEL:move}}|-sysop|move|{{PROTECTIONLEVEL:edit}}}}}}}
   |semi
   |autoconfirmed=[[Category:Semi-protected templates|{{PAGENAME}}]]{{#ifeq:{{PROTECTIONLEVEL:move}}|sysop|[[Category:Move-protected templates|{{PAGENAME}}]]}}
   |move=[[Category:Move-protected templates|{{PAGENAME}}]]
   |administrator
   |full
   |sysop
   |templateeditor&lt;!--uses default--&gt;
   |#default=[[Category:Protected templates|{{PAGENAME}}]]&lt;!--fallback value--&gt;}}}}{{#ifeq:{{NAMESPACE}}|{{ns:6}}|[[Category:{{#switch:{{{demolevel|{{PROTECTIONLEVEL:edit}}}}}
   |semi
   |autoconfirmed=Semi-protected
   |administrator
   |full
   |sysop
   |templateeditor&lt;!--uses default--&gt;
   |#default=Protected&lt;!--fallback value--&gt;}} images|{{PAGENAME}}]]}}}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{pp-template|categories=no}}  &lt;!-- Show the small version --&gt;
{{pp-template|small=no}}      &lt;!-- Show the large version --&gt;
{{Documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>ablke53hdeja64wrywf8i2hpd2r5xh1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Pp-meta/pagetype</title>
    <ns>10</ns>
    <id>11856957</id>
    <revision>
      <id>102546783</id>
      <parentid>102546781</parentid>
      <timestamp>2014-01-16T09:11:45Z</timestamp>
      <contributor>
        <username>Moe Epsilon</username>
        <id>7706</id>
      </contributor>
      <minor/>
      <comment>2 revisions from [[:en:Template:Pp-meta/pagetype]]: needed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="317" xml:space="preserve">{{#ifeq:{{TALKSPACE}}|{{NAMESPACE}}|talk page|
{{#switch:{{NAMESPACE}}
 |{{ns:}}              = article
 |{{ns:File}}          = file
 |{{ns:Template}}      = template
 |{{ns:Category}}      = category
 |{{ns:Module}}        = module
 |#default             = page}}}}&lt;noinclude&gt;
{{doc|content={{NODOC}}}}
&lt;/noinclude&gt;</text>
      <sha1>pttdhb8ryrm4klhkfpi1swcyzsmrqxb</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Pp-meta</title>
    <ns>10</ns>
    <id>130022</id>
    <revision>
      <id>609849757</id>
      <parentid>211602897</parentid>
      <timestamp>2017-12-16T12:03:39Z</timestamp>
      <contributor>
        <username>Pizza1016</username>
        <id>27804</id>
      </contributor>
      <comment>using local padlock images</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10916" xml:space="preserve">{{#ifeq:{{#switch:{{lc:{{{type}}}}}
  |move=&lt;!--
 --&gt;{{#ifeq:
      {{#switch:{{lc:{{{demolevel|undefined}}}}}
        |semi |autoconfirmed           = autoconfirmed
        |administrator |full |sysop    = sysop
        |undefined                     = {{PROTECTIONLEVEL:move}}
        |#default                      = &lt;!--fallback value: null
   --&gt;}}
      |sysop|yes|no
    }}
  |create=&lt;!--
 --&gt;{{#if:
      {{#switch:{{lc:{{{demolevel|undefined}}}}}
        |semi |autoconfirmed           = autoconfirmed
        |administrator |full |sysop    = sysop
        |undefined                     = {{PROTECTIONLEVEL:create}}
        |#default                      = &lt;!--fallback value: null
   --&gt;}}
      |yes|no
    }}
  |template=&lt;!--
 --&gt;{{#if:
      {{#switch:{{lc:{{{demolevel|undefined}}}}}
        |templateeditor |template      = templateeditor
        |administrator |full |sysop    = sysop
        |undefined                     = {{PROTECTIONLEVEL:edit}}
        |#default                      = &lt;!--fallback value: null
   --&gt;}}
      |yes|no
    }}
  |pc1 =&lt;!--
 --&gt;{{#ifeq:
      {{#switch:{{lc:{{{demolevel|undefined}}}}}
        |pc1                           = autoconfirmed &lt;!-- this is the value that the PENDINGCHANGELEVEL magic word returns for pc1 --&gt;
        |undefined                     = {{PENDINGCHANGELEVEL}}
        |#default                      = &lt;!--fallback value: null
   --&gt;}}
      |autoconfirmed
      |yes|no
    }}
  |pc2 =&lt;!--
 --&gt;{{#ifeq:
      {{#switch:{{lc:{{{demolevel|undefined}}}}}
        |pc2                           = review &lt;!-- this is the value that the PENDINGCHANGELEVEL magic word returns for pc2 --&gt;
        |undefined                     = {{PENDINGCHANGELEVEL}}
        |#default                      = &lt;!--fallback value: null
   --&gt;}}
      |review
      |yes|no
    }}
|#default&lt;!--includes all other types--&gt;=&lt;!--
 --&gt;{{#if:
      {{#switch:{{lc:{{{demolevel|undefined}}}}}
        |semi |autoconfirmed           = autoconfirmed
        |administrator |full |sysop    = sysop
        |undefined                     = {{PROTECTIONLEVEL:edit}}
        |#default                      = &lt;!--fallback value: null
   --&gt;}}
      |{{#ifeq:{{#switch:{{lc:{{{disallowlevel|}}}}}
                 |semi |autoconfirmed           = autoconfirmed
                 |administrator |full |sysop    = sysop
                 |#default                      = &lt;!--fallback value: null--&gt;}}
         |{{#switch:{{lc:{{{demolevel|undefined}}}}}
            |semi |autoconfirmed           = autoconfirmed
            |administrator |full |sysop    = sysop
            |undefined                     = {{PROTECTIONLEVEL:edit}}
            |#default                      = &lt;!--fallback value: null
       --&gt;}}
         |no|yes
       }}
   |no}}
}}|yes|{{#ifeq:{{lc:{{{small|}}}}}|yes|
&lt;indicator name="protected"&gt;[[File:{{{image|{{#switch:{{lc:{{{type}}}}}
 |full=Full protect.svg
 |semi=Semi protect.svg
 |template=Padlock-pink.svg
 |pc1=Padlock-silver-light.svg
 |pc2=Padlock-orange.svg
 |move=Move protect.svg
 |indef=Permanent protect.svg
 |office=Office action.svg
 |create=Create protect.svg
 |#default=Transparent.gif
}}}}}|20px|link={{{icon-link|Wikipedia:Protection policy#{{lc:{{{type}}}}}}}}|{{{icon-text|{{#switch:{{lc:{{{type}}}}}
|pc1 = All edits by unregistered and new users are subject to review
|pc2 = All edits by users who are not reviewers or administrators are subject to review
|template = This is a permanently protected {{pp-meta/pagetype}}
|#default = This {{pp-meta/pagetype}} is {{#switch:{{lc:{{{type}}}}}
  |semi=semi-
  |move=move-
  |indef=permanently&lt;nowiki&gt; &lt;/nowiki&gt;
  |create=creation-
  |office=&lt;!--null, but should this have a special tag?--&gt;
  |full
  |#default=&lt;!--null--&gt;
  }}protected
}}{{#ifeq:{{lc:{{{type}}}}}|indef||{{#if:{{{expiry|}}}|&lt;nowiki&gt; &lt;/nowiki&gt;until {{#time:F j, Y|{{{expiry}}}}}{{#if:{{{icon-reason|}}}|,}}}}}}{{#if:{{{icon-reason|}}}|&lt;nowiki&gt; &lt;/nowiki&gt;{{{icon-reason}}}}}.}}}|alt={{#ifeq:{{lc:{{{type}}}}}|template
 |{{#switch:{{NAMESPACENUMBER}}
   |10|828=Permanently protected {{pp-meta/pagetype}}
   |#default=Page permanently protected
  }}
 |Page {{#switch:{{lc:{{{type}}}}}
          |pc1=protected with pending changes level 1
          |pc2=protected with pending changes level 2
          |semi=semi-protected
          |move=move-protected
          |indef=permanently protected
          |create=creation-protected
          |office=&lt;!--null, but should this have a special tag?--&gt;
          |full
          |#default=protected
       }}
}}]]&lt;/indicator&gt;
|&lt;!-- else, not small --&gt;
{{mbox 
| name = {{{name|Pp-meta}}}
| subst = {{{subst|}}}
| demospace = {{{demospace|}}}
| type = protection
| image = [[Image:{{{image|{{#switch:{{lc:{{{type}}}}}
 |full=Full protect.svg
 |semi=Semi protect.svg
 |pc1=Padlock-silver-light.svg
 |pc2=Padlock-orange.svg
 |move=Move protect.svg
 |template=Padlock-pink.svg
 |indef=Permanent protect.svg
 |office=Office action.svg
 |create=Create protect.svg
 |#default=Transparent.gif
}}}}}|40px|{{{icon-text|{{#ifeq:{{lc:{{{type}}}}}|template
                         |{{#switch:{{NAMESPACENUMBER}}
                           |10|828=This is a permanently protected {{pp-meta/pagetype}}
                           |#default=This page is permanently protected
                          }}
                         |This page is {{#switch:{{lc:{{{type}}}}}
                                        |pc1=protected with pending changes level 1
                                        |pc2=protected with pending changes level 2
                                        |semi=semi-protected
                                        |move=move-protected
                                        |indef=permanently protected
                                        |create=creation-protected
                                        |office=protected&lt;!--should this have a special tag?--&gt;
                                        |full
                                        |#default=protected
                                       }}
                        }}.}}}]]
| text = '''{{{reason-text|{{#switch:{{lc:{{{type}}}}}
 |full=This page is currently [[Help:Protection|protected]] from editing
 |semi=Editing of this {{pp-meta/pagetype}} by [[Wikipedia:User access levels#Autoconfirmed_users|new]] or [[Wikipedia:User access levels#Anonymous_users|unregistered]] users is currently [[Wikipedia:Protection policy|disabled]]
 |pc1=All edits made to this {{pp-meta/pagetype}} by [[Wikipedia:User access levels#Autoconfirmed_users|new]] or [[Wikipedia:User access levels#Anonymous_users|unregistered]] users are currently [[Wikipedia:Pending changes|subject to review]]
 |pc2=All edits made to this {{pp-meta/pagetype}} by users who are not [[Wikipedia:Reviewing|reviewers]] or [[Wikipedia:Administrators|administrators]] are currently [[Wikipedia:Pending changes|subject to review]]
 |move=This {{pp-meta/pagetype}} is currently [[Help:Protection|protected]] from [[Help:Moving a page|page moves]]
 |template=This is a permanently [[Help:Protection|protected]] {{pp-meta/pagetype}}, as it is [[Wikipedia:High-risk templates|high-risk]]
 |indef=This page is [[Help:Protection|protected]] from editing ''indefinitely''
 |office=This {{pp-meta/pagetype}} is currently [[Help:Protection|protected]] from editing
 |create=[[Help:Starting a new page|Recreation]] of this {{pp-meta/pagetype}} [[Help:Protection|has been disabled]]
}}{{#ifeq:{{lc:{{{type}}}}}|indef||{{#if:{{{expiry|}}}|&amp;#32;until {{#time:F j, Y|{{{expiry}}}}}{{#if:{{{reason|}}}|,}}}}}}{{{reason&lt;includeonly&gt;|&lt;/includeonly&gt;}}}.}}}'''&lt;br /&gt; {{{explanation-text|{{#ifeq:{{lc:{{{dispute}}}}}|yes|This protection is '''not''' an endorsement of the {{#ifeq:{{{type}}}|move|[{{fullurl:Special:Log|type=move&amp;page={{FULLPAGENAMEE}}}} current title]|[{{fullurl:{{FULLPAGENAMEE}}|action=history}} current version]}}.}} See the [[Wikipedia:Protection policy|protection policy]] and [{{fullurl:Special:Log|type={{#switch:{{lc:{{{type}}}}} | pc1 | pc2 = stable | #default = protect }}&amp;page={{FULLPAGENAMEE}}}} {{#switch:{{lc:{{{type}}}}} | pc1 | pc2 = pending changes | #default = protection }} log] for more details. {{#switch:{{lc:{{{type}}}}}
 |full|indef=Please discuss any changes on the [[{{TALKPAGENAME}}#{{#if:{{{section|}}}|{{{section}}}|top}}|talk page]]; you may use the {{tlx|edit protected}} template to ask an [[Wikipedia:Administrators|administrator]] to make an edit if it is supported by [[Wikipedia:Consensus|consensus]]. {{#ifeq:{{NAMESPACE}}|{{ns:8}}&lt;!--MediaWiki--&gt;||You may also [[Wikipedia:Requests for page protection|request]] that this page be unprotected.}}
 |semi=If you cannot edit this {{pp-meta/pagetype}} and you wish to make a change, you can {{#ifeq:{{NAMESPACE}}|{{TALKSPACE}}||[[Template:Editsemiprotected|request an edit]], [[{{TALKPAGENAME}}|discuss changes on the talk page]],}} [[Wikipedia:Requests for page protection#Current requests for unprotection|request unprotection]], [[Special:Userlogin|log in]], or [[Special:UserLogin/signup|create an account]].
 |move=The page may still be edited but cannot be moved until unprotected. Please discuss any suggested moves on the [[{{TALKPAGENAME}}|talk page]] or at [[Wikipedia:Requested moves]].  You can also [[Wikipedia:Requests for page protection|request]] that the page be unprotected.  
 |template=Please discuss any changes on the [[{{TALKPAGENAME}}#{{#if:{{{section|}}}|{{{section}}}|top}}|talk page]]; you may use the {{tlx|edit protected}} template to ask an [[Wikipedia:Administrators|administrator]] or [[Wikipedia:Template editor|template editor]] to make an edit if it is supported by [[Wikipedia:Consensus|consensus]]. {{#ifeq:{{NAMESPACE}}|{{ns:8}}&lt;!--MediaWiki--&gt;||You may also [[Wikipedia:Requests for page protection|request]] that this page be unprotected.}}
 |office=If you can edit this page, please discuss all changes and additions on the [[{{TALKPAGENAME}}|talk page]] first. '''Do not remove protection from this page unless you are authorized by the Wikimedia Foundation to do so.'''
 |create=Please see the {{#if:{{{xfd|}}}|'''[[{{{xfd}}}|deletion discussion]]''' or the}} [{{fullurl:Special:Log|type=delete&amp;page={{FULLPAGENAMEE}}}} deletion log] for details of why this page was deleted. If you would like to create a page at this title, you must first [[Wikipedia:Requests for page protection|request]] for it to be unprotected, or contact the administrator who deleted the page for the deleted material to be restored. If unsuccessful, you can use [[Wikipedia:Deletion review|deletion review]].
}}}}}
}}
}}|&lt;includeonly&gt;[[Category:Wikipedia pages with incorrect protection templates]]&lt;/includeonly&gt;}}&lt;!--End if small--&gt;&lt;includeonly&gt;{{#ifeq:{{lc:{{{categories|no}}}}}|no||{{{categories|}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;

{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>73gx4b9m987fbfiqsxhq4kui635h86h</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Lua</title>
    <ns>10</ns>
    <id>45415520</id>
    <revision>
      <id>844729008</id>
      <parentid>844431124</parentid>
      <timestamp>2019-01-28T07:40:37Z</timestamp>
      <contributor>
        <username>ديفيد عادل وهبة خليل 2</username>
        <id>88422</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contributions/184.5.103.121|184.5.103.121]] ([[User talk:184.5.103.121|talk]]) to last revision by [[:User:Mbch331|Mbch331]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="196" xml:space="preserve">&lt;includeonly&gt;{{#invoke:Lua banner|main}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Lua|Module:Lua banner}}
{{documentation}}
&lt;!-- Categories go on the /doc subpage and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>pnmjp3f3fl321yf2jpg5syebi412n7b</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Language-code-documentation</title>
    <ns>10</ns>
    <id>59109137</id>
    <revision>
      <id>799032213</id>
      <timestamp>2018-11-26T04:48:06Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <comment>Created page with "{{LangSwitch |default=Language code (only needs to be provided if the language displayed is to be fixed and independent of the user’s preferences). |de=Sprachversion (muss n..."</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1902" xml:space="preserve">{{LangSwitch
|default=Language code (only needs to be provided if the language displayed is to be fixed and independent of the user’s preferences).
|de=Sprachversion (muss nur angegeben werden, wenn die angezeigte Sprache unabhängig von der, in den Benutzereinstellungen festgelegten, Sprache gesetzt werden soll).
|es=Código de idioma (solo se debe especificar si el idioma debe ser configurado e independiente de las preferencias del usuario).
|fa=کد زبانی (فقط هنگامی مورد نیاز است که زبان نمایش داده شده ثابت شده‌است و مستفل از تنظیمات کاربر باشد)
|fr=Code de langue (ne doit être indiqué que si la langue doit être fixée et indépendante des préférences de l’utilisateur).
|hu=Nyelvkód (csak akkor szükséges megadni, ha rögzíteni és felületnyelv-függetlenné kell a nyelvet).
|it=Codice linguaggio (deve essere specificato solo se la lingua deve essere impostata e indipendente dalle preferenze dell'utente).
|ja=言語コード (正しく言語表示されない場合に指定が必要です) このオプションは通常テンプレートのデバッグ検査用に利用されるものです。 
|mk=Јазичен код (се става само ако со тоа јазикот е непроменлив и независен од корисничките нагодувања).
|pt=Código de idioma (só deve ser especificado se o idioma for definido e independente das preferências do usuário).
|ru=Код языка (должен указываться только в том случае, если язык должен быть установлен и не зависит от предпочтений пользователя).
|zh=语言代码（仅当语言要设置且与用户偏好无关时才必须指定）。
|lang={{{1|}}}
}}&lt;noinclude&gt;
{{Documentation}}

&lt;/noinclude&gt;</text>
      <sha1>jamb430g6ur26azmygbyaw6otbaqz3g</sha1>
    </revision>
  </page>
  <page>
    <title>Template:LangSwitch</title>
    <ns>10</ns>
    <id>19028</id>
    <revision>
      <id>1186340368</id>
      <parentid>792742487</parentid>
      <timestamp>2020-05-21T10:42:21Z</timestamp>
      <contributor>
        <username>Jasper Deng</username>
        <id>3724</id>
      </contributor>
      <minor/>
      <comment>6 revisions imported from [[:commons:Template:LangSwitch]]: Introducing this template for use by me and other CU's</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="103" xml:space="preserve">&lt;includeonly&gt;{{#invoke: LangSwitch|langSwitch}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>iq381jtm468gme64a7mcz0hhyrm2735</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Label/doc</title>
    <ns>10</ns>
    <id>14108325</id>
    <revision>
      <id>1318919409</id>
      <parentid>1105738701</parentid>
      <timestamp>2020-12-06T16:13:20Z</timestamp>
      <contributor>
        <username>Sabelöga</username>
        <id>2599541</id>
      </contributor>
      <comment>sv</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19253" xml:space="preserve">{{Lua|Module:Wikidata label}}
{{TemplateBox
  |1        =1
  |1label   =item
  |1aliases = item
  |1d    ={{LangSwitch
  |en    =Wikidata item ID number in form "Q" + item number.&lt;br/&gt;Also works with Wikidata properties if you use "P"+number.
  |bn    ="নম্বর" নাম্বার ফর্ম "Q" + Q সংখ্যা। &lt;br/&gt; যদি আপনি কোড "P" + নম্বর ব্যবহার করেন তবে উইকিপিডিয়া-এর বৈশিষ্ট্যগুলির সাথেও কাজ করে।
  |de    =Q-Code-Nummer in Form "Q" + Artikelnummer.&lt;br/&gt;Funktioniert auch mit Wikidata-Eigenschaften, wenn Sie "P" + Nummer verwenden.
  |es    =Q-código en el formulario "Q" + número de artículo.&lt;br/&gt;También funciona con las propiedades de Wikidata si usa "P" + número.
  |fr    =Numéro du code Q dans la forme "Q" + numéro de l'élément.&lt;br/&gt;Fonctionne également avec les propriétés de Wikidata si vous utilisez le code "P" + numéro
  |hi    =प्रपत्र "Q" + आइटम संख्या में प्र संख्या। &lt;br/&gt; इसके अलावा विकिडाटा के गुणों के साथ भी काम करता है यदि आप कोड "पी" + नंबर का उपयोग करते हैं
  |ja    =形式 "Q" +番号のQコード番号。&lt;br/&gt;また、 "P" +番号を使用する場合はWikidataプロパティでも動作します。
  |ml    ="Q" + item number ൽ ക്യൂ നമ്പർ. &lt;br/&gt; കോഡ് "P" + നമ്പർ ഉപയോഗിക്കുമ്പോൾ, വിക്കിഡേറ്റയുടെ സവിശേഷതകളുമായി പ്രവർത്തിക്കുന്നു
  |nl    =Q nummer in de vorm "Q" + artikelnummer. &lt;br/&gt; Werkt ook met de eigenschappen van Wikidata als u code "P" + nummer gebruikt
  |pt    =Q número na forma "Q" + número do item.&lt;br/&gt;Também funciona com as propriedades da Wikidata se você usar o código "P" + número
  |ru    =Q-код в форме «Q» + номер позиции.&lt;br/&gt;Также работает с свойствами Wikidata, если вы используете «P» + номер.
  |sv    =Q-nummer i formuläret "Q" + artikelnummer. &lt;br/&gt; Fungerar även med Wikidata-egenskaper om du använder kod "P" + nummer
  |zh    =Q码表示“Q”+号码。&lt;br/&gt;如果您使用“P”+号码，也可以使用Wikidata属性。
}}
  |1type    =&lt;!-- number, string, string/wiki-user-name, string/wiki-page-name, string/line; unknown --&gt;
  |1def     =&lt;!-- default value for the parameter --&gt;
  |1stat    =required

  |2        =2
  |2label   =language
  |2d       ={{Language-code-documentation}}
  |2aliases = lang
  |2type    =
  |2def     =
  |2stat    =optional

  |3        =link
  |3label   =link
  |3d    ={{LangSwitch
  |en    =link type:&lt;br/&gt;'''wikipedia''' will try to link to Wikipedia (does not work for properties)&lt;br/&gt;'''wikidata'''  to Wikidata&lt;br/&gt;'''wikidata talk'''  to Wikidata talk page&lt;br/&gt;'''commons''' to Commons (does not work for properties)&lt;br/&gt;'''-''' means no link.&lt;br/&gt;The code will try first the link of your choice then if not possible it will fallback and try linking to Wikipedia, and if that is not possible than to Wikidata.
  |bn    =লিঙ্কের ধরন:&lt;br/&gt; '''wikipedia''' উইকিপিডিয়া লিঙ্ক করার চেষ্টা করবে (বৈশিষ্ট্যের জন্য কাজ করে না)&lt;br /&gt;উইকিপিডিয়াতে '''wikidata'''&lt;br/&gt;'''commons''' কমন্সে (বৈশিষ্ট্যের জন্য কাজ করে না)&lt;br/&gt;'''-''' মানে কোন লিঙ্ক নেই।&lt;br/&gt; কোডটি প্রথমে আপনার পছন্দের লিঙ্কটি চেষ্টা করবে, যদি এটি সম্ভব না হয়, তবে উইকিপিডিয়াতে ফিরে আসার চেষ্টা করুন এবং যদি এটি সম্ভব হয় না, তবে উইকিপিডিয়াতে এটি সম্ভব নয়।
  |de    =Link-Typ:&lt;br/&gt;'''wikipedia''' wird versuchen mit Wikipedia zu verknüpfen&lt;br/&gt;'''wikidata''' zu Wikidata&lt;br/&gt;'''Commons ''' zu Commons&lt;br/&gt;'''-''' bedeutet kein Link.&lt;br/&gt;Der Code wird zuerst versuchen, den Link Ihrer Wahl dann wenn nicht möglich, wird es Fallback und versuchen, Link zu Wikipedia, und wenn das nicht möglich ist, als zu Wikidata.
  |es    =link type:&lt;br/&gt;'''wikipedia''' intentará vincular a Wikipedia&lt;br/&gt;'''wikidata''' a Wikidata&lt;br/&gt;'''commons''' a Commons &lt;br/&gt;'''-''' significa que no hay enlace.&lt;br/&gt;El código intentará primero el enlace de su elección, si no es posible, se volverá a intentar y enlazar a Wikipedia, y si eso no es posible que a Wikidata
  |fr    =type de lien:&lt;br/&gt;'''wikipedia''' tentera de lier Wikipedia (ne fonctionne pas pour les propriétés)&lt;br/&gt;'''wikidata''' à Wikidata&lt;br/&gt;'''communs''' sur Commons (ne fonctionne pas pour les propriétés)&lt;br/&gt;'''-''' signifie aucun lien.&lt;br/&gt;Le code essayera d'abord le lien de votre choix puis, s'il n'est pas possible, il retournera et tentera de se lier à Wikipedia, et si cela n'est pas possible, à Wikidata.
  |hi    =लिंक का प्रकार:&lt;br/&gt; '''wikipedia''' विकिपीडिया को लिंक करने का प्रयास करेगा (गुणों के लिए काम नहीं करता है)&lt;br/&gt; विकिडाटा में '''wikidata'''&lt;br/&gt; '''commons''' कॉमन्स पर (गुणों के लिए काम नहीं करता है)&lt;br/&gt; '''-''' का मतलब कोई लिंक नहीं है&lt;br/&gt; कोड पहले आपकी पसंद की लिंक का प्रयास करेगा, यदि यह संभव नहीं है, तो वह वापस आ जाएगी और विकिपीडिया से लिंक करने का प्रयास करेगा, और अगर यह संभव नहीं है, तो विकिडाटा के लिए।
  |ja    =リンクタイプ：&lt;br/&gt;'''wikipedia'''はウィキペディアにリンクしようとします&lt;br/&gt;'''wikidata'''をウィキダータに&lt;br/&gt;'''commons'''」はコモンズに、「&lt;br/&gt;''' - '''はリンクがないことを意味します。&lt;br/&gt;コードは最初にあなたの選択のリンクを試してみることができますし、もし可能でないならそれはフォールバックしてWikipediaにリンクしようとします、それがWikidataよりも可能でないなら
  |ml    =ലിങ്ക് തരം:&lt;br/&gt; '''wikipedia''' വിക്കിപീഡിയയെ ബന്ധിപ്പിക്കാൻ ശ്രമിക്കും (വസ്തുവകകൾക്കായി പ്രവർത്തിക്കുന്നില്ല)&lt;br/&gt;'''wikidata''' വിക്കിഡേറ്റയിലെ &lt;br/&gt;'''common''' കോമൺസിൽ (സ്വത്തുക്കൾക്കായി പ്രവർത്തിക്കുകയില്ല)&lt;br/&gt;'''-''' എന്നതുകൊണ്ട് ഒരു ലിങ്കും അർത്ഥമാക്കുന്നില്ല.&lt;br/&gt; ഈ കോഡ് അസാധുവാക്കാൻ സാധ്യമല്ലെങ്കിൽ, ആദ്യം അത് നിങ്ങളുടെ ലിങ്കിന്റെ ലിങ്ക് ശ്രമിക്കും, അത് വിക്കിപീഡിയയിലേക്ക് കണ്ണിചേർക്കും, അതു സാധ്യമല്ലെങ്കിൽ, വിക്കിഡേറ്റയിലേക്കും.
  |nl    =link type: &lt;br/&gt; '''wikipedia''' zal proberen om Wikipedia te koppelen (werkt niet voor eigenschappen)&lt;br/&gt;'''wikidata' '' naar Wikidata &lt;br/&gt; '''common'''op Commons (werkt niet voor eigenschappen) &lt;br/&gt;''' - '''betekent geen link. &lt;br/&gt; De code zal eerst de link van uw keuze proberen en dan, als het niet is mogelijk, zal het terugkeren en proberen te koppelen naar Wikipedia, en als dat niet mogelijk is, naar Wikidata.
  |pt    =tipo de link:&lt;br/&gt;'''wikipedia''' tentará vincular Wikipedia (não funciona para propriedades)&lt;br/&gt;'''wikidata''' para Wikidata&lt;br/&gt;'''commons''' em Commons (não funciona para propriedades)&lt;br/&gt;'''-'''significa nenhum link.&lt;br/&gt;O código primeiro tentará o link de sua escolha e, se não for possível, ele retornará e tentará vincular a Wikipedia, e se isso não for possível, para a Wikidata.
  |ru    =тип ссылки:&lt;br/&gt;'''wikipedia''' будет пытаться ссылаться на Википедию&lt;br/&gt;'''wikidata''' в Wikidata&lt;br/&gt;'''commons''' to Commons&lt;br/&gt;'''-''' означают ссылку.&lt;br/&gt;Код сначала попробует ссылку по вашему выбору, тогда, если это невозможно, она отступит и попытается установить связь с Википедией, и если это невозможно, чем в Wikidata
  |sv    =länktyp:&lt;br/&gt;'''wikipedia''' kommer att försöka länka Wikipedia (fungerar inte för egenskaper)&lt;br/&gt;'''wikidata''' till Wikidata&lt;br/&gt;'''common''' på Commons (fungerar inte för egenskaper)&lt;br/&gt;'''-'''betyder ingen länk.&lt;br/&gt;Koden ska först försöka länken efter eget val och sedan, om det inte är möjligt, kommer det att återvända och försöka länka till Wikipedia, och om det inte är möjligt, till Wikidata.
  |zh    =链接类型：'''维基百科''将尝试链接到维基百科; 维基百科“维基百科” 对共同体而言，“共同体”和“ - ”意味着没有联系。 代码将首先尝试您选择的链接，如果不可能，它将回退并尝试链接到维基百科，如果这不可能到Wikidata
}}
  |3aliases =
  |3type    =string
  |3def     =-
  |3stat    =optional

  |4        = capitalization
  |4label   = capitalization
  |4d    = {{LangSwitch
  |en    = can be:&lt;br/&gt;'''uc''': upper case&lt;br/&gt;'''lc''': lower case&lt;br/&gt;'''ucfirst''': upper case for the first letter&lt;br/&gt;'''lcfirst''': lower case for the first letter&lt;br/&gt;'''none''': to leave it as is
  |bn    =লিঙ্কের ধরন:&lt;br/&gt;'''uc''': বড় হাতের&lt;br/&gt;'''lc''': ছোট হাতের&lt;br/&gt;'''ucfirst''': প্রথম অক্ষরের জন্য বড় হাতের&lt;br/&gt;'''lcfirst''': প্রথম অক্ষরের জন্য ছোট হাতের অক্ষর&lt;br/&gt;'''none''': এটি হিসাবে এটি ত্যাগ করতে
  |de    = kann&lt;br/&gt;'''uc''': Großbuchstaben&lt;br/&gt;'''lc''': Kleinbuchstaben&lt;br/&gt;'''ucfirst''': Großbuchstabe für den ersten Buchstaben&lt;br/&gt;'''lcfirst''': Kleinbuchstabe für den ersten Buchstaben&lt;br/&gt;'''none''': um es zu verlassen ist
  |es    = puede ser&lt;br/&gt;'''uc''': mayúsculas&lt;br/&gt;'''lc''': minúsculas&lt;br/&gt;'''ucfirst''': mayúsculas para la primera letra&lt;br/&gt;'''lcfirst''': minúscula para la primera letra&lt;br/&gt;'''none''': es
  |fr    = type de lien:&lt;br/&gt;'''uc''': majuscules&lt;br/&gt;'''lc''': minuscules&lt;br/&gt;'''ucfirst''': majuscule pour la première lettre&lt;br/&gt;'''lcfirst''': minuscule pour la première lettre&lt;br/&gt;'''none''': pour le laisser comme il est
  |hi    =लिंक का प्रकार:&lt;br/&gt;'''uc''': अपरकेस&lt;br/&gt;'''lc''': लोअर केस&lt;br/&gt;'''ucfirst''': पहले अक्षर के लिए अपरकेस&lt;br/&gt;'''lcfirst''': पहला अक्षर के लिए लोअरकेस&lt;br/&gt;'''none''': इसे छोड़ने के लिए जैसे ही है
  |ja    ='''uc''': 大文字&lt;br/&gt;'''lc''': 小文字&lt;br/&gt;'''ucfirst''': 最初の文字の大文字&lt;br/&gt;'''lcfirst''': 最初の文字の小文字または &lt;br/&gt;'''none''':  それは
  |ml    =ലിങ്ക് തരം:&lt;br/&gt; '''uc''': വലിയക്ഷരം&lt;br/&gt; '''lc''': ലോവർ കേസ്&lt;br/&gt; '''ucfirst''': ആദ്യ കത്തിന് വലിയക്ഷരം&lt;br/&gt; '''lcfirst''': ആദ്യത്തെ അക്ഷരത്തിനായി ചെറിയക്ഷരം&lt;br/&gt; '''none''' ഇല്ല
  |nl    =type link:&lt;br/&gt;'''uc''': hoofdletter&lt;br/&gt;'''lc''': kleine letters&lt;br/&gt;'''ucfirst''': hoofdletter voor de eerste letter&lt;br/&gt;'''lcfirst''': kleine letter voor de eerste letter&lt;br/&gt; '''none''': om het te verlaten zoals het is.
  |pt    =tipo de link:&lt;br/&gt;'''uc''': maiúscula&lt;br/&gt;'''lc''': minúsculas&lt;br/&gt;'''ucfirst''': maiúsculas para a primeira letra&lt;br/&gt;'''lcfirst''': minúsculas para a primeira letra&lt;br/&gt;'''none''': deixá-lo como está
  |ru    =может быть&lt;br/&gt;'''uc''': верхний регистр&lt;br/&gt;'''lc''': нижний регистр&lt;br/&gt;'''ucfirst''': верхний регистр для первой буквы&lt;br/&gt;'''lcfirst''': нижний регистр для первой буквы&lt;br/&gt;'''none''': чтобы оставить его как является
  |sv    =typ av länk:&lt;br/&gt; '''uc''': stor bokstav&lt;br/&gt; '''lc''': små bokstäver&lt;br/&gt; '''ucfirst''': stor bokstav för första bokstaven&lt;br/&gt; '''lcfirst''': små bokstäver för första bokstaven&lt;br/&gt; '''ingen''': att lämna den som den är
  |zh    =可以是“uc”（大写），“lc”（小写），“ucfirst”（第一个字母大写），“lcfirst”（第一个字母的小写）或“none”是）
}}
  |4aliases =
  |4type    = string
  |4def     = none
  |4stat    = optional

  |5        = show_id
  |5label   = show_id
  |5d    = {{LangSwitch
    |en    = if set to 1 than item ID will be displayed after the label
  }}
  |5aliases =
  |5type    = string
  |5def     = none
  |5stat    = optional-

  |name               =Label
  |desc               ={{LangSwitch|default=This template returns the label for a particular entity (item or property), using|bn=এই টেমপ্লেটটি স্বতন্ত্র সত্তা (উপাদান বা বৈশিষ্ট্য) এর লেবেল ব্যবহার করে, ব্যবহার করে|de=Diese Vorlage gibt das Etikett für eine bestimmte Entität (Element oder Eigenschaft) zurück|es=Esta plantilla devuelve la etiqueta de una entidad particular (elemento o propiedad), utilizando|fr=Ce modèle renvoie le libellé d'une entité Wikidata (élément ou propriété), en utilisant|hi=यह टेम्प्लेट एक विकिडाटा इकाई (तत्व या गुण) के लेबल का उपयोग कर देता है|ja=このテンプレートは、特定のエンティティ（アイテムまたはプロパティ）のラベルを返します。|ml=ഈ ഫലകം ഒരു വിക്കിഗ്രന്ഥശാല (മൂലകമോ സ്വത്തവകാശമോ) ന്റെ ലേബലിനെയാണ് ഉപയോഗിക്കുന്നത്|nl=Deze sjabloon retourneert het label van een Wikidata entiteit (element of eigenschap), met behulp van|pt=Este modelo retorna o rótulo de uma entidade Wikidata (elemento ou propriedade), usando
|ru=Этот шаблон возвращает метку для определенного объекта (объекта или свойства), используя|sv=Den här mallen returnerar en Wikidata-enhets etikett (objekt eller egenskap) med hjälp av|zh=此模板返回使用的特定实体（项目或属性）的标签}} [[Module:Wikidata label]].
  |namespace          =all
  |usergroup          =all
  |placement          =
  |example-value      =
  |mustbesubst        =
  |relieson           = [[Module:Wikidata label]]
  |usage-notes        =
  |shorthand          =
  |setscats           =
  |seealso            =&lt;!-- see below near bottom --&gt;
  |type               =
  |i18n-desc          =
  |i18n-subpage       =
  |i18n-mediawiki-msg =
  |i18n-method        =
  |example            =
  |print              =
}} 

=={{int Examples}} 1==
&lt;table width="100%"&gt;&lt;tr&gt;&lt;td&gt;
*&lt;code&gt;&lt;nowiki&gt;{{label|Q1}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q1}}
*&lt;code&gt;&lt;nowiki&gt;{{label|Q1|en}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q1|en}}
*&lt;code&gt;&lt;nowiki&gt;{{label|Q1|ar}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q1|ar}}
*&lt;code&gt;&lt;nowiki&gt;{{label|Q1|he}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q1|he}}
*&lt;code&gt;&lt;nowiki&gt;{{label|Q1|zh}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q1|zh}}
&lt;/td&gt;&lt;td&gt;
*&lt;code&gt;&lt;nowiki&gt;{{label|Q97|capitalization=none}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q97|capitalization=none}}
*&lt;code&gt;&lt;nowiki&gt;{{label|Q97|capitalization=uc}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q97|capitalization=uc}}
*&lt;code&gt;&lt;nowiki&gt;{{label|Q97|capitalization=lc}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q97|capitalization=lc}}
*&lt;code&gt;&lt;nowiki&gt;{{label|Q97|capitalization=ucfirst}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q97|capitalization=ucfirst}}
*&lt;code&gt;&lt;nowiki&gt;{{label|Q97|capitalization=lcfirst}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q97|capitalization=lcfirst}}
&lt;/td&gt;&lt;td&gt;
*&lt;code&gt;&lt;nowiki&gt;{{label|Q5|link=wikidata}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q97|link=wikidata}}
*&lt;code&gt;&lt;nowiki&gt;{{label|Q5|link=commons}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q97|link=commons}}
*&lt;code&gt;&lt;nowiki&gt;{{label|Q5|link=-}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|Q97|link=-}}
*&lt;code&gt;&lt;nowiki&gt;{{label|P17}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|P17}}
*&lt;code&gt;&lt;nowiki&gt;{{label|P17|link=-}}&lt;/nowiki&gt;&lt;/code&gt;: {{label|P17|link=-}}
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

== {{int Examples}} 2==

; {{Q|1}}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | Q1 }}&lt;/code&gt; → {{{{BASEPAGENAME}} | Q1 }}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | Q1 | en }}&lt;/code&gt; → {{{{BASEPAGENAME}} | Q1 | en }}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | Q1 | es }}&lt;/code&gt; → {{{{BASEPAGENAME}} | Q1 | es }}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | Q1 | ru }}&lt;/code&gt; → {{{{BASEPAGENAME}} | Q1 | ru }}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | Q1 | ja }}&lt;/code&gt; → {{{{BASEPAGENAME}} | Q1 | ja }}

; {{P|31}}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | P31 }}&lt;/code&gt; → {{{{BASEPAGENAME}} | P31 }}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | P31 | en }}&lt;/code&gt; → {{{{BASEPAGENAME}} | P31 | en }}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | P31 | es }}&lt;/code&gt; → {{{{BASEPAGENAME}} | P31 | es }}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | P31 | ru }}&lt;/code&gt; → {{{{BASEPAGENAME}} | P31 | ru }}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | P31 | ja }}&lt;/code&gt; → {{{{BASEPAGENAME}} | P31 | ja }}

; {{P|279}}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | Property:P279 }}&lt;/code&gt; → {{{{BASEPAGENAME}} | Property:P279 }}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | Property:P279 | en }}&lt;/code&gt; → {{{{BASEPAGENAME}} | Property:P279 | en }}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | Property:P279 | es }}&lt;/code&gt; → {{{{BASEPAGENAME}} | Property:P279 | es }}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | Property:P279 | ru }}&lt;/code&gt; → {{{{BASEPAGENAME}} | Property:P279 | ru }}
: &lt;code&gt;&lt;nowiki&gt;{{&lt;/nowiki&gt;{{BASEPAGENAME}} | Property:P279 | ja }}&lt;/code&gt; → {{{{BASEPAGENAME}} | Property:P279 | ja }}

== {{int See also}} ==
{{Entity description templates}}

&lt;includeonly&gt;
[[Category:Templates]]
&lt;/includeonly&gt;</text>
      <sha1>1b7rezs84y1ogiuecslqrcxbmisagyx</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Int See also</title>
    <ns>10</ns>
    <id>25945282</id>
    <revision>
      <id>1224585199</id>
      <parentid>1147992531</parentid>
      <timestamp>2020-07-05T03:16:55Z</timestamp>
      <contributor>
        <username>Patsagorn Y.</username>
        <id>3011913</id>
      </contributor>
      <minor/>
      <comment>+th</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="604" xml:space="preserve">&lt;noinclude&gt;{{doc}}&lt;/noinclude&gt;{{TranslateThis
|ar=انظر أيضا
|be-tarask=Глядзіце таксама
|bn=আরও দেখুন
|da=Se også
|de=Siehe auch
|el=Δείτε επίσης
|en=See also
|en-gb=See also
|eo=Vidu ankaŭ
|es=Véase también
|fr=Voir aussi
|hu=Lásd még
|it=Vedi anche
|ja=参照
|ko=같이 보기
|mk=Поврзано
|nb=Se også
|nn=Sjå òg
|nl=Zie ook
|pl=Zobacz też
|pt=Ver também
|ru=См. также
|sq=Shih edhe
|sr=Видети још
|sv=se även
|th=ดูเพิ่ม
|tr=Ayrıca bakınız
|uk=Див. також
|zh-hans=参见
|zh-hant=參見
}}</text>
      <sha1>ph5alkz0qrpo7yhun03e71jhgechu6v</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Int Examples</title>
    <ns>10</ns>
    <id>24118173</id>
    <revision>
      <id>1224568924</id>
      <parentid>1147256606</parentid>
      <timestamp>2020-07-05T02:49:58Z</timestamp>
      <contributor>
        <username>Patsagorn Y.</username>
        <id>3011913</id>
      </contributor>
      <minor/>
      <comment>+th</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="593" xml:space="preserve">&lt;noinclude&gt;{{doc}}&lt;/noinclude&gt;{{TranslateThis
|ar=أمثلة
|be-tarask=Прыклады
|bn=উদাহরণসমূহ
|cy=Engreifftiau
|da=Eksempler
|de=Beispiele
|el=Παραδείγματα
|en=Examples
|en-gb=Examples
|eo=Ekzemploj
|fr=Exemples
|hu=Példák
|id=Contoh
|it=Esempi
|ja=例
|ko=용례들
|mk=Примери
|nb=Eksempler
|nl=Voorbeelden
|nn=Døme
|pt=Exemplos
|pt-br=Exemplos
|ru=Примеры
|se=Ovdamearkkat
|sma=Vuesiehtimmieh
|sq=Shembuj
|sr=Примери
|sv=exempel
|sw=Mifano
|th=ตัวอย่าง
|uk=Приклади
|zh-hans=示例
|zh-hant=範例
}}</text>
      <sha1>ltxfvf3sp1c4cxklz4e8hq2jxkwwoy7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Fmbox</title>
    <ns>10</ns>
    <id>8544</id>
    <revision>
      <id>80968044</id>
      <parentid>80968039</parentid>
      <timestamp>2013-10-23T14:49:47Z</timestamp>
      <contributor>
        <username>Vogone</username>
        <id>3120</id>
      </contributor>
      <minor/>
      <comment>3 revisions from [[:en:Template:Fmbox]]: update</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="141" xml:space="preserve">{{#invoke:Message box|fmbox}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>q4qfnrd9je1n71bknyj9gdhs02g2rws</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Flatlist</title>
    <ns>10</ns>
    <id>15038125</id>
    <revision>
      <id>44286620</id>
      <timestamp>2013-05-19T17:39:12Z</timestamp>
      <contributor>
        <username>Michgrig</username>
        <id>7161</id>
      </contributor>
      <comment>taken from [[en:Template:Flatlist]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="178" xml:space="preserve">&lt;div class="hlist {{{class|}}}" style="margin-left: {{#expr:{{{indent|0}}}*1.6}}em; {{{style|}}}"&gt;{{#if:{{{1|}}}|
{{{1}}}
&lt;/div&gt;}}&lt;noinclude&gt;&lt;/div&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>m932n5ogkgsh97lpgcgwp295k6gvqct</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Fallback</title>
    <ns>10</ns>
    <id>14501</id>
    <revision>
      <id>7108560</id>
      <parentid>6194531</parentid>
      <timestamp>2013-02-20T01:37:53Z</timestamp>
      <contributor>
        <username>Techman224</username>
        <id>6952</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Fallback]]": Widely used template: protection settings was not imported ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="515" xml:space="preserve">{{#ifexist: Template:{{{1|}}}/{{#if: {{{2|}}} |{{{2}}}|{{int:Lang}}}} | {{#if: {{{2|}}} |{{{2}}}|{{int:Lang}}}} | {{#ifexist: Template:{{{1|}}}/{{GetFallback|{{#if: {{{2|}}} |{{{2}}}|{{int:Lang}}}}}} | {{GetFallback|{{#if: {{{2|}}} |{{{2}}}|{{int:Lang}}}}}} | {{#ifexist: Template:{{{1|}}}/{{GetFallback2|{{#if: {{{2|}}} |{{{2}}}|{{int:Lang}}}}}} | {{GetFallback2|{{#if: {{{2|}}} |{{{2}}}|{{int:Lang}}}}}} | {{CONTENTLANGUAGE}} }} }} }}&lt;noinclude&gt;

{{documentation}}
[[Category:Localisation templates]]
&lt;/noinclude&gt;</text>
      <sha1>ck6a3j3cj5cvp8fc2o72o2f1zgop2qg</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Entity description templates</title>
    <ns>10</ns>
    <id>83177646</id>
    <revision>
      <id>1329272442</id>
      <parentid>1275752069</parentid>
      <timestamp>2020-12-26T17:38:38Z</timestamp>
      <contributor>
        <username>ChristianKl</username>
        <id>2695917</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="716" xml:space="preserve">{{Flatlist|
* {{tl|Autodescription}}
** {{tld|A}}
* {{tl|Data}}
* {{tl|EntitySchema}}
** {{tld|E}}
* {{tl|Label}}
** {{Label|42}}
* {{tl|LinkedLabel}}
** {{LinkedLabel|42}}
* {{tl|Label and description}}
** {{tld|LD}}
** {{LD|42}}
* {{tl|Q}}
** {{Q|42}}
* {{tl|Q+}}
** {{Q+|42}}
* {{tl|Q'}}
** {{Q'|42}}
* {{tl|Q''}}
** {{Q''|42}}
* {{tl|Q'''}}
** {{Q'''|42}}

* {{tl|Q!}}
** {{Q!|42}}
* {{tl|Q*}}
** {{Q*|42}}
* {{tl|Qfr}} (displays French label)
* {{tl|QP}}
** {{QP|42|31}}
* {{tl|QT}}
** {{QT|42}}
* {{tl|Property}}
** {{tld|P}}
* {{tl|P'}}
* {{tl|P+}}
* {{tl|Lexeme}}
** {{tld|L}}
* {{tl|Claim}}
** {{tld|C}}
* {{tl|Statement}}
** {{tld|St}}
* {{tl|Statement+}}
}}&lt;noinclude&gt;

[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>63o23pvm2l4689bafbwr6cgwo8ih084</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Documentation subpage</title>
    <ns>10</ns>
    <id>8330</id>
    <revision>
      <id>1331794327</id>
      <parentid>1331513585</parentid>
      <timestamp>2020-12-30T18:02:43Z</timestamp>
      <contributor>
        <username>Tacsipacsi</username>
        <id>33956</id>
      </contributor>
      <comment>restore i18n</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1062" xml:space="preserve">&lt;includeonly&gt;{{#ifeq: {{lc:{{SUBPAGENAME}}}} | {{{override|doc}}}	
  | &lt;!-- doc page --&gt;	
&lt;/includeonly&gt;{{	
    #ifeq: {{{doc-notice|show}}} | show	
    | {{ombox	
      | type = notice	
      | image = [[File:Edit-copy green.svg|40px|link=]]
      | text = 	{{Documentation subpage/text/{{#ifexist:Template:Documentation subpage/text/{{int:lang}}|{{int:lang}}|en}}|1={{{1|}}}|text2={{{text2|}}}|text1={{{text1|}}}}}
      }}	
    }}{{DEFAULTSORT:{{{defaultsort|{{PAGENAME}}}}}}}{{
    #if: {{{inhibit|}}}
    | &lt;!-- skip --&gt;
    | &lt;includeonly&gt;{{#ifexist:{{NAMESPACE}}:{{BASEPAGENAME}}|[[Category:{{	
      #switch: {{SUBJECTSPACE}}	
      | Template  = Template
      | Module    = Module
      | User      = User	
      | #default  = Template
    }} documentation pages]]|[[Category:Documentation subpages without corresponding pages]]}}&lt;/includeonly&gt;	
  }}&lt;includeonly&gt;	
| &lt;nowiki /&gt;&lt;!-- if not on a /doc subpage, do nothing --&gt;
}}&lt;/includeonly&gt;&lt;noinclude&gt;	
{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>i3sl2y2tdu7ih9vyjnahl7rwl96fmvg</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Documentation/template page</title>
    <ns>10</ns>
    <id>8530</id>
    <revision>
      <id>1386600147</id>
      <parentid>1180943214</parentid>
      <timestamp>2021-03-20T20:43:37Z</timestamp>
      <contributor>
        <username>Sabelöga</username>
        <id>2599541</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1394" xml:space="preserve">{{#switch: {{SUBPAGENAME}}
| sandbox
| testcases = {{BASEPAGENAME}}
| #default = {{PAGENAME}}
}}&lt;noinclude&gt;{{documentation|content={{LangSwitch
   | ast = Esta subplantía de {{tl|documentation}} úsase pa determinar el nome de páxina de la plantía.
   | bn = {{tl|documentation}}-এ এই উপটেমপ্লেটটি টেমপ্লেট পাতার নাম নির্ধারণ করতে ব্যবহৃত হয়।
   | de = Die Untervorlage von {{tl|documentation}} wird verwendet um den Namen der Vorlage zu bestimmen.
   | en = This subtemplate of {{tl|documentation}} is used to determine the template page name.
   | fa = این زیرالگوی {{tl|documentation}} برای مشخص‌کردن نام صفحهٔ الگو استفاده شده‌است.
   | fr = Ce sous-modèle de {{tl|documentation}} est utilisé pour déterminer le nom de la page du modèle.
   | mk = Овој потшаблон на {{tl|documentation}} служи за да го одреди името на шаблонот.
   | nl = Dit subsjabloon van {{tl|documentation}} wordt gebruikt om de naam van de sjabloonpagina vast te stellen.
   | sv = Den här undermallen till {{tl|documentation}} används för att avgöra mallens sidnamn.
   | zh-hans = 这个{{tl|documentation}}子模板用于定义模板页面名称。
   }} }}
[[Category:Subtemplates]]
&lt;/noinclude&gt;</text>
      <sha1>hfolddscvizdiaqgn2q18f2yljdkz8u</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Documentation/start box2</title>
    <ns>10</ns>
    <id>8532</id>
    <revision>
      <id>73104539</id>
      <parentid>293828</parentid>
      <timestamp>2013-09-28T14:42:45Z</timestamp>
      <contributor>
        <username>Multichill</username>
        <id>72353</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Documentation/start box2]]": Widely used template ([Edit=Allow only autoconfirmed users] (indefinite) [Move=Allow only autoconfirmed users] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="580" xml:space="preserve">{{documentation/start box
| preload = {{{preload|}}}   &lt;!--Allow custom preloads--&gt;
| heading = {{{heading|¬}}}   &lt;!--Empty but defined means no header--&gt;
| heading-style = {{{heading-style|}}}
| content = {{{content|}}}

| docpage = 
  {{#if: {{{1|}}}
  | {{{1|}}}
  | {{{docspace|{{NAMESPACE}}}}}:{{{template page|{{PAGENAME}}}}}/doc
  }}

| doc exist = 
  {{#ifexist: 
    {{#if: {{{1|}}}
    | {{{1|}}}   &lt;!--Other docname fed--&gt;
    | {{{docspace|{{NAMESPACE}}}}}:{{{template page|{{PAGENAME}}}}}/doc
    }}
  | yes
  }}

}}&lt;noinclude&gt;
[[Category:Subtemplates]]
&lt;/noinclude&gt;</text>
      <sha1>i7d1g5msyl55jxyj567u48d7jz5orv1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Documentation/start box</title>
    <ns>10</ns>
    <id>12862631</id>
    <revision>
      <id>1376762109</id>
      <parentid>1355553732</parentid>
      <timestamp>2021-03-06T23:18:57Z</timestamp>
      <contributor>
        <username>Ihaveahax</username>
        <id>59911</id>
      </contributor>
      <comment>replace edit/history with Special:EditPage and Special:PageHistory - VisualEditor seems to break ?action=history and change it to an edit link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2500" xml:space="preserve">&lt;!--
  Start of green doc box
--&gt;&lt;div class="template-documentation" style="background-color:#ecfcf4; border:1px solid #aaa; padding:12px; clear:both;"&gt;&lt;!--
  Add the heading at the top of the doc box:
--&gt;{{#ifeq: {{{heading|¬}}} | &lt;!--Defined but empty--&gt;
| &lt;!--"heading=", do nothing--&gt;
| &lt;div style="padding-bottom: 3px; border-bottom: 1px solid #aaa; margin-bottom: 1ex;"&gt;&lt;span style="{{#if: {{{heading-style|}}}
  | {{{heading-style|}}}
  | {{#ifeq: {{SUBJECTSPACE}} | {{ns:Template}}
    | font-weight: bold; font-size: 125%
    | font-size: 150%
    }}
  }}"&gt;{{#switch: {{{heading|¬}}}
  | ¬ =   
    &lt;!--"heading" not defined in this or previous level--&gt;
    {{#switch: {{SUBJECTSPACE}} 
    | {{ns:Template}} = [[File:Template-info.png|50px|link=|alt={{Documentation/getText|icon alt}}]] {{Documentation/getText|template heading}}
    | {{ns:Module}} = [[File:Template-info.png|50px|link=|alt={{Documentation/getText|icon alt}}]] {{Documentation/getText|module heading}}
    | {{ns:File}} = {{Documentation/getText|file heading}}
    | #default = {{Documentation/getText|default heading}}
    }}
  | #default = 
    &lt;!--"heading" has data or is empty but defined--&gt;
    {{{heading|}}}
  }}&lt;/span&gt;{{
  #if: {{{content|}}}
  | 
  | &lt;!--Add the [view][edit][history][purge] or [create] links--&gt;
    &lt;span class="mw-editsection plainlinks" id="doc_editlinks"&gt;{{
    #if: {{{doc exist|}}}
    | &amp;#91;[[{{{docpage|{{FULLPAGENAME}}/doc}}}|{{Documentation/getText|view}}]]&amp;nbsp;'''·''' [[Special:EditPage/{{{docpage|{{FULLPAGENAME}}/doc}}}|{{Documentation/getText|edit}}]]&amp;nbsp;'''·''' [[Special:PageHistory/{{{docpage|{{FULLPAGENAME}}/doc}}}|{{Documentation/getText|history}}]]&amp;nbsp;'''·''' {{purge|{{Documentation/getText|purge}}}}&amp;nbsp;&amp;#93;
    | &lt;!--/doc doesn't exist--&gt;
      [[{{fullurl:{{{docpage|{{FULLPAGENAME}}/doc}}}| action=edit&amp;preload={{
        #if: {{{preload|}}} 
        | {{urlencode:{{{preload}}}}}
        | {{#ifeq: {{SUBJECTSPACE}} | {{ns:File}}
          | Template:Documentation/preload-filespace
          | Template:Documentation/preload
          }} }} }} {{Documentation/getText|create}}]]

    }}&lt;!--

       Add a link to the [/text] subpage for translation

    --&gt;{{#ifexist:{{FULLPAGENAME}}/text|&amp;nbsp;&amp;#91;[[{{FULLPAGENAME}}/text|{{Documentation/getText|translate template}}]]&amp;#93;}} &lt;!--
    --&gt;&lt;/span&gt;
  }}&lt;/div&gt;
}}
&lt;noinclude&gt;&lt;!-- close the div --&gt;&lt;/div&gt;
{{pp-template}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>pniah30cwf2rwj7637y7l0sycbkj8gn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Documentation/end box2</title>
    <ns>10</ns>
    <id>8539</id>
    <revision>
      <id>102546758</id>
      <parentid>102546755</parentid>
      <timestamp>2014-01-16T09:11:42Z</timestamp>
      <contributor>
        <username>Moe Epsilon</username>
        <id>7706</id>
      </contributor>
      <minor/>
      <comment>1 revision from [[:en:Template:Documentation/end box2]]: needed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1092" xml:space="preserve">&lt;noinclude&gt;&lt;div&gt;&lt;/noinclude&gt;&lt;div style="clear: both;"&gt;&lt;/div&gt;&lt;!--So right or left floating items don't stick out of the doc box.--&gt;
&lt;/div&gt;&lt;!--End of green doc box--&gt;&lt;!--
  Link box below for the doc meta-data:
--&gt;{{documentation/end box
| preload = {{{preload|}}}   &lt;!--Allow custom preloads--&gt;
| content = {{{content|}}}
| link box = {{{link box|}}}   &lt;!--So "link box=off" works--&gt;

| docpage = 
  {{#if: {{{1|}}}
  | {{{1|}}}
  | {{{docspace|{{NAMESPACE}}}}}:{{{template page|{{PAGENAME}}}}}/doc
  }}
| doc exist = 
  {{#ifexist: 
    {{#if: {{{1|}}}
    | {{{1|}}}   &lt;!--Other docname fed--&gt;
    | {{{docspace|{{NAMESPACE}}}}}:{{{template page|{{PAGENAME}}}}}/doc
    }}
  | yes
  }}
| docname fed =
  {{#if: {{{1|}}}
  | yes
  }}

| sandbox = 
  {{{docspace|{{NAMESPACE}}}}}:{{{template page|{{PAGENAME}}}}}/sandbox
| testcases = 
  {{{docspace|{{NAMESPACE}}}}}:{{{template page|{{PAGENAME}}}}}/testcases

| template page = 
  {{NAMESPACE}}:{{{template page|{{PAGENAME}}}}}

}}&lt;noinclude&gt;

{{pp-template}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>54lz1082z51zgelmnm8uycjlls23b7w</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Documentation/end box</title>
    <ns>10</ns>
    <id>12886658</id>
    <revision>
      <id>1313412577</id>
      <parentid>1043188154</parentid>
      <timestamp>2020-11-26T13:19:35Z</timestamp>
      <contributor>
        <username>Patsagorn Y.</username>
        <id>3011913</id>
      </contributor>
      <comment>Allow for showing text translation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5928" xml:space="preserve">&lt;!--
  Link box below for the doc meta-data:
 --&gt;{{#if: 
  &lt;!--Check if we should show the link box--&gt;
  {{#ifeq: {{{link box|}}} | off
  |
  | {{{doc exist|yes}}}{{
    #switch: {{SUBJECTSPACE}}
    | {{ns:User}}
    | {{ns:Module}}
    | {{ns:Template}} = yes
    }}
  }}
| {{fmbox
  | id = documentation-meta-data
  | image = none
  | class = mw-content-{{dir|{{Documentation/getText|lang}}}}
  | style = background-color: #ecfcf4;
  | textstyle = font-style: italic;
  | text = 
    {{#if: {{{link box|}}}
    | {{{link box}}}   &lt;!--Use custom link box content--&gt;
    | {{#if: {{{doc exist|yes}}}
      | {{Documentation/getText|template end desc|[[{{{docpage|{{FULLPAGENAME}}/doc}}}]] &lt;small style{{=}}"font-style: normal"&gt;([{{fullurl:{{{docpage|{{FULLPAGENAME}}/doc}}}|action=edit}} {{Documentation/getText|edit}}] &amp;#124; [{{fullurl:{{{docpage|{{FULLPAGENAME}}/doc}}}|action=history}} {{Documentation/getText|history}}])&lt;/small&gt;}}&lt;br&gt;
      |&lt;!-- /doc does not exist, ask to create one?
     --&gt;{{#switch: {{SUBJECTSPACE}}
          | {{ns:Module}} = {{Documentation/getText|module create desc|{{fullurl: {{{docpage| {{FULLPAGENAME}}/doc }}} | action{{=}}edit&amp;preload{{=}}Template:Documentation/preload-module-doc }}}}&lt;br&gt;
          | #default =
        }}
      }}&lt;!-- 
        Add links to /sandbox and /testcases when appropriate:
   --&gt;{{#switch: {{SUBJECTSPACE}}
      | {{ns:Module}}   = {{Documentation/getText|experiment module|{{{sandbox| {{FULLPAGENAME}}/sandbox }}}|{{#ifexist:{{{sandbox| {{FULLPAGENAME}}/sandbox }}}|&lt;small style{{=}}"font-style: normal"&gt;([{{fullurl: {{{sandbox| {{FULLPAGENAME}}/sandbox }}} | action{{=}}edit }} {{Documentation/getText|edit}}] &amp;#124; [{{fullurl:Special:ComparePages | page1{{=}}{{urlencode:{{{template page|{{FULLPAGENAME}}}}}}}&amp;page2{{=}}{{urlencode:{{{sandbox|{{FULLPAGENAME}}/sandbox}}}}}}} {{Documentation/getText|diff}}])&lt;/small&gt;|&lt;small style="font-style: normal"&gt;([{{fullurl: {{{sandbox| {{FULLPAGENAME}}/sandbox }}} | action=edit&amp;preload=Template:Documentation/preload-{{#ifeq: {{SUBJECTSPACE}}|{{ns:Module}}|module-}}sandbox }} {{Documentation/getText|create}}] &amp;#124; [{{fullurl: {{{sandbox| {{FULLPAGENAME}}/sandbox }}} | action=edit&amp;preload={{urlencode:{{{template page|{{FULLPAGENAME}}}}}}}&amp;summary={{urlencode:Create sandbox version of [[{{{template page|{{FULLPAGENAME}}}}}]]}} }} {{Documentation/getText|mirror}}])&lt;/small&gt;}}|{{{testcases| {{FULLPAGENAME}}/testcases }}}|{{#ifexist: {{{testcases| {{FULLPAGENAME}}/testcases }}}|&lt;small style="font-style: normal"&gt;([{{fullurl: {{{testcases| {{FULLPAGENAME}}/testcases }}} | action=edit }} {{Documentation/getText|edit}}])&lt;/small&gt;|&lt;small style="font-style: normal"&gt;([{{fullurl: {{{testcases| {{FULLPAGENAME}}/testcases }}} | action=edit&amp;preload=Template:Documentation/preload-{{#ifeq: {{SUBJECTSPACE}}|{{ns:Module}}|module-}}testcases }} {{Documentation/getText|create}}])&lt;/small&gt;}}}}&lt;br /&gt;
      | {{ns:User}}
      | {{ns:Template}} = {{Documentation/getText|experiment template|{{{sandbox| {{FULLPAGENAME}}/sandbox }}}|{{#ifexist:{{{sandbox| {{FULLPAGENAME}}/sandbox }}}|&lt;small style{{=}}"font-style: normal"&gt;([{{fullurl: {{{sandbox| {{FULLPAGENAME}}/sandbox }}} | action{{=}}edit }} {{Documentation/getText|edit}}] &amp;#124; [{{fullurl:Special:ComparePages | page1{{=}}{{urlencode:{{{template page|{{FULLPAGENAME}}}}}}}&amp;page2{{=}}{{urlencode:{{{sandbox|{{FULLPAGENAME}}/sandbox}}}}}}} {{Documentation/getText|diff}}])&lt;/small&gt;|&lt;small style="font-style: normal"&gt;([{{fullurl: {{{sandbox| {{FULLPAGENAME}}/sandbox }}} | action=edit&amp;preload=Template:Documentation/preload-{{#ifeq: {{SUBJECTSPACE}}|{{ns:Module}}|module-}}sandbox }} {{Documentation/getText|create}}] &amp;#124; [{{fullurl: {{{sandbox| {{FULLPAGENAME}}/sandbox }}} | action=edit&amp;preload={{urlencode:{{{template page|{{FULLPAGENAME}}}}}}}&amp;summary={{urlencode:Create sandbox version of [[{{{template page|{{FULLPAGENAME}}}}}]]}} }} {{Documentation/getText|mirror}}])&lt;/small&gt;}}|{{{testcases| {{FULLPAGENAME}}/testcases }}}|{{#ifexist: {{{testcases| {{FULLPAGENAME}}/testcases }}}|&lt;small style="font-style: normal"&gt;([{{fullurl: {{{testcases| {{FULLPAGENAME}}/testcases }}} | action=edit }} {{Documentation/getText|edit}}])&lt;/small&gt;|&lt;small style="font-style: normal"&gt;([{{fullurl: {{{testcases| {{FULLPAGENAME}}/testcases }}} | action=edit&amp;preload=Template:Documentation/preload-{{#ifeq: {{SUBJECTSPACE}}|{{ns:Module}}|module-}}testcases }} {{Documentation/getText|create}}])&lt;/small&gt;}}}}&lt;br /&gt;
      }}&lt;!--
        Show the cats text, but not 
        if "content" fed or "docname fed" since then it is 
        unclear where to add the cats.
   --&gt;{{#if: {{{content|}}} {{{docname fed|}}}
      | 
      | {{Documentation/getText|categories|{{{docpage|{{FULLPAGENAME}}/doc}}}}}
      }}&lt;!--
        Show the "Subpages" link:
   --&gt;{{#switch: {{SUBJECTSPACE}}
      | {{ns:File}}     = &lt;!--Don't show it--&gt;
      | {{ns:Module}}   = &amp;#32;{{Documentation/getText|subpages module|Special:PrefixIndex/{{{template page|{{FULLPAGENAME}}}}}/}}
      | {{ns:Template}} = &amp;#32;{{Documentation/getText|subpages template|Special:PrefixIndex/{{{template page|{{FULLPAGENAME}}}}}/}}
      | #default        = &amp;#32;{{Documentation/getText|subpages page|Special:PrefixIndex/{{{template page|{{FULLPAGENAME}}}}}/}}
      }}
    }}{{#ifexist:{{FULLPAGENAME}}/Print
     |&lt;br /&gt;{{Documentation/getText|print|{{FULLPAGENAME}}/Print}}[[Category:Templates with print versions]]
     }}
  }}
 }}&lt;!--End link box--&gt;&lt;!--
  Detect and report strange usage:
 --&gt;{{#if:
  &lt;!--Check if {{documentation}} is transcluded 
      on a /doc or /testcases page--&gt;
  {{#switch: {{SUBPAGENAME}}
  | doc
  | testcases = strange
  }}
  &lt;!--More checks can be added here, just return anything
      to make the surrounding if-case trigger--&gt;
| &lt;includeonly&gt;[[Category:Wikipedia pages with strange ((documentation)) usage|{{main other|Main:}}{{FULLPAGENAME}}]]&lt;!-- Sort on namespace --&gt;&lt;/includeonly&gt;
}}</text>
      <sha1>p4tnvgzznbat8imvx15nr4mcwronv7p</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Documentation/docspace</title>
    <ns>10</ns>
    <id>8548</id>
    <revision>
      <id>73104486</id>
      <parentid>44744555</parentid>
      <timestamp>2013-09-28T14:42:20Z</timestamp>
      <contributor>
        <username>Multichill</username>
        <id>72353</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Documentation/docspace]]": Widely used template ([Edit=Allow only autoconfirmed users] (indefinite) [Move=Allow only autoconfirmed users] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="329" xml:space="preserve">{{#switch: {{SUBJECTSPACE}}
  | {{ns:0}}
  | {{ns:File}}
  | {{ns:MediaWiki}}
  | {{ns:Category}} = {{TALKSPACE}}
  | #default = {{SUBJECTSPACE}}
}}&lt;noinclude&gt;
{{documentation|content=
This subtemplate of {{tl|documentation}} is used to determine the namespace of the documentation page.
}}
[[Category:Subtemplates]]
&lt;/noinclude&gt;</text>
      <sha1>7z46vxtkwxmy6h9ie0sr89cir148tjt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Documentation</title>
    <ns>10</ns>
    <id>8327</id>
    <revision>
      <id>1340913762</id>
      <parentid>1331516532</parentid>
      <timestamp>2021-01-14T13:54:56Z</timestamp>
      <contributor>
        <username>Sannita</username>
        <id>3223</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:en:Template:Documentation]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2646" xml:space="preserve">&lt;!--
  Automatically add {{template sandbox notice}} when on a /sandbox page.
--&gt;{{#ifeq: {{SUBPAGENAME}} | sandbox
| &lt;div style="clear: both;"&gt;&lt;/div&gt;{{template sandbox notice|{{{livepage|}}}}}
}}&lt;!--
  Automatically add {{pp-template}} to protected templates.
--&gt;{{template other
| {{#ifeq: {{PROTECTIONLEVEL:move}} | sysop
  | {{pp-template|docusage=yes}}
  | {{#if: {{PROTECTIONLEVEL:edit}}
    | {{pp-template|docusage=yes}}
    | &lt;!--Not protected, or only semi-move-protected--&gt;
    }}
  }}
}}&lt;!--
  Start of green doc box.
--&gt;{{documentation/start box2
| preload = {{{preload|}}}   &lt;!--Allow custom preloads--&gt;
| heading = {{{heading|¬}}}   &lt;!--Empty but defined means no header--&gt;
| heading-style = {{{heading-style|}}}
| content = {{{content|}}}

&lt;!--Some namespaces must have the /doc, /sandbox and /testcases 
    in talk space--&gt;
| docspace = {{documentation/docspace}}

| 1 = {{{1|}}}   &lt;!--Other docname, if fed--&gt;

&lt;!--The namespace is added in /start box2--&gt;
| template page = {{documentation/template page}}

}}&lt;!-- Start content --&gt;&lt;!--
  Start load the /doc content:
  Note: The line breaks between this comment and the next line are necessary
  so  "=== Headings ===" at the start and end of docs are interpreted.
--&gt;
{{#switch: {{#if:{{{content|}}}|1|0}}{{#if:{{{1|}}}|1|0}}{{#ifexist:{{{1|}}}|1|0}}{{#ifexist:{{documentation/docspace}}:{{documentation/template page}}/doc|1|0}}
| 1000 | 1001 | 1010 | 1011 | 1100 | 1101 | 1110 
| 1111 = {{{content|}}}
| 0110 | 0111 = {{ {{{1}}} }}
| 0001 | 0011 = {{ {{documentation/docspace}}:{{documentation/template page}}/doc }}
| 0000 | 0100 | 0010 | 0101 = 
}}
&lt;!--
  End load the /doc content:
  Note: The line breaks between this comment and the previous line are necessary
  so  "=== Headings ===" at the start and end of docs are interpreted.
--&gt;{{documentation/end box2
| preload = {{{preload|}}}   &lt;!--Allow custom preloads--&gt;
| content = {{{content|}}}
| link box = {{{link box|}}}   &lt;!--So "link box=off" works--&gt;

&lt;!--Some namespaces must have the /doc, /sandbox and /testcases 
    in talk space--&gt;
| docspace = {{documentation/docspace}}

| 1 = {{{1|}}}   &lt;!--Other docname, if fed--&gt;

&lt;!--The namespace is added in /end box2--&gt;
| template page = {{documentation/template page}}

}}&lt;!--
  End of green doc box
--&gt;&lt;includeonly&gt;{{#ifexist:{{#titleparts:{{FULLPAGENAME}}|1}}/doc
|
|[[Category:Templates without documentation]]
}}&lt;/includeonly&gt;&lt;!--
  Maintenance category for templates containing the documentation template
  but without having an associated documentation page
--&gt;&lt;noinclude&gt;

&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>fz19eucp0qtklqw65pjsz25nbr3jx26</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Wikibase</title>
    <ns>828</ns>
    <id>13447179</id>
    <revision>
      <id>647174583</id>
      <parentid>647174580</parentid>
      <timestamp>2018-03-10T10:01:16Z</timestamp>
      <contributor>
        <username>Mbch331</username>
        <id>69441</id>
      </contributor>
      <minor/>
      <comment>12 revisions imported from [[:en:Module:Wikibase]]: https://www.wikidata.org/w/index.php?title=Wikidata:Administrators%27_noticeboard&amp;oldid=647164909#Request_to_import_template:Cite_Q_from_ENWP</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="2217" xml:space="preserve">---------- Module:Wikibase ----------------
local p = {}

-- Return the item ID of the item linked to the current page.
function p.id(frame)
	if not mw.wikibase then
		return "no mw.wikibase"
	end
	entity = mw.wikibase.getEntityObject()

	if entity == nil then
		return "no entity"
	end
	return entity.id
end

-- Return the WD entity URL of a given data item, or of connected page
-- if no argument is provided to this method.
function p.wdurl(frame)
	if frame.args[1] == nil then
		entity = mw.wikibase.getEntityObject()
		if not entity then return nil end
		id = entity.id
	else
		id = mw.text.trim(frame.args[1])
	end
	return mw.wikibase.getEntityUrl( id )
end

-- Return the label of a given data item, or of connected page
-- if no argument is provided to this method.
function p.label(frame)
	if frame.args[1] == nil then
		entity = mw.wikibase.getEntityObject()
		if not entity then return nil end
		id = entity.id
	else
		id = mw.text.trim(frame.args[1])
	end
	return mw.wikibase.label( id )
end

-- Return the description of a given data item, or of connected page
-- if no argument is provided to this method.
function p.description(frame)
	if frame.args[1] == nil then
		entity = mw.wikibase.getEntityObject()
		if not entity then return nil end
		id = entity.id
	else
		id = mw.text.trim(frame.args[1])
	end
	return mw.wikibase.description( id )
end

-- Return the local page about a given data item, or of connected page
-- if id is not specified.
function p.page(frame)
	if frame.args[1] == nil then
		entity = mw.wikibase.getEntityObject()
		if not entity then return nil end
		id = entity.id
	else
		id = mw.text.trim(frame.args[1])
	end
	return mw.wikibase.sitelink( id )
end

-- Return the data type of a property
function p.datatype(frame)
	if frame.args[1] and string.find(frame.args[1], "Property:P") then
		if mw.wikibase.getEntityObject(string.gsub(frame.args[1], "Property:P", "P"))  then
			return mw.wikibase.getEntityObject(string.gsub(frame.args[1], "Property:P", "P") ).datatype
		end
	elseif frame.args[1] and string.find(frame.args[1], "P") then
		if mw.wikibase.getEntityObject(frame.args[1])  then
			return mw.wikibase.getEntityObject(frame.args[1]).datatype
		end
	end
end

return p</text>
      <sha1>buf4vx3s2fry34cykaxsjqinv9a86rl</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Wikidata</title>
    <ns>828</ns>
    <id>19151369</id>
    <revision>
      <id>1301005918</id>
      <parentid>1301005476</parentid>
      <timestamp>2020-11-01T13:40:33Z</timestamp>
      <contributor>
        <username>Mahir256</username>
        <id>203574</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Wikidata]]": frequently used module across Wikidata ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="27205" xml:space="preserve">--script that retrieves basic data stored in Wikidata, for the datamodel, see https://www.mediawiki.org/wiki/Extension:Wikibase_Client/Lua

local p = {}

local linguistic = require('Module:Linguistic')
--local formatDate = require('Module:Complex date') only loaded when needed to save memory in large pages like Wikidata:List of properties/all
local fb = require('Module:Fallback')
local i18nmessages = mw.loadData('Module:i18n/wikidata')

-- Wiki-specific parameters
local defaultlang = mw.getCurrentFrame():preprocess("{{int:lang}}")
local defaultlink = 'wikidata'

local function i18n(str)
	local message = i18nmessages[str]
	if type(message) == 'string' then
		return message
	end
	return fb._langSwitch(message, defaultlang) .. ''
end

local function formatError( key, text )
	return error(i18n(key) .. (text or ''))
end

local function addTrackingCat(prop, cat)
	if not prop and not cat then
		return error("no property provided")
	end
	if not cat then
		cat = i18nmessages.trackingcat .. '/' .. string.upper(prop)
	end
	return '[[Category:' .. cat .. ']]'
end

local function removeBlanks(args)
	for i, j in pairs(args) do -- does not work ??
		if (j == '') or (j == '-') then args[i] = nil end
	end
	return args
end

local function formatTheUnknown() -- voir si on peut accorder/adapter l'usage de "inconnu"
	return i18n('somevalue')
end

local function isSpecial(snak)
	return snak.snaktype ~= 'value'
end

local function sameValue(snak, target)
	return not isSpecial(snak) and p.getRawvalue(snak) == target
end

local function showLang(statement, str) -- TODO (not yet in proper format)
	--adds a lang indication at the start of the string, based on data in statement
	local mainsnak = statement.mainsnak
	if isSpecial(mainsnak) then
		return str
	end

	local langlist = {}
	if mainsnak.datavalue.type == 'monolingualtext' then
		langlist = {mainsnak.datavalue.value.language}
	elseif statement.qualifiers and statement.qualifiers.P407 then
		local convertlangcode = mw.loadData('Module:Dictionary/lang codes')
		for i, j in pairs( statement.qualifiers.P407 ) do
			if not isSpecial(j) then
				local val = convertlangcode[j.datavalue.value['numeric-id']]
				table.insert(langlist, val)
			end
		end
	end
	if #langlist == 0 then
		return str
	else
		return '(' .. table.concat(langlist) .. ')' .. str
	end
end

function p.getEntity( val )
	if type(val) == 'table' then
		return val
	end
	return mw.wikibase.getEntityObject(val)
end

-- DATE FUNCTIONS
local function splitTimestamp(timestamp, calendar)
	local pattern = "(%W)(%d+)%-(%d+)%-(%d+)"
	local era, year, month, day = timestamp:match(pattern)

	if calendar == 'julian' then
	--todo  year, month, day = formatdate.gregorianToJulian( era .. year, month, day )
	end

	return {day = day, month = month, year = year, era = era, timestamp = timestamp, type = 'dateobject'}
end

local function rangeObject(begin, ending)
	local timestamp
	if begin then
		timestamp = begin.timestamp
	elseif ending then
		timestamp = ending.timestamp
	end
	return {begin = begin, ending = ending, timestamp = timestamp, type = 'rangeobject'}
end

local function dateObject(orig, params) -- transforme un snak en un nouvel objet utilisable par Module:Date complexe
	if not params then
		params = {}
	end

	local newobj = splitTimestamp(orig.time, orig.calendar) -- initalise l'object en mettant la valeur des dates

	newobj.precision = params.precision or orig.precision
	newobj.type = 'dateobject'
	return newobj
end

local function formatDatepoint(obj, params) -- TO IMPROVE
	if not obj then
		return nil
	end
	local formatDate = require('Module:Complex date')
	local lang = params.lang or defaultlang
	local precision = math.min(obj.precision, params.precision or 15) -- if we don't want to show the value to its full detail
	if precision &gt;= 11 then
		return formatDate.complex_date{args={date1 = obj.year .. '-' .. obj.month .. '-' .. obj.day, lang= lang}}
	elseif precision == 10 then
		return formatDate.complex_date{args={date1 = obj.year .. '-' .. obj.month, lang= lang}}
	elseif precision == 9 then
		return formatDate.complex_date{args={date1 = tostring(obj.year), lang= lang}}
	elseif precision == 8 then
		return formatDate.complex_date{args={date1 = string.sub(tostring(obj.year), 1, 3) .. '0', lang = lang, precision = 'decade'}}
	elseif precision == 7 then
		return formatDate.complex_date{args={date1 = string.sub(tostring(obj.year + 100), 1, 2), lang = lang, precision = 'century'}}
	end
	return nil
end

local function formatDaterange(obj, params) --TODO
	local begin = formatDatepoint(obj.begin, params) or ''
	local ending = formatDatepoint(obj.ending, params) or ''
	return begin .. '-' .. ending
end

local function objectToText(obj, params)
	if obj.type == 'dateobject' then
		return formatDatepoint(obj, params)
	elseif obj.type == 'rangeobject' then
		return formatDaterange(obj, params)
	end
	return nil
end

local function tableToText(values, params) -- takes a list of already formatted values and make them a text
	if not values or #values == 0 then
		return nil
	end
	return linguistic.conj(values, params.lang or defaultlang, params.conjtype)--linguistic.conj( values, params.lang, params.conjtype )
end

function p.getDate(obj)
--[[
returns an object containing a timestamp for easy sorting, and other data
	possible types of object:
		dateobject
			{timestamp = string, year = number, month = number, day = number, calendar = string}
		rangeobject
			{timestamp = string, begin = dateobject, ending = dateobject}
]]--
	if not obj then
		return nil
	end
	if type(obj) == 'string' then
		obj = p.getEntity(obj)
	end

	-- if obj is a statement with date, get it
	if obj.mainsnak and not isSpecial(obj.mainsnak) and obj.mainsnak.datatype == 'time' then
		return dateObject(obj.mainsnak.datavalue.value)
	end

	-- else preload relevant data
	local qualifs = obj.qualifiers -- when obj is a statement, look in qualifiers
	local claims = obj.claims -- when obj is an item, look in claims

	local pointprop = {'P585', 'P571'} -- dates corresponding to a punctual fact
	local beginprop = {'P580', 'P569'} -- start date, birth date == start of a date range
	local endingprop = {'P582', 'P570'}

	local function getval(prop)
		local val
		if claims and claims[prop] and not isSpecial(claims[prop][1].mainsnak) then
			val = claims[prop][1].mainsnak.datavalue.value
		elseif qualifs and qualifs[prop] and not isSpecial(qualifs[prop][1]) then
			val = qualifs[prop][1].datavalue.value
		end
		if val then
			return dateObject(val)
		end
		return nil
	end

	for i, prop in pairs(pointprop) do
		local val = getval(prop)
		if val then return val end
	end
	--if no date has not been found, look for startdate or enddate
	local begin, ending
	for i, prop in pairs(beginprop) do
		begin = getval(prop)
		if begin then
			break
		end
	end
	for i, prop in pairs(endingprop) do
		ending = getval(prop)
		if ending then
			break
		end
	end
	if begin or ending then
		return rangeObject(begin, ending)
	end
	return nil
end

function p.getFormattedDate(statement, params)
	local datetable = p.getDate(statement)
	if not datetable then
		return nil
	end
	return objectToText(datetable, params)
end

local function hasTargetValue(claim, target)
	if target == nil then
		return true
	end
	return sameValue(claim.mainsnak, target)
end

local function hasRank(claim, target)
	if target == 'valid' then
		return hasRank(claim, 'preferred') or hasRank(claim, 'normal')
	else
		return claim.rank == target
	end
end

local function bestRanked(claims)
	if not claims then
		return nil
	end
	local preferred, normal = {}, {}
	for _, j in ipairs(claims) do
		if j.rank == 'preferred' then
			table.insert(preferred, j)
		elseif j.rank == 'normal' then
			table.insert(normal, j)
		end
	end
	if #preferred &gt; 0 then
		return preferred
	else
		return normal
	end
end

local function hasQualifier(claim, qualifier, qualifiervalues)
	if not qualifier then -- si aucun qualificatif est demandé, ça passe
		return true
	end

	qualifier = string.upper(qualifier)
	if not claim.qualifiers or not claim.qualifiers[qualifier] then
		return false
	end

	if type(qualifiervalues) == 'string' then
		qualifiervalues = mw.text.split(qualifiervalues, ',')
	end

	if (not qualifiervalues) or (qualifiervalues == {}) then
		return true -- si aucune valeur spécifique n'est exigée
	end

	for _, j in ipairs(claim.qualifiers[qualifier]) do
		for _, l in ipairs(qualifiervalues) do
			if p.sameValue(j, l) then
				return true
			end
		end
	end
	return false
 end

local function hasSource(statement, source, sourceproperty)
	if not statement.references then
		return false
	end
	sourceproperty = string.upper(sourceproperty or 'P248')
	local sourcevalue = string.upper(source or '')
	for _, ref in ipairs(statement.references) do
		for prop, content in pairs(ref.snaks) do
			if prop == sourceproperty then
				if sourcevalue == '' then
					return true
				else
					for _, k in ipairs(content) do
						if sameValue(k, source) then
							return true
						end
					end
				end
			end
		end
	end
	return false
end

local function hasDate(statement)
	if not statement.qualifiers then
		return false
	end
	local dateprops = {'P580', 'P585', 'P582'}
	for i, prop in pairs(dateprops) do
		if statement.qualifiers[prop] then
			return true
		end
	end
	return false
end

local function isInLanguage(snak, lang) -- ne fonctionne que pour les monolingualtext / étendre aux autres types en utilisant les qualifiers ?
	return not isSpecial(snak) and snak.datavalue.type == 'monolingualtext' and snak.datavalue.value.language == lang
end

local function numval(claims, numval) -- retourn les numval premières valeurs de la table claims
	local numval = tonumber(numval) or 0 -- raise an error if numval is not a positive integer ?
	if #claims &lt;= numval then
		return claims
	end
	local newclaims = {}
	while #newclaims &lt; numval do
		table.insert(newclaims, claims[#newclaims + 1])
	end
	return newclaims
end

local function wikipediaLink(entity, lang)
	local link
	if type(entity) == 'table' then
		link = entity:getSitelink(lang .. 'wiki')
	else
		link = mw.wikibase.getSitelink(entity, lang .. 'wiki')
	end
	if link then
		return ':' .. lang .. ':' .. link
	end
	return nil
end

local function getLink(entity, typelink, lang)
	if typelink == 'wikidata' then
		if type(entity) == 'table' then
			if entity.type == 'property' then
				return 'd:P:' .. entity.id
			elseif entity.type == 'lexeme' then
				return 'd:L:' .. entity.id
			else
				return 'd:' .. entity.id
			end
		else
			if string.sub(entity, 1, 1) == 'P' then
				return 'd:P:' .. entity
			elseif string.sub(entity, 1, 1) == 'L' then
				return 'd:L:' .. entity
			else
				return 'd:' .. entity
			end
		end

	elseif typelink == 'wikipedia' then
		return wikipediaLink(entity, lang or defaultlang)

	elseif typelink == 'anywikipedia' then
		for _, lg in ipairs(fb.fblist(lang or defaultlang, true)) do
			local link = wikipediaLink(entity, lg)
			if link then
				return link
			end
		end
	end
	return nil
end

function p.comparedate(a, b) -- returns true if a is earlier than B or if a has a date but not b
	if a and b then
		return a.timestamp &lt; b.timestamp
	elseif a then
		return true
	end
	return false
end

function p.chronosort(objs, inverted)
	table.sort(objs, function(a, b)
		local timeA = p.getDate(a)
		local timeB = p.getDate(b)
		if inverted then
			return p.comparedate(timeB, timeA)
		else
			return p.comparedate(timeA, timeB)
		end
	end)

	return objs
end

function p.sortclaims(claims, sorttype)
	if type(sorttype) == 'function' then
		table.sort(claims, sorttype)
	elseif sorttype == 'chronological' then
		return p.chronosort(claims)
	elseif sorttype == 'inverted' then
		return p.chronosort(claims, true)
	end
	return claims
end

function p.getRawvalue(snak)
	return p.getDatavalue(snak, { displayformat = 'raw' })
end

function p.showentity(entity, lang)
	if not entity then
		return nil
	end
	local label, link, id = p._getLabel(entity, lang), getLink(entity, 'wikidata')
	if type(entity) == 'table' then
		id = entity.id
	else
		id = entity
	end
	return '[[' .. link .. '|' .. label .. ']] &lt;small&gt;(' .. id .. ')&lt;/small&gt;'
end

function p.getDatavalue(snak, params)
	if isSpecial(snak) then
		return nil
	end

	if not params then
		params = {}
	end

	local displayformat = params.displayformat
	local valuetype = snak.datavalue.type
	local value = snak.datavalue.value

	if valuetype == 'wikibase-entityid' then
		if type(displayformat) == 'function' then
			return displayformat(snak, params)
		end
		local id = snak.datavalue.value.id
		if displayformat == 'raw' then
			return id
		elseif displayformat == 'wikidatastyle' then
			return p.showentity(id, params.lang)
		else
			return p.formatEntity(id, params)
		end

	elseif valuetype == 'string' then
		local showntext = params.showntext
		if displayformat == 'weblink' then
			if showntext then
				return '[' .. value .. ' ' .. showntext .. ']'
			else
				return value
			end
		end
		if ({['math'] = 1, ['musical-notation'] = 1})[snak.datatype] == 1 and displayformat ~= 'raw' then
			value = mw.wikibase.formatValue(snak)
		else
			if params.urlpattern then
				showntext = mw.text.nowiki(showntext or value)
				value = mw.ustring.gsub(value, '%%', '%%%%') -- escape '%'
				value = '[' .. mw.ustring.gsub(mw.ustring.gsub(params.urlpattern, '$1', value), ' ', '%%20') .. ' ' .. showntext .. ']'
			elseif params.pattern then
				local pattern = mw.ustring.gsub(params.pattern, '%%', '%%%%')
				value = mw.ustring.gsub(value, '%%', '%%%%')
				value = mw.ustring.gsub(pattern, '$1', value)
			else
				if displayformat ~= 'raw' then
					value = mw.text.nowiki(value)
				end
			end
		end
		return value

	elseif valuetype == 'time' then -- format example: +00000001809-02-12T00:00:00Z
		if displayformat == 'raw' then
			return value.time
		else
			return objectToText(dateObject(value), params)
		end

	elseif valuetype == 'globecoordinate' then
		-- retourne une table avec clés latitude, longitude, précision et globe à formater par un autre module (à changer ?)
		if displayformat == 'latitude' then
			return value.latitude
		elseif displayformat == 'longitude' then
			return value.longitude
		elseif displayformat == 'qualifier' then
			local coord = require 'Module:Coordinates'
			value.globe = mw.loadData('Module:Wikidata/Globes')[value.globe]
			value.precision = nil
			return coord._coord(value)
		else
			value.globe = mw.loadData('Module:Wikidata/Globes')[value.globe] -- transforme l'ID du globe en nom anglais utilisable par geohack
			return value -- note : les coordonnées Wikidata peuvent être utilisée depuis Module:Coordinates. Faut-il aussi autoriser à appeler Module:Coordiantes ici ?
		end

	elseif valuetype == 'quantity' then -- todo : gérer les paramètre précision
		if displayformat == 'raw' then
			return tonumber(value.amount)
		else
			local formatNum = require 'Module:Formatnum'
			local number = formatNum.formatNum(value.amount, params.lang)
			local unit = mw.ustring.match(value.unit, '(Q%d+)')
			if unit then
				number = number .. '&amp;nbsp;' .. p.formatEntity(unit, params)
			end
			return number
		end
	elseif valuetype == 'monolingualtext' then
		return '&lt;span lang="' .. value.language .. '"&gt;' .. value.text .. '&lt;/span&gt;'
	else
		return formatError( 'unknown-datavalue-type', valuetype )
	end
end

local function getMultipleClaims(args)
	local newargs = args
	local claims = {}
	for i, j in pairs(args.property) do
		newargs.property = j
		local newclaims = p.getClaims(args)
		if newclaims then
			for k, l in pairs(newclaims) do
				table.insert(claims, l)
			end
		end
	end
	return claims
end

function p.getClaims( args ) -- returns a table of the claims matching some conditions given in args
	args = removeBlanks(args)
	if not args.property then
		return formatError( 'property-param-not-provided' )
	end
	if type(args.property) == 'table' then
		return getMultipleClaims(args)
	end
	--Get entity
	if args.item then -- synonyms
		args.entity = args.item
	end
	local property = string.upper(args.property)
	local allClaims
	local entity = args.entity
	if type(entity) == 'table' then
		allClaims = (entity and entity.claims and entity.claims[property]) or {}
	else
		allClaims = mw.wikibase.getAllStatements(entity, property)
	end
	if #allClaims == 0 then
		return nil
	end

	if not args.rank then
		args.rank = 'best'
	end
	local claims = {}
	for _, statement in ipairs(allClaims) do
		if
			(
			not args.excludespecial
			or
			not (isSpecial(statement.mainsnak))
		)
		and
		(
			not args.targetvalue
			or
			hasTargetValue(statement, args.targetvalue)
		)
		and
		(
			not args.qualifier
			or
			hasQualifier(statement, args.qualifier, args.qualifiervalues or args.qualifiervalue)
		)
		and
		(
			not args.withsource or args.withsource == '-'
			or
			hasSource(statement, args.withsource, args.sourceproperty)
		)
		and
		(
			not args.isinlanguage
			or
			isInLanguage(statement.mainsnak, args.isinlanguage)
		)
		and
		(
			args.rank == 'best' -- rank == best est traité à a fin
			or
			hasRank(statement, args.rank)
		)
		then
			table.insert(claims, statement)
		end
	end
	if #claims == 0 then
		return nil
	end
	if args.rank == 'best' then
		claims = bestRanked(claims)
	end
	if args.sorttype then
		claims = p.sortclaims(claims, args.sorttype)
	end

	if args.numval then
		return numval(claims, args.numval)
	end
	return claims
end

function p.formatClaimList(claims, args)
	if not claims then
		return nil
	end
	for i, j in pairs(claims) do
		claims[i] = p.formatStatement(j, args)
	end
	return claims
end

function p.stringTable(args) -- like getClaims, but get a list of string rather than a list of snaks, for easier manipulation
	local claims = p.getClaims(args)
	return p.formatClaimList(claims, args)
end

local function getQualifiers(statement, qualifs, params)
	if not statement.qualifiers then
		return nil
	end
	local vals = {}
	for i, j in pairs(qualifs) do
		j = string.upper(j)
		if statement.qualifiers[j] then
			local inserted = false
			if statement.qualifiers[j][1].datatype == 'monolingualtext' then
				local in_preferred_lang
				for _, language in ipairs(fb.fblist(params.lang or defaultlang, true)) do
					for _, snak in ipairs(statement.qualifiers[j]) do
						if isInLanguage(snak, language) then
							in_preferred_lang = snak
							break
						end
					end
					if in_preferred_lang then
						break
					end
				end
				if in_preferred_lang then
					table.insert(vals, in_preferred_lang)
					inserted = true
				end
			end
			if not inserted then
				for _, snak in pairs(statement.qualifiers[j]) do
					table.insert(vals, snak)
				end
			end
		end
	end
	if #vals == 0 then
		return nil
	end
	return vals
end

function p.getFormattedQualifiers(statement, qualifs, params)
	if not params then params = {} end
	local qualiftable = getQualifiers(statement, qualifs, params)
	if not qualiftable then
		return nil
	end
	for i, j in pairs(qualiftable) do
		local params = params
		if j.datatype == 'globe-coordinate' then
			params.displayformat = 'qualifier'
		end
		qualiftable[i] = p.formatSnak(j, params)
	end
	return linguistic.conj(qualiftable, params.lang or defaultlang, params.conjtype)
end

function p.formatStatement( statement, args )
	if not statement.type or statement.type ~= 'statement' then
		return formatError( 'unknown-claim-type', statement.type )
	end
	if not args then args = {} end
	local lang = args.lang or defaultlang
	local str = p.formatSnak( statement.mainsnak, args )
	if args.showlang == true then
		str = showLang(statement, str)
	end

	local qualifs = args.showqualifiers
	if qualifs then
		if type(qualifs) == 'string' then
			qualifs = mw.text.split(qualifs, ',')
		end
		local foundvalues = p.getFormattedQualifiers(statement, qualifs, args)
		if foundvalues then
			if args.delimiter then
				str = str .. args.delimiter .. foundvalues
			else
				str = str .. linguistic.inparentheses(foundvalues, lang)
			end
		end
	end

	if args.showdate then -- when "showdate and p.chronosort are both set, date retrieval is performed twice
		local timedata = p.getDate(statement)
		if timedata then
			local formatteddate = objectToText(timedata, args)
			formatteddate = linguistic.inparentheses(formatteddate, lang)
			str = str .. '&lt;small&gt;' .. formatteddate ..'&lt;/small&gt;'
		end
	end

	if args.showsource and statement.references then
		local cite = require 'Module:Cite'
		local frame = mw.getCurrentFrame()
		local sourcestring = ''
		local s
		for _, ref in ipairs(statement.references) do
			if ref.snaks.P248 then
				for j, source in pairs(ref.snaks.P248) do
					if not isSpecial(source) then
						local page
						if ref.snaks.P304 and not isSpecial(ref.snaks.P304[1]) then
							page = ref.snaks.P304[1].datavalue.value
						end
						s = cite.citeitem(source.datavalue.value.id, lang, page)
						s = frame:extensionTag( 'ref', s )
						sourcestring = sourcestring .. s
					end
				end
			elseif ref.snaks.P854 and not isSpecial(ref.snaks.P854[1]) then
				s = frame:extensionTag( 'ref', p.getDatavalue(ref.snaks.P854[1]) )
				sourcestring = sourcestring .. s
			end
		end
		str = str .. sourcestring
	end
	return str
end

function p.getmainid(claim)
	if claim and not isSpecial(claim.mainsnak) then
		return claim.mainsnak.datavalue.value.id
	end
	return nil
end

function p.formatSnak(snak, params)
	--local params = params or {} pour faciliter l'appel depuis d'autres modules
	if snak.snaktype == 'value' then
		return p.getDatavalue(snak, params)
	elseif snak.snaktype == 'somevalue' then
		return formatTheUnknown()
	elseif snak.snaktype == 'novalue' then
		return i18n('novalue') --todo
	else
		return formatError( 'unknown-snak-type', snak.snaktype )
	end
end

local function defaultLabel(entity, displayformat) -- label when no label is available
	if displayformat == 'id' then
		if type(entity) ~= 'table' then
			return entity
		else
			return entity.id
		end
	end
	return i18n('no-label')
end

function p._getLabel(entity, lang, default, fallback)
	if not entity then
		return nil
	end
	if not lang then
		lang = defaultlang
	end
	if type(entity) ~= 'table' and lang == defaultlang then
		local label, lg = mw.wikibase.getLabelWithLang(entity)
		if label and (fallback ~= '-' or lg == lang) then
			return label
		end
	else
		entity = p.getEntity(entity)
		if entity and entity.labels then
			if fallback ~= '-' then
				for _, lg in ipairs(fb.fblist(lang, true)) do
					if entity.labels[lg] then
						return entity.labels[lg].value
					end
				end
			else
				if entity.labels[lang] then
					return entity.labels[lang].value
				end
			end
		end
	end
	return defaultLabel(entity, default)
end

function p._getDescription(entity, lang, fallback)
	if not entity then
		return i18n('no description')
	end
	if not lang then
		lang = defaultlang
	end
	if type(entity) ~= 'table' and lang == defaultlang then
		local description, lg = mw.wikibase.getDescriptionWithLang(entity)
		if description and (fallback ~= '-' or lg == lang) then
			return description
		end
	else
		entity = p.getEntity(entity)
		if entity and entity.descriptions then
			if fallback ~= '-' then
				for _, lg in ipairs(fb.fblist(lang, true)) do
					if entity.descriptions[lg] then
						return entity.descriptions[lg].value
					end
				end
			else
				if entity.descriptions[lang] then
					return entity.descriptions[lang].value
				end
			end
		end
	end
	return i18n('no description')
end

local function formattedLabel(label, entity, args)
	local link = getLink(entity, args.link, args.lang)
	if not link then
		link = getLink(entity, defaultlink, args.lang)
	end
	if not link then
		return label
	else
		return '[[' .. link .. '|' .. label .. ']]'
	end
end

function p.formatEntity( entity, args )
	if not entity then
		return nil
	end
	if not args then
		args = {}
	end
	local label = p._getLabel(entity, args.lang, 'id', args.fallback)
	return formattedLabel(label, entity, args)
end

function p.getLabel(frame) -- simple for simple templates like {{Q|}}}
	local args = frame.args
	local entity = args.entity
	local lang = args.lang
	if not entity then
		return i18n('invalid-id')
	end

	if string.sub(entity, 1, 10) == 'Property:P' then
		entity = string.sub(entity, 10)
	elseif string.sub(entity, 1, 8) == 'Lexeme:L' then
		entity = string.sub(entity, 8)
	elseif not ({L = 1, P = 1, Q = 1})[string.sub(entity, 1, 1)] or not tonumber(string.sub(entity, 2)) then
		return i18n('invalid-id')
	end

	if not args.link or args.link == '' or args.link == '-' then -- by default: no link
		if lang == '' then
			lang = defaultlang
		end
		return p._getLabel(entity, lang, args.default, args.fallback)
	else
		return p.formatEntity(entity, args)
	end
end

function p._formatStatements( args )--Format statements and concat them cleanly
	if args.value == '-' then
		return nil
	end
	--If a value is already set, use it
	if args.value and args.value ~= '' then
		return args.value
	end
	local valuetable = p.stringTable(args)
	return tableToText(valuetable, args)
end

function p.showQualifier( args )
	local qualifs = args.qualifiers or args.qualifier
	if type(qualifs) == 'string' then
		qualifs = mw.text.split(qualifs, ',')
	end
	if not qualifs then
		return formatError( 'property-param-not-provided' )
	end
	local claims = p.getClaims(args)
	if not claims then
		return nil
	end
	local str = ''
	local new
	for _, cl in ipairs(claims) do
		new = p.getFormattedQualifiers(cl, qualifs, args) or ''
		str = str .. new
	end
	return str
end

function p._formatAndCat(args)
	local val = p._formatStatements(args)
	if val then
		return val .. addTrackingCat(args.property)
	end
	return nil
end

function p.getTheDate(args)
	local claims = p.getClaims(args)
	if not claims then
		return nil
	end
	local formattedvalues = {}
	for _, cl in ipairs(claims) do
		table.insert(formattedvalues, p.getFormattedDate(cl))
	end
	local val = linguistic.conj(formattedvalues)
	if val and args.addcat == true then
		return val .. addTrackingCat(args.property)
	else
		return val
	end
end
---FONCTIONS depuis le FRAME
function p.getaDate(frame)
	return p.getTheDate(frame.args)
end

function p.getQualifier(frame)
	return p.showQualifier(frame.args)
end

function p.getDescription(frame) -- simple for simple templates like {{Q|}}}
	local entity = frame.args.entity
	if not entity then
		return i18n('invalid-id')
	end
	local lang = frame.args.lang
	local fallback = frame.args.fallback

	return p._getDescription(entity, lang, fallback)
end

function p.formatStatements( args )
	return p._formatStatements( args )
end

function p.formatStatementsE(frame)
	local args = {}
	if frame == mw.getCurrentFrame() then
		args = frame:getParent().args -- paramètres du modèle appelant (est-ce vraiment une bonne idée ?)
		for k, v in pairs(frame.args) do
			args[k] = v
		end
	else
		args = frame
	end
	return p._formatStatements( args )
end

function p.formatAndCat(frame)
	local args = {}
	if frame == mw.getCurrentFrame() then
		args = frame:getParent().args -- paramètres du modèle appelant (est-ce vraiment une bonne idée ?)
		for k, v in pairs(frame.args) do
			args[k] = v
		end
	else
		args = frame
	end
	return p._formatAndCat( args )
end

function p.getEntityFromId(id)
	return p.getEntity(id)
end

return p</text>
      <sha1>41yx1e8vm06d0oiu04zmlo7xmj24k9d</sha1>
    </revision>
  </page>
  <page>
    <title>Template:P</title>
    <ns>10</ns>
    <id>14773761</id>
    <redirect title="Template:Property" />
    <revision>
      <id>73103832</id>
      <parentid>41223204</parentid>
      <timestamp>2013-09-28T14:35:39Z</timestamp>
      <contributor>
        <username>Multichill</username>
        <id>72353</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:P]]": Widely used template: Redirect so no need to edit ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="31" xml:space="preserve">#REDIRECT [[Template:Property]]</text>
      <sha1>0b65woqvkuu9l6y2njnch81hyo3ac4e</sha1>
    </revision>
  </page>
  <page>
    <title>Template:SPARQL2</title>
    <ns>10</ns>
    <id>28161690</id>
    <revision>
      <id>1391527606</id>
      <parentid>1344035758</parentid>
      <timestamp>2021-03-28T09:59:09Z</timestamp>
      <contributor>
        <username>Joseph</username>
        <id>139110</id>
      </contributor>
      <minor/>
      <comment>+tur</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6582" xml:space="preserve">{{SPARQL2/doc}}
&lt;onlyinclude&gt;{{Clear}}{{#ifeq:{{{nohints|}}}|{{{nohints}}}| &lt;!--hidden hints--&gt; | {{TranslateThis&lt;!--
       --&gt;|ar=يستخدم الاستعلام التالي هذه:&lt;!--
       --&gt;|be-tarask=Дадзены запыт выкарыстоўвае:&lt;!--
       --&gt;|de=Die Suchanfrage verwendet:&lt;!-- 
       --&gt;|en=The following query uses these:&lt;!--
       --&gt;|en-gb=The following query uses these:&lt;!--
       --&gt;|el=Το ακόλουθο ερώτημα χρησιμοποιεί αυτά:&lt;!--
       --&gt;|es=La siguiente consulta utiliza lo siguiente:&lt;!--
       --&gt;|fr=La requête suivante utilise ces :&lt;!--
       --&gt;|hu=Ez a lekérdezés a következőket használja:&lt;!-- 
       --&gt;|it=La seguente query utilizza questi:&lt;!-- 
       --&gt;|ja=以下のクエリで使用します:&lt;!--
       --&gt;|nl=Deze query gebruikt:&lt;!--
       --&gt;|pl=To zapytanie używa:&lt;!--
       --&gt;|pt=A consulta seguinte utiliza estes:&lt;!--
       --&gt;|pt-br=A consulta seguinte utiliza estes:&lt;!--
       --&gt;|ru=Этот запрос использует:&lt;!--
       --&gt;|sv=Följande fråga använder dessa:&lt;!--
       --&gt;|tr=Aşağıdaki sorgu bunları kullanıyor:&lt;!--
       --&gt;|uk=Цей запит використовує:&lt;!--
--&gt;}}&lt;!--
--&gt;{{ItemOrNot|{{Capitalize|{{int items}}}}|{{#invoke:SPARQLMentions|getItems|{{{query}}} }} }}
&lt;!--
--&gt;{{ItemOrNot|{{int Properties}}|{{#invoke:SPARQLMentions|getProperties|{{{query}}} }} }}
&lt;!--
--&gt;{{ItemOrNot|{{Capitalize|{{int features}}}}|{{#invoke:SPARQLMentions|getFunctions|{{{query}}} }} }}
&lt;!--
--&gt;}}{{#tag:syntaxhighlight|{{SPARQLText|query={{{query}}}|extraprefix={{{extraprefix|}}} }}|highlight="{{{highlight|}}}"|start="{{{start|1}}}"|{{{line|line}}}=line|lang="sparql"|style="margin:.5em; max-width: -moz-max-content;
min-width: 20em;"}}
&lt;!--
--&gt;&lt;div class="displayonly"&gt;[//query.wikidata.org/#{{urlencode: {{SPARQLText|query={{{query}}}|extraprefix={{{extraprefix|}}} }} | PATH }} {{Int try it}}]&lt;/div&gt;{{Clear}}&lt;/onlyinclude&gt;&lt;noinclude&gt;
&lt;templatedata&gt;
{
	"params": {
		"query": {
			"required": true,
			"label": {
				"ar": "استعلام",
				"be-tarask": "запыт",
				"en": "query",
				"es": "consulta",
				"fr": "requête",
				"it": "query",
				"pl": "zapytanie",
				"pt": "consulta",
				"pt-br": "consulta",
				"sv": "fråga",
                "tr": "sorgu",
				"uk": "запит"
			},
			"description": {
				"ar": "استعلام سباركل",
				"be-tarask": "запыт SPARQL",
				"en": "SPARQL query",
				"es": "consulta SPARQL",
				"fr": "la requête que le modèle doit traiter et afficher",
				"it": "query SPARQL",
				"pl": "query SPARQL",
				"pt": "consulta SPARQL",
				"pt-br": "consulta SPARQL",
				"sv": "SPARQL fråga",
				"tr": "SPARQL sorgusu",
				"uk": "запит SPARQL"
			},
			"example": {
				"be-tarask": "SELECT * WHERE { ?x wdt:P31 wd:Q5 } LIMIT 1",
				"en": "SELECT * WHERE { ?x wdt:P31 wd:Q5 } LIMIT 1",
				"es": "SELECT ?item WHERE { ?item wdt:P31 wd:Q5 } LIMIT 1",
				"fr": "select ?item where { ?item wdt:P31 wd:Q5 } LIMIT 1",
				"it": "select ?item where { ?item wdt:P31 wd:Q5 } LIMIT 1",
				"pt": "select ?item where { ?item wdt:P31 wd:Q5 } LIMIT 1",
				"pt-br": "select ?item where { ?item wdt:P31 wd:Q5 } LIMIT 1"
			},
			"type": "string",
			"aliases": [
				"sparql"
			],
			"suggested": true
		},
		"extraprefix": {
			"description": {
				"ar": "بادئات إضافية لإضافتها",
                "be-tarask": "дадатковыя прэфіксы (неабавязковыя)",
				"en": "Extra prefixes to be added",
				"es": "Prefijos extra a añadir (opcional)",
				"fr": "les préfixes SPARQL non standards ou inconnus du service de requête éventuellement nécessaires (optionnel)",
				"it": "Aggiungere i prefissi SPARQL non standard o sconosciuti eventualmente necessari (opzionale)",
				"pl": "Dodatkowe prefiksy (opcjonalnie)",
				"pt": "Adicionar os prefixos SPARQL não padrões ou desconhecidos eventualmente necessários (opcional)",
				"pt-br": "Adicionar os prefixos SPARQL não padrões ou desconhecidos eventualmente necessários (opcional)",
				"uk": "Додаткові префікси (необов'язкові)"
			},
			"example": "PREFIX wikibase: &lt;http://wikiba.se/ontology#&gt;",
			"type": "string"
		}
	},
	"description": {
        "be-tarask": "Гэты шаблён выводзіць запыт SPARQL з падсьветкай сынтаксісу, выкарыстаных элемэнтаў і спасылак на WDQS дзеля запуску запыту. \nЗРАБІЦЬ: скарыстаныя меткі элемэнтаў не лякалізаваныя",
		"en": "This template displays SPARQL query with syntax highlighting, used items and link to WDQS query site to run the query. \nTODO: used items labels are not localized",
		"es": "Esta plantilla muestra una consulta SPARQL con resaltado de sintaxis, los items utilizados y un enlace al WDQS para lanzar la consulta",
		"fr": "Ce modèle affiche une requête SPARQL et permet de la lancer au travers du service de requête Wikidata. Il affiche aussi quelques informations basiques sur les éléments et fonctionnalités utilisées par cette requête",
		"it": "Questo template mostra una query SPARQL evidenziandone la sintassi e gli elementi usati e fornisce un link alla query WDQS site che permette di lanciare la query",
		"ja": "このテンプレートにはSPARQLクエリと構文の強調表示、使用済みアイテム、クエリを実行するWDQSクエリサイトへのリンクが表示されます。",
		"pl": "Szablon wyświetla zapytanie SPARQL z podświetlaniem składni, listą użytych elementów i linkiem do WDQS.",
		"pt": "Esta predefinição mostra uma consulta SPARQL na qual evidencia a sintaxe e os elementos usados e fornece um enlace ao site WDQS que permite executar a consulta",
		"pt-br": "Esta predefinição mostra uma consulta SPARQL na qual evidencia a sintaxe e os elementos usados e fornece um enlace ao site WDQS que permite executar a consulta",
		"sv": "Denna mall visar en SPARQL fråga med syntaxfärgning, använda objekt och länk till WDQS frågesajten för att köra frågan. \nTODO: använda objekts etiketter är inte lokaliserade",
		"uk": "Цей шаблон показує запит SPARQL з підсвічуванням елементів синтаксису, список використаних елементів і посилання на сайт WDQS-запиту."
	},
	"paramOrder": [
		"query",
		"extraprefix"
	],
	"format": "block"
}
&lt;/templatedata&gt;
&lt;/noinclude&gt;</text>
      <sha1>gtgevq83i1rilx0x6n0nrwcpf0qy8lb</sha1>
    </revision>
  </page>
  <page>
    <title>Template:SPARQL</title>
    <ns>10</ns>
    <id>23033013</id>
	<revision>
      <id>1243168967</id>
      <parentid>1073077017</parentid>
      <timestamp>2020-07-31T12:55:30Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <comment>update SDC URL</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="696" xml:space="preserve">&lt;onlyinclude&gt;&lt;div {{#switch: {{{state|}}} | collapsed = class="mw-collapsible mw-collapsed" | expanded = class="mw-collapsible" }} &gt;{{#tag:syntaxhighlight|{{SPARQLText|p={{{p|}}}|q={{{q|}}}|v={{{v|}}}|query={{#invoke:ConcatArgs|ConcatArgs|init=query|min=1}}|extraprefix={{{extraprefix|}}} }}|lang="sparql"}}&lt;/div&gt;[{{#switch:{{{project|wd}}}|wd=//query.wikidata.org/|sdc=//wcqs-beta.wmflabs.org}}#{{urlencode: {{SPARQLText|p={{{p|}}}|q={{{q|}}}|v={{{v|}}}|query={{#invoke:ConcatArgs|ConcatArgs|init=query|min=1}}|extraprefix={{{extraprefix|}}} }} | PATH }} {{{label|{{int try it}}}}}] {{#if: {{{shortURL|}}} | (&lt;nowiki /&gt;https://w.wiki/{{{shortURL}}}&lt;nowiki /&gt;) }}&lt;/onlyinclude&gt;

{{documentation}}</text>
      <sha1>izsgb9vsutr1njgxwu2b1x9xzjx4lrj</sha1>
    </revision>
	<revision>
      <id>485</id>
      <parentid>238</parentid>
      <timestamp>2020-08-14T08:14:07Z</timestamp>
      <contributor>
        <username>DFichtmueller</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>included MediaWiki:QueryServiceURL as default</comment>
      <origin>485</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="729" sha1="taevbecblc8ttjul7vge09pq5e9lgzv" xml:space="preserve">&lt;onlyinclude&gt;&lt;div {{#switch: {{{state|}}} | collapsed = class="mw-collapsible mw-collapsed" | expanded = class="mw-collapsible" }} &gt;{{#tag:syntaxhighlight|{{SPARQLText|p={{{p|}}}|q={{{q|}}}|v={{{v|}}}|query={{#invoke:ConcatArgs|ConcatArgs|init=query|min=1}}|extraprefix={{{extraprefix|}}} }}|lang="sparql"}}&lt;/div&gt;[{{#switch:{{{project|wb}}}|wb={{MediaWiki:QueryServiceURL}}|wd=//query.wikidata.org/|sdc=//wcqs-beta.wmflabs.org}}#{{urlencode: {{SPARQLText|p={{{p|}}}|q={{{q|}}}|v={{{v|}}}|query={{#invoke:ConcatArgs|ConcatArgs|init=query|min=1}}|extraprefix={{{extraprefix|}}} }} | PATH }} {{{label|{{int try it}}}}}] {{#if: {{{shortURL|}}} | (&lt;nowiki /&gt;https://w.wiki/{{{shortURL}}}&lt;nowiki /&gt;) }}&lt;/onlyinclude&gt;

{{documentation}}</text>
      <sha1>taevbecblc8ttjul7vge09pq5e9lgzv</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Label</title>
    <ns>10</ns>
    <id>14107058</id>
    <revision>
      <id>1180981625</id>
      <parentid>806967276</parentid>
      <timestamp>2020-05-14T02:43:50Z</timestamp>
      <contributor>
        <username>Jarekt</username>
        <id>1274</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="272" xml:space="preserve">{{#if:{{{item|{{{1|}}} }}}|
  {{#invoke:Wikidata label|getLabel
    |item={{{item|{{{1|}}} }}}
    |lang={{{lang|{{{2|}}} }}}
    |link={{{link|-}}}
    |capitalization={{{capitalization|none}}}
    |show_id={{{show_id|}}}
  }} 
}}&lt;noinclude&gt;
{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>3n5b146mlbpr2piyuavzxrctzu75y5c</sha1>
    </revision>
  </page>
  <page>
    <title>MediaWiki:ItemNamespace</title>
    <ns>8</ns>
    <id>882</id>
    <revision>
      <id>8322</id>
      <parentid>8321</parentid>
      <timestamp>2020-07-07T16:25:45Z</timestamp>
      <contributor>
        <username>DFichtmueller</username>
        <id>1</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5">Item:</text>
      <sha1>jzeedreiagug7pxzyse4yj76firey3k</sha1>
    </revision>
  </page>
</mediawiki>
